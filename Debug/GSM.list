
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005534  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800586c  0800586c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800586c  0800586c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800586c  0800586c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e48  20000074  080058e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ebc  080058e8  00022ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164f1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d6  00000000  00000000  0003658e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00039668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b7f  00000000  00000000  0003bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ff5  00000000  00000000  0003e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936c0  00000000  00000000  000527c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  000e5ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800562c 	.word	0x0800562c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800562c 	.word	0x0800562c

08000150 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	//int g = 999;   Отримання одного байту від GSM МОДУЛЯ


	if(huart == &huart1)											// Which uart generate Callback function
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4a2a      	ldr	r2, [pc, #168]	; (8000204 <HAL_UART_RxCpltCallback+0xb4>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d14d      	bne.n	80001fc <HAL_UART_RxCpltCallback+0xac>
	{
		// '\r' -
		// '\n' - 10
		if((str[0] == 0x0D) || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8000160:	4b29      	ldr	r3, [pc, #164]	; (8000208 <HAL_UART_RxCpltCallback+0xb8>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	2b0d      	cmp	r3, #13
 8000166:	d003      	beq.n	8000170 <HAL_UART_RxCpltCallback+0x20>
 8000168:	4b28      	ldr	r3, [pc, #160]	; (800020c <HAL_UART_RxCpltCallback+0xbc>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b31      	cmp	r3, #49	; 0x31
 800016e:	d930      	bls.n	80001d2 <HAL_UART_RxCpltCallback+0x82>
		{
			flag_command_received = true;                           // Data is ready
 8000170:	4b27      	ldr	r3, [pc, #156]	; (8000210 <HAL_UART_RxCpltCallback+0xc0>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000176:	4b25      	ldr	r3, [pc, #148]	; (800020c <HAL_UART_RxCpltCallback+0xbc>)
 8000178:	2200      	movs	r2, #0
 800017a:	701a      	strb	r2, [r3, #0]

			// WORK WITC RECEIVED COMMAND
			char OK_str[] = "OK";
 800017c:	4a25      	ldr	r2, [pc, #148]	; (8000214 <HAL_UART_RxCpltCallback+0xc4>)
 800017e:	f107 030c 	add.w	r3, r7, #12
 8000182:	6812      	ldr	r2, [r2, #0]
 8000184:	4611      	mov	r1, r2
 8000186:	8019      	strh	r1, [r3, #0]
 8000188:	3302      	adds	r3, #2
 800018a:	0c12      	lsrs	r2, r2, #16
 800018c:	701a      	strb	r2, [r3, #0]
			if((strstr(uart_rx_data, OK_str)) != NULL)		// Work
 800018e:	f107 030c 	add.w	r3, r7, #12
 8000192:	4619      	mov	r1, r3
 8000194:	4820      	ldr	r0, [pc, #128]	; (8000218 <HAL_UART_RxCpltCallback+0xc8>)
 8000196:	f005 f9df 	bl	8005558 <strstr>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d002      	beq.n	80001a6 <HAL_UART_RxCpltCallback+0x56>
			{
				int hhdd = 888;
 80001a0:	f44f 735e 	mov.w	r3, #888	; 0x378
 80001a4:	617b      	str	r3, [r7, #20]
			}

			if((strstr(uart_rx_data, "+380931482354")) != NULL)  // Work
 80001a6:	491d      	ldr	r1, [pc, #116]	; (800021c <HAL_UART_RxCpltCallback+0xcc>)
 80001a8:	481b      	ldr	r0, [pc, #108]	; (8000218 <HAL_UART_RxCpltCallback+0xc8>)
 80001aa:	f005 f9d5 	bl	8005558 <strstr>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d002      	beq.n	80001ba <HAL_UART_RxCpltCallback+0x6a>
			{
				int hhdddd = 888;
 80001b4:	f44f 735e 	mov.w	r3, #888	; 0x378
 80001b8:	613b      	str	r3, [r7, #16]
//				// error
//			}


			//Передача даних через чергу в потік, де буде аналізуватися комінди
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 80001ba:	2232      	movs	r2, #50	; 0x32
 80001bc:	2100      	movs	r1, #0
 80001be:	4816      	ldr	r0, [pc, #88]	; (8000218 <HAL_UART_RxCpltCallback+0xc8>)
 80001c0:	f005 f958 	bl	8005474 <memset>




			HAL_UART_Receive_IT(&huart1, str, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	4910      	ldr	r1, [pc, #64]	; (8000208 <HAL_UART_RxCpltCallback+0xb8>)
 80001c8:	480e      	ldr	r0, [pc, #56]	; (8000204 <HAL_UART_RxCpltCallback+0xb4>)
 80001ca:	f001 ff00 	bl	8001fce <HAL_UART_Receive_IT>
		{
 80001ce:	bf00      	nop

//		HAL_UART_Receive_IT(&huart1, &rx_uart, 1);



}
 80001d0:	e014      	b.n	80001fc <HAL_UART_RxCpltCallback+0xac>
			flag_command_received = false;							// Receive data
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <HAL_UART_RxCpltCallback+0xc0>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <HAL_UART_RxCpltCallback+0xbc>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	461a      	mov	r2, r3
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <HAL_UART_RxCpltCallback+0xb8>)
 80001e0:	7819      	ldrb	r1, [r3, #0]
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <HAL_UART_RxCpltCallback+0xc8>)
 80001e4:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 80001e6:	2201      	movs	r2, #1
 80001e8:	4907      	ldr	r1, [pc, #28]	; (8000208 <HAL_UART_RxCpltCallback+0xb8>)
 80001ea:	4806      	ldr	r0, [pc, #24]	; (8000204 <HAL_UART_RxCpltCallback+0xb4>)
 80001ec:	f001 feef 	bl	8001fce <HAL_UART_Receive_IT>
			rx_data_counter ++;
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <HAL_UART_RxCpltCallback+0xbc>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_UART_RxCpltCallback+0xbc>)
 80001fa:	701a      	strb	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	3718      	adds	r7, #24
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200000c8 	.word	0x200000c8
 8000208:	200000c4 	.word	0x200000c4
 800020c:	200000c6 	.word	0x200000c6
 8000210:	200000c5 	.word	0x200000c5
 8000214:	080056a0 	.word	0x080056a0
 8000218:	20000090 	.word	0x20000090
 800021c:	08005690 	.word	0x08005690

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fba4 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f85e 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8cc 	bl	80003c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f8a0 	bl	8000374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000234:	f002 fb24 	bl	8002880 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of command_from_GCM */
  command_from_GCMHandle = osMessageQueueNew (1, sizeof(TX_GCM_COMAND), &command_from_GCM_attributes);
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <main+0x88>)
 800023a:	2128      	movs	r1, #40	; 0x28
 800023c:	2001      	movs	r0, #1
 800023e:	f002 fc5d 	bl	8002afc <osMessageQueueNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a19      	ldr	r2, [pc, #100]	; (80002ac <main+0x8c>)
 8000246:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <main+0x90>)
 800024a:	2100      	movs	r1, #0
 800024c:	4819      	ldr	r0, [pc, #100]	; (80002b4 <main+0x94>)
 800024e:	f002 fb7d 	bl	800294c <osThreadNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <main+0x98>)
 8000256:	6013      	str	r3, [r2, #0]

  /* creation of gsm_task */
  gsm_taskHandle = osThreadNew(Start_gsm_task, NULL, &gsm_task_attributes);
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <main+0x9c>)
 800025a:	2100      	movs	r1, #0
 800025c:	4818      	ldr	r0, [pc, #96]	; (80002c0 <main+0xa0>)
 800025e:	f002 fb75 	bl	800294c <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <main+0xa4>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of parsingGSMcom */
  parsingGSMcomHandle = osThreadNew(StartParsingGSMCom, NULL, &parsingGSMcom_attributes);
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <main+0xa8>)
 800026a:	2100      	movs	r1, #0
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <main+0xac>)
 800026e:	f002 fb6d 	bl	800294c <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <main+0xb0>)
 8000276:	6013      	str	r3, [r2, #0]

  /* creation of resoursesMonito */
  resoursesMonitoHandle = osThreadNew(StartResoursesMonitor, NULL, &resoursesMonito_attributes);
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <main+0xb4>)
 800027a:	2100      	movs	r1, #0
 800027c:	4816      	ldr	r0, [pc, #88]	; (80002d8 <main+0xb8>)
 800027e:	f002 fb65 	bl	800294c <osThreadNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a15      	ldr	r2, [pc, #84]	; (80002dc <main+0xbc>)
 8000286:	6013      	str	r3, [r2, #0]
  /* add events, ... */



//  HAL_UART_Receive_IT(&huart1, &rx_uart, 1);
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	2100      	movs	r1, #0
 800028c:	2025      	movs	r0, #37	; 0x25
 800028e:	f000 fc56 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000292:	2025      	movs	r0, #37	; 0x25
 8000294:	f000 fc6f 	bl	8000b76 <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1, str, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	4911      	ldr	r1, [pc, #68]	; (80002e0 <main+0xc0>)
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <main+0xc4>)
 800029e:	f001 fe96 	bl	8001fce <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002a2:	f002 fb1f 	bl	80028e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x86>
 80002a8:	080057dc 	.word	0x080057dc
 80002ac:	2000011c 	.word	0x2000011c
 80002b0:	0800574c 	.word	0x0800574c
 80002b4:	08000461 	.word	0x08000461
 80002b8:	2000010c 	.word	0x2000010c
 80002bc:	08005770 	.word	0x08005770
 80002c0:	08000481 	.word	0x08000481
 80002c4:	20000110 	.word	0x20000110
 80002c8:	08005794 	.word	0x08005794
 80002cc:	0800062d 	.word	0x0800062d
 80002d0:	20000114 	.word	0x20000114
 80002d4:	080057b8 	.word	0x080057b8
 80002d8:	080006bd 	.word	0x080006bd
 80002dc:	20000118 	.word	0x20000118
 80002e0:	200000c4 	.word	0x200000c4
 80002e4:	200000c8 	.word	0x200000c8

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 f8bc 	bl	8005474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fe95 	bl	8001060 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f9d8 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f902 	bl	8001564 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 f9c3 	bl	80006f0 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	; 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_USART1_UART_Init+0x50>)
 800037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000380:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003ac:	f001 fcec 	bl	8001d88 <HAL_UART_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003b6:	f000 f99b 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200000c8 	.word	0x200000c8
 80003c4:	40013800 	.word	0x40013800

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_GPIO_Init+0x90>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_GPIO_Init+0x90>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a11      	ldr	r2, [pc, #68]	; (8000458 <MX_GPIO_Init+0x90>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042a:	480c      	ldr	r0, [pc, #48]	; (800045c <MX_GPIO_Init+0x94>)
 800042c:	f000 fde6 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2302      	movs	r3, #2
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_GPIO_Init+0x94>)
 800044a:	f000 fc53 	bl	8000cf4 <HAL_GPIO_Init>

}
 800044e:	bf00      	nop
 8000450:	3720      	adds	r7, #32
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	40011000 	.word	0x40011000

08000460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <StartDefaultTask+0x1c>)
 800046e:	f000 fddd 	bl	800102c <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000476:	f002 fb13 	bl	8002aa0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800047a:	e7f5      	b.n	8000468 <StartDefaultTask+0x8>
 800047c:	40011000 	.word	0x40011000

08000480 <Start_gsm_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_gsm_task */
void Start_gsm_task(void *argument)
{
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b0a6      	sub	sp, #152	; 0x98
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);

	// 1. Надсилання команди АТ
	osDelay(3000);
 8000488:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800048c:	f002 fb08 	bl	8002aa0 <osDelay>

	// Налаштування і ініціалізація
	char AT_COMAND[] = "AT\n\r"; 				// Must return OK
 8000490:	4a59      	ldr	r2, [pc, #356]	; (80005f8 <Start_gsm_task+0x178>)
 8000492:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800049a:	6018      	str	r0, [r3, #0]
 800049c:	3304      	adds	r3, #4
 800049e:	7019      	strb	r1, [r3, #0]
	char AT_COMAND_ATE0[] = "ATE0\n\r";			// Виключити ехо
 80004a0:	4a56      	ldr	r2, [pc, #344]	; (80005fc <Start_gsm_task+0x17c>)
 80004a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004aa:	6018      	str	r0, [r3, #0]
 80004ac:	3304      	adds	r3, #4
 80004ae:	8019      	strh	r1, [r3, #0]
 80004b0:	3302      	adds	r3, #2
 80004b2:	0c0a      	lsrs	r2, r1, #16
 80004b4:	701a      	strb	r2, [r3, #0]
	char AT_COMAND_ATE1[] = "ATE1\n\r";			// Включити ехо
 80004b6:	4a52      	ldr	r2, [pc, #328]	; (8000600 <Start_gsm_task+0x180>)
 80004b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
 80004c6:	3302      	adds	r3, #2
 80004c8:	0c0a      	lsrs	r2, r1, #16
 80004ca:	701a      	strb	r2, [r3, #0]
	char AT_COMAND_TURN_OFF_ECHO[] = "ATV0\n\r";	// Тільки відповідь
 80004cc:	4a4d      	ldr	r2, [pc, #308]	; (8000604 <Start_gsm_task+0x184>)
 80004ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80004d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004d6:	6018      	str	r0, [r3, #0]
 80004d8:	3304      	adds	r3, #4
 80004da:	8019      	strh	r1, [r3, #0]
 80004dc:	3302      	adds	r3, #2
 80004de:	0c0a      	lsrs	r2, r1, #16
 80004e0:	701a      	strb	r2, [r3, #0]
	char AT_COMAND_TURN_ON_ECHO[] = "ATV1\n\r";	// Повна відповідь з ехо
 80004e2:	4a49      	ldr	r2, [pc, #292]	; (8000608 <Start_gsm_task+0x188>)
 80004e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ec:	6018      	str	r0, [r3, #0]
 80004ee:	3304      	adds	r3, #4
 80004f0:	8019      	strh	r1, [r3, #0]
 80004f2:	3302      	adds	r3, #2
 80004f4:	0c0a      	lsrs	r2, r1, #16
 80004f6:	701a      	strb	r2, [r3, #0]
	char AT_COMAND_АОН[] = "AT+CLIP=1\n\r";    // ??????
 80004f8:	4a44      	ldr	r2, [pc, #272]	; (800060c <Start_gsm_task+0x18c>)
 80004fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80004fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//char AT_COMAND_

	// ЗВІНКИ

	char AT_COMAND_MAKE_CALL_ON_NUMBER[] = "ATD+ 380931482354;\n\r";     // Зробити звінок по номеру
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <Start_gsm_task+0x190>)
 8000506:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800050a:	461d      	mov	r5, r3
 800050c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000510:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000514:	6020      	str	r0, [r4, #0]
 8000516:	3404      	adds	r4, #4
 8000518:	7021      	strb	r1, [r4, #0]
	char AT_COMMAND_PICK_UP_PHONE[] = "ATA\n\r";			// Підняти трубку
 800051a:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <Start_gsm_task+0x194>)
 800051c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	8019      	strh	r1, [r3, #0]
	char AT_COMAND_END_CALL[] = "ATH0\n\r";				// Повісити трубку
 800052a:	4a3b      	ldr	r2, [pc, #236]	; (8000618 <Start_gsm_task+0x198>)
 800052c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000534:	6018      	str	r0, [r3, #0]
 8000536:	3304      	adds	r3, #4
 8000538:	8019      	strh	r1, [r3, #0]
 800053a:	3302      	adds	r3, #2
 800053c:	0c0a      	lsrs	r2, r1, #16
 800053e:	701a      	strb	r2, [r3, #0]
//	char AT_COMAND_
//	char AT_COMAND_
//	char AT_COMAND_


	char AT_COMAND_AT_CLIP[] = "AT+CLIP=1\n\r"; 			// Включення визначника вхідного номера
 8000540:	4a32      	ldr	r2, [pc, #200]	; (800060c <Start_gsm_task+0x18c>)
 8000542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char AT_COMAND_AT_COPS[] = "AT+COPS?\n\r"; 		// Інформація про оператора. Вертає +COPS: 0,0,»MTS-RUS»  OK
 800054c:	4a33      	ldr	r2, [pc, #204]	; (800061c <Start_gsm_task+0x19c>)
 800054e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000552:	ca07      	ldmia	r2, {r0, r1, r2}
 8000554:	c303      	stmia	r3!, {r0, r1}
 8000556:	801a      	strh	r2, [r3, #0]
 8000558:	3302      	adds	r3, #2
 800055a:	0c12      	lsrs	r2, r2, #16
 800055c:	701a      	strb	r2, [r3, #0]
	char AT_COMAND_AT_CPAS[] = "AT+CPAS\n\r";			// Інформація про стан модуля 0 – готов к работе, 	2 – неизвестно, 3 – входящий звонок, 4 – голосовое соединение
 800055e:	4a30      	ldr	r2, [pc, #192]	; (8000620 <Start_gsm_task+0x1a0>)
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	ca07      	ldmia	r2, {r0, r1, r2}
 8000566:	c303      	stmia	r3!, {r0, r1}
 8000568:	801a      	strh	r2, [r3, #0]
	char AT_COMAND_AT_CSQ[] = "AT+CSQ\n\r";				// Рівень сигналу
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <Start_gsm_task+0x1a4>)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	ca07      	ldmia	r2, {r0, r1, r2}
 8000572:	c303      	stmia	r3!, {r0, r1}
 8000574:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, AT_COMAND, 10, 1000);
 8000576:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	220a      	movs	r2, #10
 8000580:	4829      	ldr	r0, [pc, #164]	; (8000628 <Start_gsm_task+0x1a8>)
 8000582:	f001 fc4e 	bl	8001e22 <HAL_UART_Transmit>

	HAL_UART_Transmit_IT(&huart1, AT_COMAND, sizeof(AT_COMAND));
 8000586:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800058a:	2205      	movs	r2, #5
 800058c:	4619      	mov	r1, r3
 800058e:	4826      	ldr	r0, [pc, #152]	; (8000628 <Start_gsm_task+0x1a8>)
 8000590:	f001 fcd9 	bl	8001f46 <HAL_UART_Transmit_IT>
	osDelay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f002 fa83 	bl	8002aa0 <osDelay>
	HAL_UART_Transmit_IT(&huart1, AT_COMAND_ATE0, sizeof(AT_COMAND_ATE0));
 800059a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800059e:	2207      	movs	r2, #7
 80005a0:	4619      	mov	r1, r3
 80005a2:	4821      	ldr	r0, [pc, #132]	; (8000628 <Start_gsm_task+0x1a8>)
 80005a4:	f001 fccf 	bl	8001f46 <HAL_UART_Transmit_IT>
	osDelay(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f002 fa79 	bl	8002aa0 <osDelay>
	HAL_UART_Transmit_IT(&huart1, AT_COMAND_AT_CLIP, sizeof(AT_COMAND_AT_CLIP));
 80005ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b2:	220c      	movs	r2, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <Start_gsm_task+0x1a8>)
 80005b8:	f001 fcc5 	bl	8001f46 <HAL_UART_Transmit_IT>
	osDelay(100);
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f002 fa6f 	bl	8002aa0 <osDelay>
	HAL_UART_Transmit_IT(&huart1, AT_COMAND_АОН, sizeof(AT_COMAND_АОН));
 80005c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005c6:	220c      	movs	r2, #12
 80005c8:	4619      	mov	r1, r3
 80005ca:	4817      	ldr	r0, [pc, #92]	; (8000628 <Start_gsm_task+0x1a8>)
 80005cc:	f001 fcbb 	bl	8001f46 <HAL_UART_Transmit_IT>
	osDelay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f002 fa65 	bl	8002aa0 <osDelay>
	HAL_UART_Transmit_IT(&huart1, AT_COMAND_TURN_OFF_ECHO, sizeof(AT_COMAND_TURN_OFF_ECHO));
 80005d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80005da:	2207      	movs	r2, #7
 80005dc:	4619      	mov	r1, r3
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <Start_gsm_task+0x1a8>)
 80005e0:	f001 fcb1 	bl	8001f46 <HAL_UART_Transmit_IT>
	osDelay(3000);
 80005e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e8:	f002 fa5a 	bl	8002aa0 <osDelay>

  for(;;)
  {

	  //HAL_UART_Transmit_IT(&huart1, AT_COMAND, sizeof(AT_COMAND));
	  osDelay(5000);
 80005ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f0:	f002 fa56 	bl	8002aa0 <osDelay>
 80005f4:	e7fa      	b.n	80005ec <Start_gsm_task+0x16c>
 80005f6:	bf00      	nop
 80005f8:	080056a4 	.word	0x080056a4
 80005fc:	080056ac 	.word	0x080056ac
 8000600:	080056b4 	.word	0x080056b4
 8000604:	080056bc 	.word	0x080056bc
 8000608:	080056c4 	.word	0x080056c4
 800060c:	080056cc 	.word	0x080056cc
 8000610:	080056d8 	.word	0x080056d8
 8000614:	080056f0 	.word	0x080056f0
 8000618:	080056f8 	.word	0x080056f8
 800061c:	08005700 	.word	0x08005700
 8000620:	0800570c 	.word	0x0800570c
 8000624:	08005718 	.word	0x08005718
 8000628:	200000c8 	.word	0x200000c8

0800062c <StartParsingGSMCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParsingGSMCom */
void StartParsingGSMCom(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParsingGSMCom */
  /* Infinite loop */
  for(;;)
  {
	  char tx_gsm_data[50] = {0};
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	222e      	movs	r2, #46	; 0x2e
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f004 ff17 	bl	8005474 <memset>
	  if (xQueueReceive(command_from_GCMHandle, tx_gsm_data, 0) == pdTRUE)		// Read witch button was pressed
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <StartParsingGSMCom+0x84>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fe91 	bl	8003378 <xQueueReceive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d125      	bne.n	80006a8 <StartParsingGSMCom+0x7c>
	  {
		  // Command was received
		  int f = 1111;
 800065c:	f240 4357 	movw	r3, #1111	; 0x457
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c

		  char OK_str[] = "OK";
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <StartParsingGSMCom+0x88>)
 8000664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	4611      	mov	r1, r2
 800066c:	8019      	strh	r1, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
		  if((strstr(tx_gsm_data, OK_str)) != NULL)		// Work
 8000674:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f004 ff6a 	bl	8005558 <strstr>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <StartParsingGSMCom+0x64>
		  {
			  int hhdd = 888;
 800068a:	f44f 735e 	mov.w	r3, #888	; 0x378
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
		  }

		  if((strstr(tx_gsm_data, "+380931482354")) != NULL)  // Work
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4908      	ldr	r1, [pc, #32]	; (80006b8 <StartParsingGSMCom+0x8c>)
 8000696:	4618      	mov	r0, r3
 8000698:	f004 ff5e 	bl	8005558 <strstr>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <StartParsingGSMCom+0x7c>
		  {
			  int hhdddd = 888;
 80006a2:	f44f 735e 	mov.w	r3, #888	; 0x378
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
		  }
	  }

    osDelay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f002 f9f9 	bl	8002aa0 <osDelay>
  {
 80006ae:	e7c1      	b.n	8000634 <StartParsingGSMCom+0x8>
 80006b0:	2000011c 	.word	0x2000011c
 80006b4:	080056a0 	.word	0x080056a0
 80006b8:	08005690 	.word	0x08005690

080006bc <StartResoursesMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResoursesMonitor */
void StartResoursesMonitor(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResoursesMonitor */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f002 f9eb 	bl	8002aa0 <osDelay>
 80006ca:	e7fb      	b.n	80006c4 <StartResoursesMonitor+0x8>

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006de:	f000 f95d 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40000800 	.word	0x40000800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_MspInit+0x68>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_MspInit+0x68>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x68>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x68>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_MspInit+0x68>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x68>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	f06f 0001 	mvn.w	r0, #1
 800073a:	f000 fa00 	bl	8000b3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x6c>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x6c>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <HAL_UART_MspInit+0x9c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d139      	bne.n	8000800 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <HAL_UART_MspInit+0xa0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1e      	ldr	r2, [pc, #120]	; (800080c <HAL_UART_MspInit+0xa0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_UART_MspInit+0xa0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_UART_MspInit+0xa0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <HAL_UART_MspInit+0xa0>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_UART_MspInit+0xa0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <HAL_UART_MspInit+0xa4>)
 80007d2:	f000 fa8f 	bl	8000cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <HAL_UART_MspInit+0xa4>)
 80007ec:	f000 fa82 	bl	8000cf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2105      	movs	r1, #5
 80007f4:	2025      	movs	r0, #37	; 0x25
 80007f6:	f000 f9a2 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fa:	2025      	movs	r0, #37	; 0x25
 80007fc:	f000 f9bb 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013800 	.word	0x40013800
 800080c:	40021000 	.word	0x40021000
 8000810:	40010800 	.word	0x40010800

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	201e      	movs	r0, #30
 800082a:	f000 f988 	bl	8000b3e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800082e:	201e      	movs	r0, #30
 8000830:	f000 f9a1 	bl	8000b76 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_InitTick+0xa0>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_InitTick+0xa0>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	61d3      	str	r3, [r2, #28]
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_InitTick+0xa0>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800084c:	f107 0210 	add.w	r2, r7, #16
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fffe 	bl	8001858 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800085c:	f000 ffd4 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8000860:	4603      	mov	r3, r0
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_InitTick+0xa4>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	0c9b      	lsrs	r3, r3, #18
 8000870:	3b01      	subs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_InitTick+0xa8>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_InitTick+0xac>)
 8000878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_InitTick+0xa8>)
 800087c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000880:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_InitTick+0xa8>)
 8000884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000886:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_InitTick+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_InitTick+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_InitTick+0xa8>)
 8000896:	f001 f82d 	bl	80018f4 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_InitTick+0xa8>)
 80008a2:	f001 f87f 	bl	80019a4 <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	431bde83 	.word	0x431bde83
 80008bc:	20000120 	.word	0x20000120
 80008c0:	40000800 	.word	0x40000800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <TIM4_IRQHandler+0x10>)
 80008f6:	f001 f8a7 	bl	8001a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000120 	.word	0x20000120

08000904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <USART1_IRQHandler+0x10>)
 800090a:	f001 fb91 	bl	8002030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8

08000918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094a:	f7ff ffe5 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f004 fd5d 	bl	800540c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fc65 	bl	8000220 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000960:	08005874 	.word	0x08005874
  ldr r2, =_sbss
 8000964:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000968:	20002ebc 	.word	0x20002ebc

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f8d1 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f7ff ff44 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff feb6 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000168 	.word	0x20000168

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000168 	.word	0x20000168

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	; (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff4f 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff64 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff81 	bl	8000a70 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff57 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d008      	beq.n	8000bba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2204      	movs	r2, #4
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e020      	b.n	8000bfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020e 	bic.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d005      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2204      	movs	r2, #4
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e051      	b.n	8000cce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_DMA_Abort_IT+0xd0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d029      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0xa0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_DMA_Abort_IT+0xd4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d022      	beq.n	8000ca4 <HAL_DMA_Abort_IT+0x9c>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_DMA_Abort_IT+0xd8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d01a      	beq.n	8000c9e <HAL_DMA_Abort_IT+0x96>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <HAL_DMA_Abort_IT+0xdc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d012      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x90>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_DMA_Abort_IT+0xe0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d00a      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x8a>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_DMA_Abort_IT+0xe4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d102      	bne.n	8000c8c <HAL_DMA_Abort_IT+0x84>
 8000c86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c8a:	e00e      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c90:	e00b      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c96:	e008      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	e005      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca2:	e002      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	e000      	b.n	8000caa <HAL_DMA_Abort_IT+0xa2>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_DMA_Abort_IT+0xe8>)
 8000cac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
    } 
  }
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020008 	.word	0x40020008
 8000cdc:	4002001c 	.word	0x4002001c
 8000ce0:	40020030 	.word	0x40020030
 8000ce4:	40020044 	.word	0x40020044
 8000ce8:	40020058 	.word	0x40020058
 8000cec:	4002006c 	.word	0x4002006c
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b08b      	sub	sp, #44	; 0x2c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	e169      	b.n	8000fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8158 	bne.w	8000fd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a9a      	ldr	r2, [pc, #616]	; (8000f94 <HAL_GPIO_Init+0x2a0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d05e      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d30:	4a98      	ldr	r2, [pc, #608]	; (8000f94 <HAL_GPIO_Init+0x2a0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d875      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d36:	4a98      	ldr	r2, [pc, #608]	; (8000f98 <HAL_GPIO_Init+0x2a4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d058      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d3c:	4a96      	ldr	r2, [pc, #600]	; (8000f98 <HAL_GPIO_Init+0x2a4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d86f      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d42:	4a96      	ldr	r2, [pc, #600]	; (8000f9c <HAL_GPIO_Init+0x2a8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d052      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d48:	4a94      	ldr	r2, [pc, #592]	; (8000f9c <HAL_GPIO_Init+0x2a8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d869      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d4e:	4a94      	ldr	r2, [pc, #592]	; (8000fa0 <HAL_GPIO_Init+0x2ac>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d04c      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d54:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <HAL_GPIO_Init+0x2ac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d863      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d5a:	4a92      	ldr	r2, [pc, #584]	; (8000fa4 <HAL_GPIO_Init+0x2b0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d046      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d60:	4a90      	ldr	r2, [pc, #576]	; (8000fa4 <HAL_GPIO_Init+0x2b0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d85d      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d82a      	bhi.n	8000dc0 <HAL_GPIO_Init+0xcc>
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d859      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <HAL_GPIO_Init+0x80>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000dc9 	.word	0x08000dc9
 8000d7c:	08000ddb 	.word	0x08000ddb
 8000d80:	08000e1d 	.word	0x08000e1d
 8000d84:	08000e23 	.word	0x08000e23
 8000d88:	08000e23 	.word	0x08000e23
 8000d8c:	08000e23 	.word	0x08000e23
 8000d90:	08000e23 	.word	0x08000e23
 8000d94:	08000e23 	.word	0x08000e23
 8000d98:	08000e23 	.word	0x08000e23
 8000d9c:	08000e23 	.word	0x08000e23
 8000da0:	08000e23 	.word	0x08000e23
 8000da4:	08000e23 	.word	0x08000e23
 8000da8:	08000e23 	.word	0x08000e23
 8000dac:	08000e23 	.word	0x08000e23
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e23 	.word	0x08000e23
 8000db8:	08000dd1 	.word	0x08000dd1
 8000dbc:	08000de5 	.word	0x08000de5
 8000dc0:	4a79      	ldr	r2, [pc, #484]	; (8000fa8 <HAL_GPIO_Init+0x2b4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc6:	e02c      	b.n	8000e22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e029      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e024      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	3308      	adds	r3, #8
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e01f      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	330c      	adds	r3, #12
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e01a      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df6:	2304      	movs	r3, #4
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e013      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d105      	bne.n	8000e10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e04:	2308      	movs	r3, #8
 8000e06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	611a      	str	r2, [r3, #16]
          break;
 8000e0e:	e009      	b.n	8000e24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	615a      	str	r2, [r3, #20]
          break;
 8000e1a:	e003      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          break;
 8000e22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	2bff      	cmp	r3, #255	; 0xff
 8000e28:	d801      	bhi.n	8000e2e <HAL_GPIO_Init+0x13a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	e001      	b.n	8000e32 <HAL_GPIO_Init+0x13e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3304      	adds	r3, #4
 8000e32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d802      	bhi.n	8000e40 <HAL_GPIO_Init+0x14c>
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x152>
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	3b08      	subs	r3, #8
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	6a39      	ldr	r1, [r7, #32]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e74:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2bc>)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a40      	ldr	r2, [pc, #256]	; (8000fb4 <HAL_GPIO_Init+0x2c0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d013      	beq.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3f      	ldr	r2, [pc, #252]	; (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d00d      	beq.n	8000edc <HAL_GPIO_Init+0x1e8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3e      	ldr	r2, [pc, #248]	; (8000fbc <HAL_GPIO_Init+0x2c8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d007      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3d      	ldr	r2, [pc, #244]	; (8000fc0 <HAL_GPIO_Init+0x2cc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d101      	bne.n	8000ed4 <HAL_GPIO_Init+0x1e0>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e006      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	e004      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ef2:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x2bc>)
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	492c      	ldr	r1, [pc, #176]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4928      	ldr	r1, [pc, #160]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4922      	ldr	r1, [pc, #136]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	491e      	ldr	r1, [pc, #120]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	4918      	ldr	r1, [pc, #96]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4914      	ldr	r1, [pc, #80]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d021      	beq.n	8000fc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
 8000f90:	e021      	b.n	8000fd6 <HAL_GPIO_Init+0x2e2>
 8000f92:	bf00      	nop
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10310000 	.word	0x10310000
 8000f9c:	10220000 	.word	0x10220000
 8000fa0:	10210000 	.word	0x10210000
 8000fa4:	10120000 	.word	0x10120000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40011400 	.word	0x40011400
 8000fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4909      	ldr	r1, [pc, #36]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	3301      	adds	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f47f ae8e 	bne.w	8000d08 <HAL_GPIO_Init+0x14>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	372c      	adds	r7, #44	; 0x2c
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4013      	ands	r3, r2
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43d9      	mvns	r1, r3
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	400b      	ands	r3, r1
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e272      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8087 	beq.w	800118e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b04      	cmp	r3, #4
 800108a:	d00c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800108c:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b08      	cmp	r3, #8
 8001096:	d112      	bne.n	80010be <HAL_RCC_OscConfig+0x5e>
 8001098:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	d10b      	bne.n	80010be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d06c      	beq.n	800118c <HAL_RCC_OscConfig+0x12c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d168      	bne.n	800118c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e24c      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x76>
 80010c8:	4b80      	ldr	r3, [pc, #512]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a7f      	ldr	r2, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e02e      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a7a      	ldr	r2, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b78      	ldr	r3, [pc, #480]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a77      	ldr	r2, [pc, #476]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0xbc>
 8001102:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a71      	ldr	r2, [pc, #452]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xd4>
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a67      	ldr	r2, [pc, #412]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc40 	bl	80009c0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fc3c 	bl	80009c0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e200      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xe4>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc2c 	bl	80009c0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fc28 	bl	80009c0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1ec      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x10c>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d063      	beq.n	8001262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d11c      	bne.n	80011ec <HAL_RCC_OscConfig+0x18c>
 80011b2:	4b46      	ldr	r3, [pc, #280]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x176>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1c0      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4939      	ldr	r1, [pc, #228]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	e03a      	b.n	8001262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_RCC_OscConfig+0x270>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fbe1 	bl	80009c0 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fbdd 	bl	80009c0 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1a1      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4927      	ldr	r1, [pc, #156]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x270>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fbc0 	bl	80009c0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fbbc 	bl	80009c0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e180      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d03a      	beq.n	80012e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d019      	beq.n	80012aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_OscConfig+0x274>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fba0 	bl	80009c0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb9c 	bl	80009c0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e160      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_RCC_OscConfig+0x26c>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fb08 	bl	80018b8 <RCC_Delay>
 80012a8:	e01c      	b.n	80012e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x274>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fb86 	bl	80009c0 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	e00f      	b.n	80012d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fb82 	bl	80009c0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d908      	bls.n	80012d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e146      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	42420000 	.word	0x42420000
 80012d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b92      	ldr	r3, [pc, #584]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e9      	bne.n	80012b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a6 	beq.w	800143e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a87      	ldr	r2, [pc, #540]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x4c8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <HAL_RCC_OscConfig+0x4c8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7e      	ldr	r2, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x4c8>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb43 	bl	80009c0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fb3f 	bl	80009c0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e103      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b75      	ldr	r3, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x4c8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x312>
 8001364:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a6e      	ldr	r2, [pc, #440]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	e02d      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x334>
 800137a:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a69      	ldr	r2, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a66      	ldr	r2, [pc, #408]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	e01c      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x356>
 800139c:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a60      	ldr	r2, [pc, #384]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a5d      	ldr	r2, [pc, #372]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x36e>
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a5a      	ldr	r2, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff faf3 	bl	80009c0 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff faef 	bl	80009c0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0b1      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ee      	beq.n	80013de <HAL_RCC_OscConfig+0x37e>
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fadd 	bl	80009c0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fad9 	bl	80009c0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e09b      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d105      	bne.n	800143e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a3b      	ldr	r2, [pc, #236]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8087 	beq.w	8001556 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d061      	beq.n	8001518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d146      	bne.n	80014ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_RCC_OscConfig+0x4cc>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff faad 	bl	80009c0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff faa9 	bl	80009c0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e06d      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d108      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4921      	ldr	r1, [pc, #132]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a19      	ldr	r1, [r3, #32]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	430b      	orrs	r3, r1
 80014b6:	491b      	ldr	r1, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x4cc>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fa7d 	bl	80009c0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fa79 	bl	80009c0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e03d      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x46a>
 80014e8:	e035      	b.n	8001556 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x4cc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fa66 	bl	80009c0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fa62 	bl	80009c0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e026      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x498>
 8001516:	e01e      	b.n	8001556 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e019      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
 8001524:	40021000 	.word	0x40021000
 8001528:	40007000 	.word	0x40007000
 800152c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x500>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	429a      	cmp	r2, r3
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0d0      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4965      	ldr	r1, [pc, #404]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0b8      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	494d      	ldr	r1, [pc, #308]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d040      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d115      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07f      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e073      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06b      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f023 0203 	bic.w	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4936      	ldr	r1, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff f9b4 	bl	80009c0 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	e00a      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7ff f9b0 	bl	80009c0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e053      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 020c 	and.w	r2, r3, #12
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1eb      	bne.n	800165c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d210      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e032      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f821 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1cc>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1d0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f87e 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	080057f4 	.word	0x080057f4
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b490      	push	{r4, r7}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001740:	1d3c      	adds	r4, r7, #4
 8001742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001748:	f240 2301 	movw	r3, #513	; 0x201
 800174c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x40>
 8001772:	2b08      	cmp	r3, #8
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x46>
 8001776:	e02b      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800177a:	623b      	str	r3, [r7, #32]
      break;
 800177c:	e02b      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3328      	adds	r3, #40	; 0x28
 8001788:	443b      	add	r3, r7
 800178a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800178e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d012      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0c5b      	lsrs	r3, r3, #17
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	3328      	adds	r3, #40	; 0x28
 80017a6:	443b      	add	r3, r7
 80017a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80017b2:	fb03 f202 	mul.w	r2, r3, r2
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	e004      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	623b      	str	r3, [r7, #32]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d2:	623b      	str	r3, [r7, #32]
      break;
 80017d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc90      	pop	{r4, r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	08005724 	.word	0x08005724
 80017e8:	40021000 	.word	0x40021000
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	003d0900 	.word	0x003d0900

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000000 	.word	0x20000000

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800180c:	f7ff fff2 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	08005804 	.word	0x08005804

08001830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001834:	f7ff ffde 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08005804 	.word	0x08005804

08001858 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	220f      	movs	r2, #15
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40022000 	.word	0x40022000

080018b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <RCC_Delay+0x34>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <RCC_Delay+0x38>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0a5b      	lsrs	r3, r3, #9
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d4:	bf00      	nop
  }
  while (Delay --);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	60fa      	str	r2, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f9      	bne.n	80018d4 <RCC_Delay+0x1c>
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000000 	.word	0x20000000
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e041      	b.n	800198a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f839 	bl	8001992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f000 f9b4 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e03a      	b.n	8001a32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_TIM_Base_Start_IT+0x98>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e6:	d009      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d010      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	e007      	b.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800

08001a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0202 	mvn.w	r2, #2
 8001a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8ed 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8e0 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8ef 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0204 	mvn.w	r2, #4
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8c3 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8b6 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8c5 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0208 	mvn.w	r2, #8
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f899 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f88c 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f89b 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0210 	mvn.w	r2, #16
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2208      	movs	r2, #8
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f86f 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f862 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f871 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0201 	mvn.w	r2, #1
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fd80 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b80      	cmp	r3, #128	; 0x80
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8bf 	bl	8001d76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d107      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f835 	bl	8001c8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d107      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0220 	mvn.w	r2, #32
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f88a 	bl	8001d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00b      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d007      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d108      	bne.n	8001ce2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00b      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d007      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d108      	bne.n	8001d14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d103      	bne.n	8001d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800

08001d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e03f      	b.n	8001e1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fcdc 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fcc9 	bl	8002764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b08a      	sub	sp, #40	; 0x28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d17c      	bne.n	8001f3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_UART_Transmit+0x2c>
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e075      	b.n	8001f3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_UART_Transmit+0x3e>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e06e      	b.n	8001f3e <HAL_UART_Transmit+0x11c>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	; 0x21
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e76:	f7fe fda3 	bl	80009c0 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e90:	d108      	bne.n	8001ea4 <HAL_UART_Transmit+0x82>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	e003      	b.n	8001eac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001eb4:	e02a      	b.n	8001f0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa7c 	bl	80023be <UART_WaitOnFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e036      	b.n	8001f3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	e007      	b.n	8001efe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3301      	adds	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1cf      	bne.n	8001eb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fa4c 	bl	80023be <UART_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e006      	b.n	8001f3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d130      	bne.n	8001fc2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_UART_Transmit_IT+0x26>
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e029      	b.n	8001fc4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_UART_Transmit_IT+0x38>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e022      	b.n	8001fc4 <HAL_UART_Transmit_IT+0x7e>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2221      	movs	r2, #33	; 0x21
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fbc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d11d      	bne.n	8002024 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_UART_Receive_IT+0x26>
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e016      	b.n	8002026 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_UART_Receive_IT+0x38>
 8002002:	2302      	movs	r3, #2
 8002004:	e00f      	b.n	8002026 <HAL_UART_Receive_IT+0x58>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	461a      	mov	r2, r3
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa19 	bl	8002452 <UART_Start_Receive_IT>
 8002020:	4603      	mov	r3, r0
 8002022:	e000      	b.n	8002026 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_UART_IRQHandler+0x52>
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fac9 	bl	8002612 <UART_Receive_IT>
      return;
 8002080:	e17b      	b.n	800237a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80b1 	beq.w	80021ec <HAL_UART_IRQHandler+0x1bc>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_UART_IRQHandler+0x70>
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80a6 	beq.w	80021ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_UART_IRQHandler+0x90>
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_UART_IRQHandler+0xb0>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0202 	orr.w	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_UART_IRQHandler+0xd0>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0204 	orr.w	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_UART_IRQHandler+0xfa>
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_UART_IRQHandler+0xee>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0208 	orr.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 811e 	beq.w	8002370 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_UART_IRQHandler+0x11e>
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fa62 	bl	8002612 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_UART_IRQHandler+0x146>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d031      	beq.n	80021da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f9a4 	bl	80024c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d023      	beq.n	80021d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002198:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d013      	beq.n	80021ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4a76      	ldr	r2, [pc, #472]	; (8002380 <HAL_UART_IRQHandler+0x350>)
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd2a 	bl	8000c08 <HAL_DMA_Abort_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e00e      	b.n	80021e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8e3 	bl	8002396 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	e00a      	b.n	80021e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8df 	bl	8002396 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e006      	b.n	80021e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8db 	bl	8002396 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021e6:	e0c3      	b.n	8002370 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	bf00      	nop
    return;
 80021ea:	e0c1      	b.n	8002370 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 80a1 	bne.w	8002338 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 809b 	beq.w	8002338 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8095 	beq.w	8002338 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d04e      	beq.n	80022d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800223c:	8a3b      	ldrh	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8098 	beq.w	8002374 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002248:	8a3a      	ldrh	r2, [r7, #16]
 800224a:	429a      	cmp	r2, r3
 800224c:	f080 8092 	bcs.w	8002374 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8a3a      	ldrh	r2, [r7, #16]
 8002254:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b20      	cmp	r3, #32
 800225e:	d02b      	beq.n	80022b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800226e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0210 	bic.w	r2, r2, #16
 80022ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fc6d 	bl	8000b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f86d 	bl	80023a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80022ce:	e051      	b.n	8002374 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d047      	beq.n	8002378 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80022e8:	8a7b      	ldrh	r3, [r7, #18]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800232c:	8a7b      	ldrh	r3, [r7, #18]
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f839 	bl	80023a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002336:	e01f      	b.n	8002378 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_UART_IRQHandler+0x324>
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8f9 	bl	8002544 <UART_Transmit_IT>
    return;
 8002352:	e012      	b.n	800237a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_UART_IRQHandler+0x34a>
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f93a 	bl	80025e2 <UART_EndTransmit_IT>
    return;
 800236e:	e004      	b.n	800237a <HAL_UART_IRQHandler+0x34a>
    return;
 8002370:	bf00      	nop
 8002372:	e002      	b.n	800237a <HAL_UART_IRQHandler+0x34a>
      return;
 8002374:	bf00      	nop
 8002376:	e000      	b.n	800237a <HAL_UART_IRQHandler+0x34a>
      return;
 8002378:	bf00      	nop
  }
}
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	0800251d 	.word	0x0800251d

08002384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4613      	mov	r3, r2
 80023cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ce:	e02c      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d6:	d028      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0x30>
 80023de:	f7fe faef 	bl	80009c0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d21d      	bcs.n	800242a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d0c3      	beq.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	4613      	mov	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2222      	movs	r2, #34	; 0x22
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff ff2d 	bl	8002396 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b21      	cmp	r3, #33	; 0x21
 8002556:	d13e      	bne.n	80025d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d114      	bne.n	800258c <UART_Transmit_IT+0x48>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d110      	bne.n	800258c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800257e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	621a      	str	r2, [r3, #32]
 800258a:	e008      	b.n	800259e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	1c59      	adds	r1, r3, #1
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6211      	str	r1, [r2, #32]
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4619      	mov	r1, r3
 80025ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff febe 	bl	8002384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b22      	cmp	r3, #34	; 0x22
 8002624:	f040 8099 	bne.w	800275a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d117      	bne.n	8002662 <UART_Receive_IT+0x50>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	b29a      	uxth	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	1c9a      	adds	r2, r3, #2
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
 8002660:	e026      	b.n	80026b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	d007      	beq.n	8002686 <UART_Receive_IT+0x74>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <UART_Receive_IT+0x82>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e008      	b.n	80026a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d148      	bne.n	8002756 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0220 	bic.w	r2, r2, #32
 80026d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b01      	cmp	r3, #1
 8002702:	d123      	bne.n	800274c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0210 	bic.w	r2, r2, #16
 8002718:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d10a      	bne.n	800273e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fe2f 	bl	80023a8 <HAL_UARTEx_RxEventCallback>
 800274a:	e002      	b.n	8002752 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fd fcff 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e002      	b.n	800275c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <UART_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff f830 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	e002      	b.n	80027da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7ff f818 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	0119      	lsls	r1, r3, #4
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <UART_SetConfig+0x118>)
 8002812:	fba3 0302 	umull	r0, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2064      	movs	r0, #100	; 0x64
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4419      	add	r1, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	440a      	add	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40013800 	.word	0x40013800
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002886:	f3ef 8305 	mrs	r3, IPSR
 800288a:	60bb      	str	r3, [r7, #8]
  return(result);
 800288c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	607b      	str	r3, [r7, #4]
  return(result);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <osKernelInitialize+0x32>
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <osKernelInitialize+0x60>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d109      	bne.n	80028ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028a6:	f3ef 8311 	mrs	r3, BASEPRI
 80028aa:	603b      	str	r3, [r7, #0]
  return(result);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80028b2:	f06f 0305 	mvn.w	r3, #5
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e00c      	b.n	80028d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <osKernelInitialize+0x60>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <osKernelInitialize+0x60>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e002      	b.n	80028d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	2000016c 	.word	0x2000016c

080028e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ea:	f3ef 8305 	mrs	r3, IPSR
 80028ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80028f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f6:	f3ef 8310 	mrs	r3, PRIMASK
 80028fa:	607b      	str	r3, [r7, #4]
  return(result);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <osKernelStart+0x32>
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <osKernelStart+0x64>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d109      	bne.n	800291e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800290a:	f3ef 8311 	mrs	r3, BASEPRI
 800290e:	603b      	str	r3, [r7, #0]
  return(result);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002916:	f06f 0305 	mvn.w	r3, #5
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e00e      	b.n	800293c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <osKernelStart+0x64>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <osKernelStart+0x64>)
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800292c:	f001 f954 	bl	8003bd8 <vTaskStartScheduler>
      stat = osOK;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e002      	b.n	800293c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000016c 	.word	0x2000016c

0800294c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af04      	add	r7, sp, #16
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800295c:	f3ef 8305 	mrs	r3, IPSR
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 8094 	bne.w	8002a92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296a:	f3ef 8310 	mrs	r3, PRIMASK
 800296e:	623b      	str	r3, [r7, #32]
  return(result);
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 808d 	bne.w	8002a92 <osThreadNew+0x146>
 8002978:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <osThreadNew+0x150>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d106      	bne.n	800298e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002980:	f3ef 8311 	mrs	r3, BASEPRI
 8002984:	61fb      	str	r3, [r7, #28]
  return(result);
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 8082 	bne.w	8002a92 <osThreadNew+0x146>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07e      	beq.n	8002a92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002998:	2318      	movs	r3, #24
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800299c:	2300      	movs	r3, #0
 800299e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80029a0:	f107 031b 	add.w	r3, r7, #27
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d045      	beq.n	8002a3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <osThreadNew+0x74>
        name = attr->name;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <osThreadNew+0x9a>
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	2b38      	cmp	r3, #56	; 0x38
 80029d8:	d805      	bhi.n	80029e6 <osThreadNew+0x9a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <osThreadNew+0x9e>
        return (NULL);
 80029e6:	2300      	movs	r3, #0
 80029e8:	e054      	b.n	8002a94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <osThreadNew+0xd4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2bbb      	cmp	r3, #187	; 0xbb
 8002a08:	d90a      	bls.n	8002a20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <osThreadNew+0xd4>
        mem = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1e:	e010      	b.n	8002a42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10c      	bne.n	8002a42 <osThreadNew+0xf6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <osThreadNew+0xf6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <osThreadNew+0xf6>
          mem = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3c:	e001      	b.n	8002a42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d110      	bne.n	8002a6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a50:	9202      	str	r2, [sp, #8]
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fed6 	bl	8003810 <xTaskCreateStatic>
 8002a64:	4603      	mov	r3, r0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e013      	b.n	8002a92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d110      	bne.n	8002a92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 ff20 	bl	80038c8 <xTaskCreate>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <osThreadNew+0x146>
          hTask = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a92:	697b      	ldr	r3, [r7, #20]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3738      	adds	r7, #56	; 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000016c 	.word	0x2000016c

08002aa0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa8:	f3ef 8305 	mrs	r3, IPSR
 8002aac:	613b      	str	r3, [r7, #16]
  return(result);
 8002aae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10f      	bne.n	8002ad4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <osDelay+0x34>
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <osDelay+0x58>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d109      	bne.n	8002adc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8002acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <osDelay+0x3c>
    stat = osErrorISR;
 8002ad4:	f06f 0305 	mvn.w	r3, #5
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e007      	b.n	8002aec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <osDelay+0x4c>
      vTaskDelay(ticks);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f001 f842 	bl	8003b70 <vTaskDelay>
    }
  }

  return (stat);
 8002aec:	697b      	ldr	r3, [r7, #20]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000016c 	.word	0x2000016c

08002afc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0c:	f3ef 8305 	mrs	r3, IPSR
 8002b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d16f      	bne.n	8002bf8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b18:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d169      	bne.n	8002bf8 <osMessageQueueNew+0xfc>
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <osMessageQueueNew+0x108>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d105      	bne.n	8002b38 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b30:	613b      	str	r3, [r7, #16]
  return(result);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d15f      	bne.n	8002bf8 <osMessageQueueNew+0xfc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05c      	beq.n	8002bf8 <osMessageQueueNew+0xfc>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d059      	beq.n	8002bf8 <osMessageQueueNew+0xfc>
    mem = -1;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d029      	beq.n	8002ba4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <osMessageQueueNew+0x82>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b4f      	cmp	r3, #79	; 0x4f
 8002b5e:	d90e      	bls.n	8002b7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <osMessageQueueNew+0x82>
        mem = 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	e014      	b.n	8002ba8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d110      	bne.n	8002ba8 <osMessageQueueNew+0xac>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <osMessageQueueNew+0xac>
          mem = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	e001      	b.n	8002ba8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10b      	bne.n	8002bc6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	9100      	str	r1, [sp, #0]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f96d 	bl	8002e9c <xQueueGenericCreateStatic>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8002bc4:	e008      	b.n	8002bd8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9da 	bl	8002f8a <xQueueGenericCreate>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <osMessageQueueNew+0xf0>
        name = attr->name;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e001      	b.n	8002bf0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002bf0:	69f9      	ldr	r1, [r7, #28]
 8002bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf4:	f000 fdb0 	bl	8003758 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3728      	adds	r7, #40	; 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000016c 	.word	0x2000016c

08002c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <vApplicationGetIdleTaskMemory+0x28>)
 8002c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000170 	.word	0x20000170
 8002c34:	2000022c 	.word	0x2000022c

08002c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <vApplicationGetTimerTaskMemory+0x30>)
 8002c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000042c 	.word	0x2000042c
 8002c68:	200004e8 	.word	0x200004e8

08002c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0208 	add.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 0208 	add.w	r2, r3, #8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0208 	add.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d103      	bne.n	8002d28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e00c      	b.n	8002d42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e002      	b.n	8002d36 <vListInsert+0x2e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d2f6      	bcs.n	8002d30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6852      	ldr	r2, [r2, #4]
 8002d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d103      	bne.n	8002dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1e5a      	subs	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002df6:	f002 f831 	bl	8004e5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	3b01      	subs	r3, #1
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d114      	bne.n	8002e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01a      	beq.n	8002e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3310      	adds	r3, #16
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f959 	bl	8004110 <xTaskRemoveFromEventList>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <xQueueGenericReset+0xcc>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	e009      	b.n	8002e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3310      	adds	r3, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fef6 	bl	8002c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3324      	adds	r3, #36	; 0x24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fef1 	bl	8002c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e8a:	f002 f817 	bl	8004ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10a      	bne.n	8002ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ede:	bf00      	nop
 8002ee0:	e7fe      	b.n	8002ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <xQueueGenericCreateStatic+0x52>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <xQueueGenericCreateStatic+0x56>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <xQueueGenericCreateStatic+0x58>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	623b      	str	r3, [r7, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <xQueueGenericCreateStatic+0x7e>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <xQueueGenericCreateStatic+0x82>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <xQueueGenericCreateStatic+0x84>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61fb      	str	r3, [r7, #28]
}
 8002f36:	bf00      	nop
 8002f38:	e7fe      	b.n	8002f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f3a:	2350      	movs	r3, #80	; 0x50
 8002f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b50      	cmp	r3, #80	; 0x50
 8002f42:	d00a      	beq.n	8002f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61bb      	str	r3, [r7, #24]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f843 	bl	8003006 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3730      	adds	r7, #48	; 0x30
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b08a      	sub	sp, #40	; 0x28
 8002f8e:	af02      	add	r7, sp, #8
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	613b      	str	r3, [r7, #16]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e004      	b.n	8002fca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3350      	adds	r3, #80	; 0x50
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 f844 	bl	800505c <pvPortMalloc>
 8002fd4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00f      	beq.n	8002ffc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	3350      	adds	r3, #80	; 0x50
 8002fe0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f805 	bl	8003006 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e002      	b.n	8003028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003034:	2101      	movs	r1, #1
 8003036:	69b8      	ldr	r0, [r7, #24]
 8003038:	f7ff fec8 	bl	8002dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08e      	sub	sp, #56	; 0x38
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800305a:	2300      	movs	r3, #0
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericSend+0x32>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <xQueueGenericSend+0x40>
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <xQueueGenericSend+0x44>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <xQueueGenericSend+0x46>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <xQueueGenericSend+0x60>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d103      	bne.n	80030ba <xQueueGenericSend+0x6e>
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <xQueueGenericSend+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericSend+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueGenericSend+0x8e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	623b      	str	r3, [r7, #32]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030da:	f001 f9df 	bl	800449c <xTaskGetSchedulerState>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <xQueueGenericSend+0x9e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueGenericSend+0xa2>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueGenericSend+0xa4>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueGenericSend+0xbe>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61fb      	str	r3, [r7, #28]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800310a:	f001 fea7 	bl	8004e5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <xQueueGenericSend+0xd4>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d129      	bne.n	8003174 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003126:	f000 fa07 	bl	8003538 <prvCopyDataToQueue>
 800312a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	4618      	mov	r0, r3
 800313a:	f000 ffe9 	bl	8004110 <xTaskRemoveFromEventList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003144:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <xQueueGenericSend+0x1f8>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	e00a      	b.n	800316c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <xQueueGenericSend+0x1f8>)
 800315e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800316c:	f001 fea6 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 8003170:	2301      	movs	r3, #1
 8003172:	e063      	b.n	800323c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800317a:	f001 fe9f 	bl	8004ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800317e:	2300      	movs	r3, #0
 8003180:	e05c      	b.n	800323c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4618      	mov	r0, r3
 800318e:	f001 f823 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003192:	2301      	movs	r3, #1
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003196:	f001 fe91 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800319a:	f000 fd8d 	bl	8003cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800319e:	f001 fe5d 	bl	8004e5c <vPortEnterCritical>
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ae:	d103      	bne.n	80031b8 <xQueueGenericSend+0x16c>
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c4:	d103      	bne.n	80031ce <xQueueGenericSend+0x182>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ce:	f001 fe75 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031d2:	1d3a      	adds	r2, r7, #4
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f812 	bl	8004204 <xTaskCheckForTimeOut>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d124      	bne.n	8003230 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e8:	f000 fa9e 	bl	8003728 <prvIsQueueFull>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	3310      	adds	r3, #16
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 ff38 	bl	8004070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003202:	f000 fa29 	bl	8003658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003206:	f000 fd65 	bl	8003cd4 <xTaskResumeAll>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f47f af7c 	bne.w	800310a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <xQueueGenericSend+0x1f8>)
 8003214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	e772      	b.n	800310a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003226:	f000 fa17 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800322a:	f000 fd53 	bl	8003cd4 <xTaskResumeAll>
 800322e:	e76c      	b.n	800310a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003232:	f000 fa11 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003236:	f000 fd4d 	bl	8003cd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800323a:	2300      	movs	r3, #0
		}
	}
}
 800323c:	4618      	mov	r0, r3
 800323e:	3738      	adds	r7, #56	; 0x38
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <xQueueGenericSendFromISR+0x3c>
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueGenericSendFromISR+0x40>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueGenericSendFromISR+0x42>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	623b      	str	r3, [r7, #32]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d103      	bne.n	80032b2 <xQueueGenericSendFromISR+0x6a>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <xQueueGenericSendFromISR+0x6e>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueGenericSendFromISR+0x70>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	61fb      	str	r3, [r7, #28]
}
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032d2:	f001 fe85 	bl	8004fe0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032d6:	f3ef 8211 	mrs	r2, BASEPRI
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	61ba      	str	r2, [r7, #24]
 80032ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <xQueueGenericSendFromISR+0xbc>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d12c      	bne.n	800335e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003314:	f000 f910 	bl	8003538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003318:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003320:	d112      	bne.n	8003348 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	4618      	mov	r0, r3
 8003330:	f000 feee 	bl	8004110 <xTaskRemoveFromEventList>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00e      	beq.n	8003358 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e007      	b.n	8003358 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003348:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800334c:	3301      	adds	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	b25a      	sxtb	r2, r3
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003358:	2301      	movs	r3, #1
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800335c:	e001      	b.n	8003362 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800336c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003370:	4618      	mov	r0, r3
 8003372:	3738      	adds	r7, #56	; 0x38
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <xQueueReceive+0x30>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	623b      	str	r3, [r7, #32]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <xQueueReceive+0x3e>
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xQueueReceive+0x42>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueReceive+0x44>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueReceive+0x5e>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fb      	str	r3, [r7, #28]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d6:	f001 f861 	bl	800449c <xTaskGetSchedulerState>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <xQueueReceive+0x6e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xQueueReceive+0x72>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueReceive+0x74>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueReceive+0x8e>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	61bb      	str	r3, [r7, #24]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003406:	f001 fd29 	bl	8004e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01f      	beq.n	8003456 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341a:	f000 f8f7 	bl	800360c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00f      	beq.n	800344e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fe6c 	bl	8004110 <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <xQueueReceive+0x1bc>)
 8003440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800344e:	f001 fd35 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 8003452:	2301      	movs	r3, #1
 8003454:	e069      	b.n	800352a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800345c:	f001 fd2e 	bl	8004ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003460:	2300      	movs	r3, #0
 8003462:	e062      	b.n	800352a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800346a:	f107 0310 	add.w	r3, r7, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f000 feb2 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003478:	f001 fd20 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800347c:	f000 fc1c 	bl	8003cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003480:	f001 fcec 	bl	8004e5c <vPortEnterCritical>
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003490:	d103      	bne.n	800349a <xQueueReceive+0x122>
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d103      	bne.n	80034b0 <xQueueReceive+0x138>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b0:	f001 fd04 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b4:	1d3a      	adds	r2, r7, #4
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fea1 	bl	8004204 <xTaskCheckForTimeOut>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d123      	bne.n	8003510 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ca:	f000 f917 	bl	80036fc <prvIsQueueEmpty>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fdc7 	bl	8004070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e4:	f000 f8b8 	bl	8003658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e8:	f000 fbf4 	bl	8003cd4 <xTaskResumeAll>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d189      	bne.n	8003406 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <xQueueReceive+0x1bc>)
 80034f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	e780      	b.n	8003406 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003506:	f000 f8a7 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800350a:	f000 fbe3 	bl	8003cd4 <xTaskResumeAll>
 800350e:	e77a      	b.n	8003406 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003512:	f000 f8a1 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003516:	f000 fbdd 	bl	8003cd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800351a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351c:	f000 f8ee 	bl	80036fc <prvIsQueueEmpty>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	f43f af6f 	beq.w	8003406 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003528:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d14d      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 ffb8 	bl	80044d8 <xTaskPriorityDisinherit>
 8003568:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	e043      	b.n	80035fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d119      	bne.n	80035ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6898      	ldr	r0, [r3, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	461a      	mov	r2, r3
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	f001 ff68 	bl	8005458 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d32b      	bcc.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	e026      	b.n	80035fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68d8      	ldr	r0, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	461a      	mov	r2, r3
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	f001 ff4e 	bl	8005458 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	425b      	negs	r3, r3
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d207      	bcs.n	80035e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	425b      	negs	r3, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d105      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003602:	697b      	ldr	r3, [r7, #20]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d303      	bcc.n	8003640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68d9      	ldr	r1, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	461a      	mov	r2, r3
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f001 ff04 	bl	8005458 <memcpy>
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003660:	f001 fbfc 	bl	8004e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800366a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800366c:	e011      	b.n	8003692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3324      	adds	r3, #36	; 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd48 	bl	8004110 <xTaskRemoveFromEventList>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003686:	f000 fe1f 	bl	80042c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3b01      	subs	r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dce9      	bgt.n	800366e <prvUnlockQueue+0x16>
 800369a:	e000      	b.n	800369e <prvUnlockQueue+0x46>
					break;
 800369c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fc09 	bl	8004ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036aa:	f001 fbd7 	bl	8004e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036b6:	e011      	b.n	80036dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3310      	adds	r3, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd23 	bl	8004110 <xTaskRemoveFromEventList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036d0:	f000 fdfa 	bl	80042c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036d4:	7bbb      	ldrb	r3, [r7, #14]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	dce9      	bgt.n	80036b8 <prvUnlockQueue+0x60>
 80036e4:	e000      	b.n	80036e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	22ff      	movs	r2, #255	; 0xff
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036f0:	f001 fbe4 	bl	8004ebc <vPortExitCritical>
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003704:	f001 fbaa 	bl	8004e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e001      	b.n	800371a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800371a:	f001 fbcf 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003730:	f001 fb94 	bl	8004e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	429a      	cmp	r2, r3
 800373e:	d102      	bne.n	8003746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e001      	b.n	800374a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800374a:	f001 fbb7 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e014      	b.n	8003792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <vQueueAddToRegistry+0x4c>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003774:	490b      	ldr	r1, [pc, #44]	; (80037a4 <vQueueAddToRegistry+0x4c>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <vQueueAddToRegistry+0x4c>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800378a:	e006      	b.n	800379a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9e7      	bls.n	8003768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	200008e8 	.word	0x200008e8

080037a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037b8:	f001 fb50 	bl	8004e5c <vPortEnterCritical>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c8:	d103      	bne.n	80037d2 <vQueueWaitForMessageRestricted+0x2a>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037de:	d103      	bne.n	80037e8 <vQueueWaitForMessageRestricted+0x40>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e8:	f001 fb68 	bl	8004ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3324      	adds	r3, #36	; 0x24
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fc5b 	bl	80040b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff28 	bl	8003658 <prvUnlockQueue>
	}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	; 0x38
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	623b      	str	r3, [r7, #32]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xTaskCreateStatic+0x46>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	61fb      	str	r3, [r7, #28]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003856:	23bc      	movs	r3, #188	; 0xbc
 8003858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2bbc      	cmp	r3, #188	; 0xbc
 800385e:	d00a      	beq.n	8003876 <xTaskCreateStatic+0x66>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	61bb      	str	r3, [r7, #24]
}
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01e      	beq.n	80038ba <xTaskCreateStatic+0xaa>
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01b      	beq.n	80038ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800388a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2202      	movs	r2, #2
 8003890:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003894:	2300      	movs	r3, #0
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	9302      	str	r3, [sp, #8]
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f851 	bl	8003954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038b4:	f000 f8ec 	bl	8003a90 <prvAddNewTaskToReadyList>
 80038b8:	e001      	b.n	80038be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038be:	697b      	ldr	r3, [r7, #20]
	}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fbbd 	bl	800505c <pvPortMalloc>
 80038e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038ea:	20bc      	movs	r0, #188	; 0xbc
 80038ec:	f001 fbb6 	bl	800505c <pvPortMalloc>
 80038f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
 80038fe:	e005      	b.n	800390c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f001 fc6f 	bl	80051e4 <vPortFree>
 8003906:	e001      	b.n	800390c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	2300      	movs	r3, #0
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9302      	str	r3, [sp, #8]
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f80f 	bl	8003954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003936:	69f8      	ldr	r0, [r7, #28]
 8003938:	f000 f8aa 	bl	8003a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800393c:	2301      	movs	r3, #1
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e002      	b.n	8003948 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003946:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003948:	69bb      	ldr	r3, [r7, #24]
	}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	461a      	mov	r2, r3
 800396c:	21a5      	movs	r1, #165	; 0xa5
 800396e:	f001 fd81 	bl	8005474 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800397c:	3b01      	subs	r3, #1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f023 0307 	bic.w	r3, r3, #7
 800398a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	617b      	str	r3, [r7, #20]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e012      	b.n	80039d8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	7819      	ldrb	r1, [r3, #0]
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	3334      	adds	r3, #52	; 0x34
 80039c2:	460a      	mov	r2, r1
 80039c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d9e9      	bls.n	80039b2 <prvInitialiseNewTask+0x5e>
 80039de:	e000      	b.n	80039e2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80039e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b37      	cmp	r3, #55	; 0x37
 80039ee:	d901      	bls.n	80039f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f0:	2337      	movs	r3, #55	; 0x37
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f94d 	bl	8002caa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f948 	bl	8002caa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	3354      	adds	r3, #84	; 0x54
 8003a44:	2260      	movs	r2, #96	; 0x60
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fd13 	bl	8005474 <memset>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <prvInitialiseNewTask+0x130>)
 8003a52:	659a      	str	r2, [r3, #88]	; 0x58
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <prvInitialiseNewTask+0x134>)
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <prvInitialiseNewTask+0x138>)
 8003a5e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	69b8      	ldr	r0, [r7, #24]
 8003a66:	f001 f90b 	bl	8004c80 <pxPortInitialiseStack>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	0800582c 	.word	0x0800582c
 8003a88:	0800584c 	.word	0x0800584c
 8003a8c:	0800580c 	.word	0x0800580c

08003a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a98:	f001 f9e0 	bl	8004e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d110      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003abc:	f000 fc28 	bl	8004310 <prvInitialiseTaskLists>
 8003ac0:	e00d      	b.n	8003ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <prvAddNewTaskToReadyList+0xcc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d802      	bhi.n	8003ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003ae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <prvAddNewTaskToReadyList+0xd4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d903      	bls.n	8003b04 <prvAddNewTaskToReadyList+0x74>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <prvAddNewTaskToReadyList+0xd4>)
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <prvAddNewTaskToReadyList+0xd8>)
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7ff f8d1 	bl	8002cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b20:	f001 f9cc 	bl	8004ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <prvAddNewTaskToReadyList+0xcc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d207      	bcs.n	8003b4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <prvAddNewTaskToReadyList+0xdc>)
 8003b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000dfc 	.word	0x20000dfc
 8003b58:	20000928 	.word	0x20000928
 8003b5c:	20000e08 	.word	0x20000e08
 8003b60:	20000e18 	.word	0x20000e18
 8003b64:	20000e04 	.word	0x20000e04
 8003b68:	2000092c 	.word	0x2000092c
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d017      	beq.n	8003bb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <vTaskDelay+0x60>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <vTaskDelay+0x30>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ba0:	f000 f88a 	bl	8003cb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fd04 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bac:	f000 f892 	bl	8003cd4 <xTaskResumeAll>
 8003bb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <vTaskDelay+0x64>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000e24 	.word	0x20000e24
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003be6:	463a      	mov	r2, r7
 8003be8:	1d39      	adds	r1, r7, #4
 8003bea:	f107 0308 	add.w	r3, r7, #8
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f80a 	bl	8002c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	9202      	str	r2, [sp, #8]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	460a      	mov	r2, r1
 8003c06:	4924      	ldr	r1, [pc, #144]	; (8003c98 <vTaskStartScheduler+0xc0>)
 8003c08:	4824      	ldr	r0, [pc, #144]	; (8003c9c <vTaskStartScheduler+0xc4>)
 8003c0a:	f7ff fe01 	bl	8003810 <xTaskCreateStatic>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <vTaskStartScheduler+0xc8>)
 8003c12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <vTaskStartScheduler+0xc8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e001      	b.n	8003c26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c2c:	f000 fd16 	bl	800465c <xTimerCreateTimerTask>
 8003c30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d11b      	bne.n	8003c70 <vTaskStartScheduler+0x98>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	613b      	str	r3, [r7, #16]
}
 8003c4a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <vTaskStartScheduler+0xcc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3354      	adds	r3, #84	; 0x54
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <vTaskStartScheduler+0xd0>)
 8003c54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <vTaskStartScheduler+0xd4>)
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <vTaskStartScheduler+0xd8>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <vTaskStartScheduler+0xdc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c6a:	f001 f885 	bl	8004d78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c6e:	e00e      	b.n	8003c8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c76:	d10a      	bne.n	8003c8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	60fb      	str	r3, [r7, #12]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <vTaskStartScheduler+0xb4>
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	08005734 	.word	0x08005734
 8003c9c:	080042e1 	.word	0x080042e1
 8003ca0:	20000e20 	.word	0x20000e20
 8003ca4:	20000928 	.word	0x20000928
 8003ca8:	20000010 	.word	0x20000010
 8003cac:	20000e1c 	.word	0x20000e1c
 8003cb0:	20000e08 	.word	0x20000e08
 8003cb4:	20000e00 	.word	0x20000e00

08003cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <vTaskSuspendAll+0x18>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	4a03      	ldr	r2, [pc, #12]	; (8003cd0 <vTaskSuspendAll+0x18>)
 8003cc4:	6013      	str	r3, [r2, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000e24 	.word	0x20000e24

08003cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ce2:	4b42      	ldr	r3, [pc, #264]	; (8003dec <xTaskResumeAll+0x118>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	603b      	str	r3, [r7, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d00:	f001 f8ac 	bl	8004e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d04:	4b39      	ldr	r3, [pc, #228]	; (8003dec <xTaskResumeAll+0x118>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	4a38      	ldr	r2, [pc, #224]	; (8003dec <xTaskResumeAll+0x118>)
 8003d0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <xTaskResumeAll+0x118>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d162      	bne.n	8003ddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d16:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <xTaskResumeAll+0x11c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d05e      	beq.n	8003ddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d1e:	e02f      	b.n	8003d80 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <xTaskResumeAll+0x120>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f823 	bl	8002d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f81e 	bl	8002d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <xTaskResumeAll+0x124>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d903      	bls.n	8003d50 <xTaskResumeAll+0x7c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	; (8003df8 <xTaskResumeAll+0x124>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <xTaskResumeAll+0x128>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe ffab 	bl	8002cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <xTaskResumeAll+0x12c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d302      	bcc.n	8003d80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d7a:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <xTaskResumeAll+0x130>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <xTaskResumeAll+0x120>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1cb      	bne.n	8003d20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d8e:	f000 fb61 	bl	8004454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <xTaskResumeAll+0x134>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d9e:	f000 f845 	bl	8003e2c <xTaskIncrementTick>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <xTaskResumeAll+0x130>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f1      	bne.n	8003d9e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <xTaskResumeAll+0x134>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <xTaskResumeAll+0x130>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <xTaskResumeAll+0x138>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ddc:	f001 f86e 	bl	8004ebc <vPortExitCritical>

	return xAlreadyYielded;
 8003de0:	68bb      	ldr	r3, [r7, #8]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000e24 	.word	0x20000e24
 8003df0:	20000dfc 	.word	0x20000dfc
 8003df4:	20000dbc 	.word	0x20000dbc
 8003df8:	20000e04 	.word	0x20000e04
 8003dfc:	2000092c 	.word	0x2000092c
 8003e00:	20000928 	.word	0x20000928
 8003e04:	20000e10 	.word	0x20000e10
 8003e08:	20000e0c 	.word	0x20000e0c
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <xTaskGetTickCount+0x18>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e1c:	687b      	ldr	r3, [r7, #4]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	20000e00 	.word	0x20000e00

08003e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 808e 	bne.w	8003f5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e40:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <xTaskIncrementTick+0x154>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e48:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <xTaskIncrementTick+0x154>)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d120      	bne.n	8003e96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	603b      	str	r3, [r7, #0]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <xTaskIncrementTick+0x46>
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <xTaskIncrementTick+0x15c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4a41      	ldr	r2, [pc, #260]	; (8003f88 <xTaskIncrementTick+0x15c>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <xTaskIncrementTick+0x160>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <xTaskIncrementTick+0x160>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	f000 fadf 	bl	8004454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <xTaskIncrementTick+0x164>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d34e      	bcc.n	8003f3e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <xTaskIncrementTick+0x82>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <xTaskIncrementTick+0x84>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <xTaskIncrementTick+0x164>)
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eba:	601a      	str	r2, [r3, #0]
					break;
 8003ebc:	e03f      	b.n	8003f3e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d203      	bcs.n	8003ede <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ed6:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <xTaskIncrementTick+0x164>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
						break;
 8003edc:	e02f      	b.n	8003f3e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe ff48 	bl	8002d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	3318      	adds	r3, #24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe ff3f 	bl	8002d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <xTaskIncrementTick+0x168>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d903      	bls.n	8003f0e <xTaskIncrementTick+0xe2>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <xTaskIncrementTick+0x168>)
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <xTaskIncrementTick+0x16c>)
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fecc 	bl	8002cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <xTaskIncrementTick+0x170>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3b3      	bcc.n	8003ea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f3c:	e7b0      	b.n	8003ea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <xTaskIncrementTick+0x170>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4914      	ldr	r1, [pc, #80]	; (8003f98 <xTaskIncrementTick+0x16c>)
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d907      	bls.n	8003f66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e004      	b.n	8003f66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <xTaskIncrementTick+0x174>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <xTaskIncrementTick+0x174>)
 8003f64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <xTaskIncrementTick+0x178>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f72:	697b      	ldr	r3, [r7, #20]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000e24 	.word	0x20000e24
 8003f80:	20000e00 	.word	0x20000e00
 8003f84:	20000db4 	.word	0x20000db4
 8003f88:	20000db8 	.word	0x20000db8
 8003f8c:	20000e14 	.word	0x20000e14
 8003f90:	20000e1c 	.word	0x20000e1c
 8003f94:	20000e04 	.word	0x20000e04
 8003f98:	2000092c 	.word	0x2000092c
 8003f9c:	20000928 	.word	0x20000928
 8003fa0:	20000e0c 	.word	0x20000e0c
 8003fa4:	20000e10 	.word	0x20000e10

08003fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <vTaskSwitchContext+0xb0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <vTaskSwitchContext+0xb4>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fbc:	e046      	b.n	800404c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003fbe:	4b27      	ldr	r3, [pc, #156]	; (800405c <vTaskSwitchContext+0xb4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003fc4:	4b26      	ldr	r3, [pc, #152]	; (8004060 <vTaskSwitchContext+0xb8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e010      	b.n	8003fee <vTaskSwitchContext+0x46>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vTaskSwitchContext+0x3e>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	491d      	ldr	r1, [pc, #116]	; (8004064 <vTaskSwitchContext+0xbc>)
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0e4      	beq.n	8003fcc <vTaskSwitchContext+0x24>
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <vTaskSwitchContext+0xbc>)
 800400e:	4413      	add	r3, r2
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3308      	adds	r3, #8
 8004024:	429a      	cmp	r2, r3
 8004026:	d104      	bne.n	8004032 <vTaskSwitchContext+0x8a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <vTaskSwitchContext+0xc0>)
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <vTaskSwitchContext+0xb8>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <vTaskSwitchContext+0xc0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3354      	adds	r3, #84	; 0x54
 8004048:	4a08      	ldr	r2, [pc, #32]	; (800406c <vTaskSwitchContext+0xc4>)
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000e24 	.word	0x20000e24
 800405c:	20000e10 	.word	0x20000e10
 8004060:	20000e04 	.word	0x20000e04
 8004064:	2000092c 	.word	0x2000092c
 8004068:	20000928 	.word	0x20000928
 800406c:	20000010 	.word	0x20000010

08004070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <vTaskPlaceOnEventList+0x44>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3318      	adds	r3, #24
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fe32 	bl	8002d08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a4:	2101      	movs	r1, #1
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f000 fa84 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000928 	.word	0x20000928

080040b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <vTaskPlaceOnEventListRestricted+0x54>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fe fdea 	bl	8002cc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f000 fa59 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
	}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000928 	.word	0x20000928

08004110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3318      	adds	r3, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fe19 	bl	8002d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <xTaskRemoveFromEventList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fe10 	bl	8002d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <xTaskRemoveFromEventList+0x5c>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <xTaskRemoveFromEventList+0xb8>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fd9d 	bl	8002cc2 <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <xTaskRemoveFromEventList+0xbc>)
 8004192:	f7fe fd96 	bl	8002cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTaskRemoveFromEventList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <xTaskRemoveFromEventList+0xc4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000e24 	.word	0x20000e24
 80041c4:	20000e04 	.word	0x20000e04
 80041c8:	2000092c 	.word	0x2000092c
 80041cc:	20000dbc 	.word	0x20000dbc
 80041d0:	20000928 	.word	0x20000928
 80041d4:	20000e10 	.word	0x20000e10

080041d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <vTaskInternalSetTimeOutState+0x24>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <vTaskInternalSetTimeOutState+0x28>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000e14 	.word	0x20000e14
 8004200:	20000e00 	.word	0x20000e00

08004204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004246:	f000 fe09 	bl	8004e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <xTaskCheckForTimeOut+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004262:	d102      	bne.n	800426a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e023      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <xTaskCheckForTimeOut+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d007      	beq.n	8004286 <xTaskCheckForTimeOut+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e015      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d20b      	bcs.n	80042a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff9b 	bl	80041d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e004      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f000 fe03 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 80042b6:	69fb      	ldr	r3, [r7, #28]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000e00 	.word	0x20000e00
 80042c4:	20000e14 	.word	0x20000e14

080042c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <vTaskMissedYield+0x14>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000e10 	.word	0x20000e10

080042e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e8:	f000 f852 	bl	8004390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <prvIdleTask+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d9f9      	bls.n	80042e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <prvIdleTask+0x2c>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004304:	e7f0      	b.n	80042e8 <prvIdleTask+0x8>
 8004306:	bf00      	nop
 8004308:	2000092c 	.word	0x2000092c
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e00c      	b.n	8004336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <prvInitialiseTaskLists+0x60>)
 8004328:	4413      	add	r3, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fc9e 	bl	8002c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b37      	cmp	r3, #55	; 0x37
 800433a:	d9ef      	bls.n	800431c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800433e:	f7fe fc95 	bl	8002c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004344:	f7fe fc92 	bl	8002c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <prvInitialiseTaskLists+0x6c>)
 800434a:	f7fe fc8f 	bl	8002c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x70>)
 8004350:	f7fe fc8c 	bl	8002c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <prvInitialiseTaskLists+0x74>)
 8004356:	f7fe fc89 	bl	8002c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x78>)
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvInitialiseTaskLists+0x7c>)
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2000092c 	.word	0x2000092c
 8004374:	20000d8c 	.word	0x20000d8c
 8004378:	20000da0 	.word	0x20000da0
 800437c:	20000dbc 	.word	0x20000dbc
 8004380:	20000dd0 	.word	0x20000dd0
 8004384:	20000de8 	.word	0x20000de8
 8004388:	20000db4 	.word	0x20000db4
 800438c:	20000db8 	.word	0x20000db8

08004390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004396:	e019      	b.n	80043cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004398:	f000 fd60 	bl	8004e5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fce5 	bl	8002d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c2:	f000 fd7b 	bl	8004ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f810 	bl	80043ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e1      	bne.n	8004398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000dd0 	.word	0x20000dd0
 80043e4:	20000dfc 	.word	0x20000dfc
 80043e8:	20000de4 	.word	0x20000de4

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3354      	adds	r3, #84	; 0x54
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f851 	bl	80054a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fee9 	bl	80051e4 <vPortFree>
				vPortFree( pxTCB );
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fee6 	bl	80051e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004418:	e018      	b.n	800444c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004420:	2b01      	cmp	r3, #1
 8004422:	d103      	bne.n	800442c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fedd 	bl	80051e4 <vPortFree>
	}
 800442a:	e00f      	b.n	800444c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004432:	2b02      	cmp	r3, #2
 8004434:	d00a      	beq.n	800444c <prvDeleteTCB+0x60>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <prvDeleteTCB+0x5e>
	}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <prvResetNextTaskUnblockTime+0x40>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <prvResetNextTaskUnblockTime+0x14>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <prvResetNextTaskUnblockTime+0x16>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvResetNextTaskUnblockTime+0x44>)
 8004470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004474:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004476:	e008      	b.n	800448a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <prvResetNextTaskUnblockTime+0x40>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <prvResetNextTaskUnblockTime+0x44>)
 8004488:	6013      	str	r3, [r2, #0]
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	20000db4 	.word	0x20000db4
 8004498:	20000e1c 	.word	0x20000e1c

0800449c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <xTaskGetSchedulerState+0x34>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044aa:	2301      	movs	r3, #1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e008      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <xTaskGetSchedulerState+0x38>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044b8:	2302      	movs	r3, #2
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	e001      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044c2:	687b      	ldr	r3, [r7, #4]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000e08 	.word	0x20000e08
 80044d4:	20000e24 	.word	0x20000e24

080044d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d056      	beq.n	800459c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <xTaskPriorityDisinherit+0xd0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d00a      	beq.n	800450e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60bb      	str	r3, [r7, #8]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	429a      	cmp	r2, r3
 8004540:	d02c      	beq.n	800459c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	d128      	bne.n	800459c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fc12 	bl	8002d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <xTaskPriorityDisinherit+0xd4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <xTaskPriorityDisinherit+0xa4>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <xTaskPriorityDisinherit+0xd4>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <xTaskPriorityDisinherit+0xd8>)
 800458a:	441a      	add	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7fe fb95 	bl	8002cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000928 	.word	0x20000928
 80045ac:	20000e04 	.word	0x20000e04
 80045b0:	2000092c 	.word	0x2000092c

080045b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <prvAddCurrentTaskToDelayedList+0x90>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fbd4 	bl	8002d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d6:	d10a      	bne.n	80045ee <prvAddCurrentTaskToDelayedList+0x3a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4819      	ldr	r0, [pc, #100]	; (800464c <prvAddCurrentTaskToDelayedList+0x98>)
 80045e8:	f7fe fb6b 	bl	8002cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ec:	e026      	b.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	429a      	cmp	r2, r3
 8004604:	d209      	bcs.n	800461a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fe fb78 	bl	8002d08 <vListInsert>
}
 8004618:	e010      	b.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f7fe fb6e 	bl	8002d08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d202      	bcs.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000e00 	.word	0x20000e00
 8004648:	20000928 	.word	0x20000928
 800464c:	20000de8 	.word	0x20000de8
 8004650:	20000db8 	.word	0x20000db8
 8004654:	20000db4 	.word	0x20000db4
 8004658:	20000e1c 	.word	0x20000e1c

0800465c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004666:	f000 facb 	bl	8004c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <xTimerCreateTimerTask+0x80>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d021      	beq.n	80046b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800467a:	1d3a      	adds	r2, r7, #4
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fad7 	bl	8002c38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	9202      	str	r2, [sp, #8]
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	2302      	movs	r3, #2
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	460a      	mov	r2, r1
 800469c:	4910      	ldr	r1, [pc, #64]	; (80046e0 <xTimerCreateTimerTask+0x84>)
 800469e:	4811      	ldr	r0, [pc, #68]	; (80046e4 <xTimerCreateTimerTask+0x88>)
 80046a0:	f7ff f8b6 	bl	8003810 <xTaskCreateStatic>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <xTimerCreateTimerTask+0x8c>)
 80046a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xTimerCreateTimerTask+0x8c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	613b      	str	r3, [r7, #16]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046d2:	697b      	ldr	r3, [r7, #20]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000e58 	.word	0x20000e58
 80046e0:	0800573c 	.word	0x0800573c
 80046e4:	08004809 	.word	0x08004809
 80046e8:	20000e5c 	.word	0x20000e5c

080046ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	623b      	str	r3, [r7, #32]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <xTimerGenericCommand+0x98>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02a      	beq.n	8004778 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	dc18      	bgt.n	8004766 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004734:	f7ff feb2 	bl	800449c <xTaskGetSchedulerState>
 8004738:	4603      	mov	r3, r0
 800473a:	2b02      	cmp	r3, #2
 800473c:	d109      	bne.n	8004752 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <xTimerGenericCommand+0x98>)
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f107 0110 	add.w	r1, r7, #16
 8004746:	2300      	movs	r3, #0
 8004748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474a:	f7fe fc7f 	bl	800304c <xQueueGenericSend>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24
 8004750:	e012      	b.n	8004778 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <xTimerGenericCommand+0x98>)
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f107 0110 	add.w	r1, r7, #16
 800475a:	2300      	movs	r3, #0
 800475c:	2200      	movs	r2, #0
 800475e:	f7fe fc75 	bl	800304c <xQueueGenericSend>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24
 8004764:	e008      	b.n	8004778 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <xTimerGenericCommand+0x98>)
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f107 0110 	add.w	r1, r7, #16
 800476e:	2300      	movs	r3, #0
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	f7fe fd69 	bl	8003248 <xQueueGenericSendFromISR>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800477a:	4618      	mov	r0, r3
 800477c:	3728      	adds	r7, #40	; 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000e58 	.word	0x20000e58

08004788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <prvProcessExpiredTimer+0x7c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fae9 	bl	8002d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d122      	bne.n	80047f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	18d1      	adds	r1, r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	f000 f8c8 	bl	8004950 <prvInsertTimerInActiveList>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c6:	2300      	movs	r3, #0
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	2100      	movs	r1, #0
 80047d0:	6978      	ldr	r0, [r7, #20]
 80047d2:	f7ff ff8b 	bl	80046ec <xTimerGenericCommand>
 80047d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	6978      	ldr	r0, [r7, #20]
 80047fa:	4798      	blx	r3
}
 80047fc:	bf00      	nop
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000e50 	.word	0x20000e50

08004808 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f857 	bl	80048c8 <prvGetNextExpireTime>
 800481a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4619      	mov	r1, r3
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f803 	bl	800482c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004826:	f000 f8d5 	bl	80049d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800482a:	e7f1      	b.n	8004810 <prvTimerTask+0x8>

0800482c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004836:	f7ff fa3f 	bl	8003cb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f866 	bl	8004910 <prvSampleTimeNow>
 8004844:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d130      	bne.n	80048ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <prvProcessTimerOrBlockTask+0x3c>
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	429a      	cmp	r2, r3
 8004858:	d806      	bhi.n	8004868 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800485a:	f7ff fa3b 	bl	8003cd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff91 	bl	8004788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004866:	e024      	b.n	80048b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <prvProcessTimerOrBlockTask+0x90>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <prvProcessTimerOrBlockTask+0x94>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	f7fe ff8b 	bl	80037a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004892:	f7ff fa1f 	bl	8003cd4 <xTaskResumeAll>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <prvProcessTimerOrBlockTask+0x98>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
}
 80048ac:	e001      	b.n	80048b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ae:	f7ff fa11 	bl	8003cd4 <xTaskResumeAll>
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000e54 	.word	0x20000e54
 80048c0:	20000e58 	.word	0x20000e58
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <prvGetNextExpireTime+0x44>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <prvGetNextExpireTime+0x44>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e001      	b.n	80048fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000e50 	.word	0x20000e50

08004910 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004918:	f7ff fa7a 	bl	8003e10 <xTaskGetTickCount>
 800491c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <prvSampleTimeNow+0x3c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d205      	bcs.n	8004934 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004928:	f000 f908 	bl	8004b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e002      	b.n	800493a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800493a:	4a04      	ldr	r2, [pc, #16]	; (800494c <prvSampleTimeNow+0x3c>)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000e60 	.word	0x20000e60

08004950 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d812      	bhi.n	800499c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e01b      	b.n	80049c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <prvInsertTimerInActiveList+0x7c>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe f9b7 	bl	8002d08 <vListInsert>
 800499a:	e012      	b.n	80049c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d206      	bcs.n	80049b2 <prvInsertTimerInActiveList+0x62>
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e007      	b.n	80049c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <prvInsertTimerInActiveList+0x80>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fe f9a3 	bl	8002d08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049c2:	697b      	ldr	r3, [r7, #20]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000e54 	.word	0x20000e54
 80049d0:	20000e50 	.word	0x20000e50

080049d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	; 0x38
 80049d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049da:	e09d      	b.n	8004b18 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da18      	bge.n	8004a14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	3304      	adds	r3, #4
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	61fb      	str	r3, [r7, #28]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0a:	6850      	ldr	r0, [r2, #4]
 8004a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0e:	6892      	ldr	r2, [r2, #8]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db7d      	blt.n	8004b16 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	3304      	adds	r3, #4
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe f9a4 	bl	8002d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a30:	463b      	mov	r3, r7
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff6c 	bl	8004910 <prvSampleTimeNow>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d86b      	bhi.n	8004b18 <prvProcessReceivedCommands+0x144>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <prvProcessReceivedCommands+0x74>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004b19 	.word	0x08004b19
 8004a58:	08004acd 	.word	0x08004acd
 8004a5c:	08004b05 	.word	0x08004b05
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a71 	.word	0x08004a71
 8004a68:	08004b19 	.word	0x08004b19
 8004a6c:	08004acd 	.word	0x08004acd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	18d1      	adds	r1, r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7e:	f7ff ff67 	bl	8004950 <prvInsertTimerInActiveList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d047      	beq.n	8004b18 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d13f      	bne.n	8004b18 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f7ff fe1f 	bl	80046ec <xTimerGenericCommand>
 8004aae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d130      	bne.n	8004b18 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	61bb      	str	r3, [r7, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	617b      	str	r3, [r7, #20]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	18d1      	adds	r1, r2, r3
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afe:	f7ff ff27 	bl	8004950 <prvInsertTimerInActiveList>
					break;
 8004b02:	e009      	b.n	8004b18 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b10:	f000 fb68 	bl	80051e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b14:	e000      	b.n	8004b18 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <prvProcessReceivedCommands+0x164>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	1d39      	adds	r1, r7, #4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe fc29 	bl	8003378 <xQueueReceive>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f af57 	bne.w	80049dc <prvProcessReceivedCommands+0x8>
	}
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	3730      	adds	r7, #48	; 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000e58 	.word	0x20000e58

08004b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b42:	e045      	b.n	8004bd0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b44:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe f90b 	bl	8002d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d12e      	bne.n	8004bd0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d90e      	bls.n	8004ba2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe f8b4 	bl	8002d08 <vListInsert>
 8004ba0:	e016      	b.n	8004bd0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	2100      	movs	r1, #0
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fd9d 	bl	80046ec <xTimerGenericCommand>
 8004bb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1b4      	bne.n	8004b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <prvSwitchTimerLists+0xc0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvSwitchTimerLists+0xbc>)
 8004be6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <prvSwitchTimerLists+0xc0>)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6013      	str	r3, [r2, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000e50 	.word	0x20000e50
 8004bfc:	20000e54 	.word	0x20000e54

08004c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c06:	f000 f929 	bl	8004e5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d120      	bne.n	8004c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c12:	4814      	ldr	r0, [pc, #80]	; (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c14:	f7fe f82a 	bl	8002c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c18:	4813      	ldr	r0, [pc, #76]	; (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c1a:	f7fe f827 	bl	8002c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <prvCheckForValidListAndQueue+0x6c>)
 8004c20:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <prvCheckForValidListAndQueue+0x70>)
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <prvCheckForValidListAndQueue+0x74>)
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <prvCheckForValidListAndQueue+0x78>)
 8004c32:	2110      	movs	r1, #16
 8004c34:	200a      	movs	r0, #10
 8004c36:	f7fe f931 	bl	8002e9c <xQueueGenericCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	490b      	ldr	r1, [pc, #44]	; (8004c7c <prvCheckForValidListAndQueue+0x7c>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fd82 	bl	8003758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c54:	f000 f932 	bl	8004ebc <vPortExitCritical>
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000e58 	.word	0x20000e58
 8004c64:	20000e28 	.word	0x20000e28
 8004c68:	20000e3c 	.word	0x20000e3c
 8004c6c:	20000e50 	.word	0x20000e50
 8004c70:	20000e54 	.word	0x20000e54
 8004c74:	20000f04 	.word	0x20000f04
 8004c78:	20000e64 	.word	0x20000e64
 8004c7c:	08005744 	.word	0x08005744

08004c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b04      	subs	r3, #4
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cb0:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <pxPortInitialiseStack+0x54>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b14      	subs	r3, #20
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3b20      	subs	r3, #32
 8004cc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	08004cd9 	.word	0x08004cd9

08004cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <prvTaskExitError+0x54>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cea:	d00a      	beq.n	8004d02 <prvTaskExitError+0x2a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvTaskExitError+0x28>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d16:	bf00      	nop
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0fc      	beq.n	8004d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d4e:	4770      	bx	lr

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d58:	4806      	ldr	r0, [pc, #24]	; (8004d74 <prvPortStartFirstTask+0x1c>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	b662      	cpsie	i
 8004d64:	b661      	cpsie	f
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	df00      	svc	0
 8004d70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d72:	bf00      	nop
 8004d74:	e000ed08 	.word	0xe000ed08

08004d78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d7e:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <xPortStartScheduler+0xd0>)
 8004d80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <xPortStartScheduler+0xd4>)
 8004da4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004da8:	2207      	movs	r2, #7
 8004daa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dac:	e009      	b.n	8004dc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dae:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004db6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d0ef      	beq.n	8004dae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1c3 0307 	rsb	r3, r3, #7
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d00a      	beq.n	8004df0 <xPortStartScheduler+0x78>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60bb      	str	r3, [r7, #8]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004df0:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004df8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004e04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e26:	f000 f8b9 	bl	8004f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <xPortStartScheduler+0xe0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e30:	f7ff ff92 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e34:	f7ff f8b8 	bl	8003fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8004e38:	f7ff ff4e 	bl	8004cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	e000e400 	.word	0xe000e400
 8004e4c:	20000f54 	.word	0x20000f54
 8004e50:	20000f58 	.word	0x20000f58
 8004e54:	e000ed20 	.word	0xe000ed20
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
}
 8004e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10f      	bne.n	8004ea8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <vPortEnterCritical+0x5c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	603b      	str	r3, [r7, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortEnterCritical+0x4a>
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <vPortExitCritical+0x24>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ee8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <vPortExitCritical+0x4c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <vPortExitCritical+0x42>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
}
 8004efc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	00000000 	.word	0x00000000

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f2a:	f380 8811 	msr	BASEPRI, r0
 8004f2e:	f7ff f83b 	bl	8003fa8 <vTaskSwitchContext>
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f46:	f380 8809 	msr	PSP, r0
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	4770      	bx	lr

08004f50 <pxCurrentTCBConst>:
 8004f50:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f72:	f7fe ff5b 	bl	8003e2c <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <SysTick_Handler+0x40>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
}
 8004f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <vPortSetupTimerInterrupt+0x30>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <vPortSetupTimerInterrupt+0x34>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <vPortSetupTimerInterrupt+0x38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <vPortSetupTimerInterrupt+0x3c>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <vPortSetupTimerInterrupt+0x40>)
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fbe:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <vPortSetupTimerInterrupt+0x30>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e000e010 	.word	0xe000e010
 8004fd0:	e000e018 	.word	0xe000e018
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	10624dd3 	.word	0x10624dd3
 8004fdc:	e000e014 	.word	0xe000e014

08004fe0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fe6:	f3ef 8305 	mrs	r3, IPSR
 8004fea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d914      	bls.n	800501c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <vPortValidateInterruptPriority+0x6c>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <vPortValidateInterruptPriority+0x70>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	7afa      	ldrb	r2, [r7, #11]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20a      	bcs.n	800501c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	607b      	str	r3, [r7, #4]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <vPortValidateInterruptPriority+0x74>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <vPortValidateInterruptPriority+0x78>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d90a      	bls.n	8005042 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	603b      	str	r3, [r7, #0]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <vPortValidateInterruptPriority+0x60>
	}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	e000e3f0 	.word	0xe000e3f0
 8005050:	20000f54 	.word	0x20000f54
 8005054:	e000ed0c 	.word	0xe000ed0c
 8005058:	20000f58 	.word	0x20000f58

0800505c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005068:	f7fe fe26 	bl	8003cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <pvPortMalloc+0x174>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005074:	f000 f910 	bl	8005298 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005078:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <pvPortMalloc+0x178>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 808e 	bne.w	80051a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01d      	beq.n	80050c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800508c:	2208      	movs	r2, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	3308      	adds	r3, #8
 80050a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <pvPortMalloc+0x6c>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	617b      	str	r3, [r7, #20]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d069      	beq.n	80051a2 <pvPortMalloc+0x146>
 80050ce:	4b42      	ldr	r3, [pc, #264]	; (80051d8 <pvPortMalloc+0x17c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d864      	bhi.n	80051a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <pvPortMalloc+0x180>)
 80050da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <pvPortMalloc+0x180>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e2:	e004      	b.n	80050ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d903      	bls.n	8005100 <pvPortMalloc+0xa4>
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f1      	bne.n	80050e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005100:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <pvPortMalloc+0x174>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	429a      	cmp	r2, r3
 8005108:	d04b      	beq.n	80051a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2208      	movs	r2, #8
 8005110:	4413      	add	r3, r2
 8005112:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	2308      	movs	r3, #8
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	429a      	cmp	r2, r3
 800512a:	d91f      	bls.n	800516c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <pvPortMalloc+0xf8>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	613b      	str	r3, [r7, #16]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005166:	69b8      	ldr	r0, [r7, #24]
 8005168:	f000 f8f8 	bl	800535c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800516c:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <pvPortMalloc+0x17c>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <pvPortMalloc+0x17c>)
 8005178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <pvPortMalloc+0x17c>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <pvPortMalloc+0x184>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d203      	bcs.n	800518e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <pvPortMalloc+0x17c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <pvPortMalloc+0x184>)
 800518c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <pvPortMalloc+0x178>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	431a      	orrs	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a2:	f7fe fd97 	bl	8003cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <pvPortMalloc+0x16a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <pvPortMalloc+0x168>
	return pvReturn;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20002ea4 	.word	0x20002ea4
 80051d4:	20002eb0 	.word	0x20002eb0
 80051d8:	20002ea8 	.word	0x20002ea8
 80051dc:	20002e9c 	.word	0x20002e9c
 80051e0:	20002eac 	.word	0x20002eac

080051e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d048      	beq.n	8005288 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051f6:	2308      	movs	r3, #8
 80051f8:	425b      	negs	r3, r3
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4b21      	ldr	r3, [pc, #132]	; (8005290 <vPortFree+0xac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vPortFree+0x44>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60fb      	str	r3, [r7, #12]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <vPortFree+0x62>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60bb      	str	r3, [r7, #8]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <vPortFree+0xac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortFree+0xac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800526c:	f7fe fd24 	bl	8003cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <vPortFree+0xb0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4413      	add	r3, r2
 800527a:	4a06      	ldr	r2, [pc, #24]	; (8005294 <vPortFree+0xb0>)
 800527c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527e:	6938      	ldr	r0, [r7, #16]
 8005280:	f000 f86c 	bl	800535c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005284:	f7fe fd26 	bl	8003cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20002eb0 	.word	0x20002eb0
 8005294:	20002ea8 	.word	0x20002ea8

08005298 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800529e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <prvHeapInit+0xac>)
 80052a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3307      	adds	r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <prvHeapInit+0xac>)
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <prvHeapInit+0xb0>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <prvHeapInit+0xb0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e4:	2208      	movs	r2, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <prvHeapInit+0xb4>)
 80052f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <prvHeapInit+0xb4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvHeapInit+0xb4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <prvHeapInit+0xb4>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <prvHeapInit+0xb8>)
 8005326:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <prvHeapInit+0xbc>)
 800532e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <prvHeapInit+0xc0>)
 8005332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000f5c 	.word	0x20000f5c
 8005348:	20002e9c 	.word	0x20002e9c
 800534c:	20002ea4 	.word	0x20002ea4
 8005350:	20002eac 	.word	0x20002eac
 8005354:	20002ea8 	.word	0x20002ea8
 8005358:	20002eb0 	.word	0x20002eb0

0800535c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <prvInsertBlockIntoFreeList+0xa8>)
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e002      	b.n	8005370 <prvInsertBlockIntoFreeList+0x14>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d8f7      	bhi.n	800536a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d108      	bne.n	800539e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d118      	bne.n	80053e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <prvInsertBlockIntoFreeList+0xac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00d      	beq.n	80053da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <prvInsertBlockIntoFreeList+0xac>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e003      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d002      	beq.n	80053fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	20002e9c 	.word	0x20002e9c
 8005408:	20002ea4 	.word	0x20002ea4

0800540c <__libc_init_array>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	2600      	movs	r6, #0
 8005410:	4d0c      	ldr	r5, [pc, #48]	; (8005444 <__libc_init_array+0x38>)
 8005412:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <__libc_init_array+0x3c>)
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	42a6      	cmp	r6, r4
 800541a:	d109      	bne.n	8005430 <__libc_init_array+0x24>
 800541c:	f000 f906 	bl	800562c <_init>
 8005420:	2600      	movs	r6, #0
 8005422:	4d0a      	ldr	r5, [pc, #40]	; (800544c <__libc_init_array+0x40>)
 8005424:	4c0a      	ldr	r4, [pc, #40]	; (8005450 <__libc_init_array+0x44>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	42a6      	cmp	r6, r4
 800542c:	d105      	bne.n	800543a <__libc_init_array+0x2e>
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	f855 3b04 	ldr.w	r3, [r5], #4
 8005434:	4798      	blx	r3
 8005436:	3601      	adds	r6, #1
 8005438:	e7ee      	b.n	8005418 <__libc_init_array+0xc>
 800543a:	f855 3b04 	ldr.w	r3, [r5], #4
 800543e:	4798      	blx	r3
 8005440:	3601      	adds	r6, #1
 8005442:	e7f2      	b.n	800542a <__libc_init_array+0x1e>
 8005444:	0800586c 	.word	0x0800586c
 8005448:	0800586c 	.word	0x0800586c
 800544c:	0800586c 	.word	0x0800586c
 8005450:	08005870 	.word	0x08005870

08005454 <__retarget_lock_acquire_recursive>:
 8005454:	4770      	bx	lr

08005456 <__retarget_lock_release_recursive>:
 8005456:	4770      	bx	lr

08005458 <memcpy>:
 8005458:	440a      	add	r2, r1
 800545a:	4291      	cmp	r1, r2
 800545c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005460:	d100      	bne.n	8005464 <memcpy+0xc>
 8005462:	4770      	bx	lr
 8005464:	b510      	push	{r4, lr}
 8005466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800546a:	4291      	cmp	r1, r2
 800546c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005470:	d1f9      	bne.n	8005466 <memcpy+0xe>
 8005472:	bd10      	pop	{r4, pc}

08005474 <memset>:
 8005474:	4603      	mov	r3, r0
 8005476:	4402      	add	r2, r0
 8005478:	4293      	cmp	r3, r2
 800547a:	d100      	bne.n	800547e <memset+0xa>
 800547c:	4770      	bx	lr
 800547e:	f803 1b01 	strb.w	r1, [r3], #1
 8005482:	e7f9      	b.n	8005478 <memset+0x4>

08005484 <cleanup_glue>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	460c      	mov	r4, r1
 8005488:	6809      	ldr	r1, [r1, #0]
 800548a:	4605      	mov	r5, r0
 800548c:	b109      	cbz	r1, 8005492 <cleanup_glue+0xe>
 800548e:	f7ff fff9 	bl	8005484 <cleanup_glue>
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800549a:	f000 b87f 	b.w	800559c <_free_r>
	...

080054a0 <_reclaim_reent>:
 80054a0:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <_reclaim_reent+0xb4>)
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4604      	mov	r4, r0
 80054a8:	4283      	cmp	r3, r0
 80054aa:	d051      	beq.n	8005550 <_reclaim_reent+0xb0>
 80054ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054ae:	b143      	cbz	r3, 80054c2 <_reclaim_reent+0x22>
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d14a      	bne.n	800554c <_reclaim_reent+0xac>
 80054b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	b111      	cbz	r1, 80054c2 <_reclaim_reent+0x22>
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f86d 	bl	800559c <_free_r>
 80054c2:	6961      	ldr	r1, [r4, #20]
 80054c4:	b111      	cbz	r1, 80054cc <_reclaim_reent+0x2c>
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f868 	bl	800559c <_free_r>
 80054cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054ce:	b111      	cbz	r1, 80054d6 <_reclaim_reent+0x36>
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 f863 	bl	800559c <_free_r>
 80054d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054d8:	b111      	cbz	r1, 80054e0 <_reclaim_reent+0x40>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f85e 	bl	800559c <_free_r>
 80054e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054e2:	b111      	cbz	r1, 80054ea <_reclaim_reent+0x4a>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f859 	bl	800559c <_free_r>
 80054ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054ec:	b111      	cbz	r1, 80054f4 <_reclaim_reent+0x54>
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f854 	bl	800559c <_free_r>
 80054f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054f6:	b111      	cbz	r1, 80054fe <_reclaim_reent+0x5e>
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f84f 	bl	800559c <_free_r>
 80054fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005500:	b111      	cbz	r1, 8005508 <_reclaim_reent+0x68>
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f84a 	bl	800559c <_free_r>
 8005508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800550a:	b111      	cbz	r1, 8005512 <_reclaim_reent+0x72>
 800550c:	4620      	mov	r0, r4
 800550e:	f000 f845 	bl	800559c <_free_r>
 8005512:	69a3      	ldr	r3, [r4, #24]
 8005514:	b1e3      	cbz	r3, 8005550 <_reclaim_reent+0xb0>
 8005516:	4620      	mov	r0, r4
 8005518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800551a:	4798      	blx	r3
 800551c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800551e:	b1b9      	cbz	r1, 8005550 <_reclaim_reent+0xb0>
 8005520:	4620      	mov	r0, r4
 8005522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005526:	f7ff bfad 	b.w	8005484 <cleanup_glue>
 800552a:	5949      	ldr	r1, [r1, r5]
 800552c:	b941      	cbnz	r1, 8005540 <_reclaim_reent+0xa0>
 800552e:	3504      	adds	r5, #4
 8005530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005532:	2d80      	cmp	r5, #128	; 0x80
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	d1f8      	bne.n	800552a <_reclaim_reent+0x8a>
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f82f 	bl	800559c <_free_r>
 800553e:	e7ba      	b.n	80054b6 <_reclaim_reent+0x16>
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f82a 	bl	800559c <_free_r>
 8005548:	4631      	mov	r1, r6
 800554a:	e7ef      	b.n	800552c <_reclaim_reent+0x8c>
 800554c:	2500      	movs	r5, #0
 800554e:	e7ef      	b.n	8005530 <_reclaim_reent+0x90>
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	20000010 	.word	0x20000010

08005558 <strstr>:
 8005558:	780a      	ldrb	r2, [r1, #0]
 800555a:	b570      	push	{r4, r5, r6, lr}
 800555c:	b96a      	cbnz	r2, 800557a <strstr+0x22>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	429a      	cmp	r2, r3
 8005562:	d109      	bne.n	8005578 <strstr+0x20>
 8005564:	460c      	mov	r4, r1
 8005566:	4605      	mov	r5, r0
 8005568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f6      	beq.n	800555e <strstr+0x6>
 8005570:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005574:	429e      	cmp	r6, r3
 8005576:	d0f7      	beq.n	8005568 <strstr+0x10>
 8005578:	3001      	adds	r0, #1
 800557a:	7803      	ldrb	r3, [r0, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ef      	bne.n	8005560 <strstr+0x8>
 8005580:	4618      	mov	r0, r3
 8005582:	e7ec      	b.n	800555e <strstr+0x6>

08005584 <__malloc_lock>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__malloc_lock+0x8>)
 8005586:	f7ff bf65 	b.w	8005454 <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	20002eb4 	.word	0x20002eb4

08005590 <__malloc_unlock>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__malloc_unlock+0x8>)
 8005592:	f7ff bf60 	b.w	8005456 <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	20002eb4 	.word	0x20002eb4

0800559c <_free_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4605      	mov	r5, r0
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d040      	beq.n	8005626 <_free_r+0x8a>
 80055a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a8:	1f0c      	subs	r4, r1, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bfb8      	it	lt
 80055ae:	18e4      	addlt	r4, r4, r3
 80055b0:	f7ff ffe8 	bl	8005584 <__malloc_lock>
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <_free_r+0x8c>)
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	b933      	cbnz	r3, 80055c8 <_free_r+0x2c>
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	6014      	str	r4, [r2, #0]
 80055be:	4628      	mov	r0, r5
 80055c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c4:	f7ff bfe4 	b.w	8005590 <__malloc_unlock>
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d908      	bls.n	80055de <_free_r+0x42>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	1821      	adds	r1, r4, r0
 80055d0:	428b      	cmp	r3, r1
 80055d2:	bf01      	itttt	eq
 80055d4:	6819      	ldreq	r1, [r3, #0]
 80055d6:	685b      	ldreq	r3, [r3, #4]
 80055d8:	1809      	addeq	r1, r1, r0
 80055da:	6021      	streq	r1, [r4, #0]
 80055dc:	e7ed      	b.n	80055ba <_free_r+0x1e>
 80055de:	461a      	mov	r2, r3
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b10b      	cbz	r3, 80055e8 <_free_r+0x4c>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d9fa      	bls.n	80055de <_free_r+0x42>
 80055e8:	6811      	ldr	r1, [r2, #0]
 80055ea:	1850      	adds	r0, r2, r1
 80055ec:	42a0      	cmp	r0, r4
 80055ee:	d10b      	bne.n	8005608 <_free_r+0x6c>
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	4401      	add	r1, r0
 80055f4:	1850      	adds	r0, r2, r1
 80055f6:	4283      	cmp	r3, r0
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	d1e0      	bne.n	80055be <_free_r+0x22>
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4401      	add	r1, r0
 8005602:	6011      	str	r1, [r2, #0]
 8005604:	6053      	str	r3, [r2, #4]
 8005606:	e7da      	b.n	80055be <_free_r+0x22>
 8005608:	d902      	bls.n	8005610 <_free_r+0x74>
 800560a:	230c      	movs	r3, #12
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	e7d6      	b.n	80055be <_free_r+0x22>
 8005610:	6820      	ldr	r0, [r4, #0]
 8005612:	1821      	adds	r1, r4, r0
 8005614:	428b      	cmp	r3, r1
 8005616:	bf01      	itttt	eq
 8005618:	6819      	ldreq	r1, [r3, #0]
 800561a:	685b      	ldreq	r3, [r3, #4]
 800561c:	1809      	addeq	r1, r1, r0
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	6063      	str	r3, [r4, #4]
 8005622:	6054      	str	r4, [r2, #4]
 8005624:	e7cb      	b.n	80055be <_free_r+0x22>
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20002eb8 	.word	0x20002eb8

0800562c <_init>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr

08005638 <_fini>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr
