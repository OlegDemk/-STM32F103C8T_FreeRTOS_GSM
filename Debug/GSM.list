
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b7c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e84  08005e84  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e84  08005e84  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e84  08005e84  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e54  2000009c  08005f28  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ef0  08005f28  00022ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016509  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a0  00000000  00000000  000365ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002eb9  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144d0  00000000  00000000  0003ec41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a61  00000000  00000000  00053111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005780  00000000  00000000  000e6bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c74 	.word	0x08005c74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	08005c74 	.word	0x08005c74

08000150 <HAL_UART_RxCpltCallback>:
char AT_COMAND_AT_CPAS[] = "AT+CPAS\r\n";			// Інформація про стан модуля 0 – готов к работе, 	2 – неизвестно, 3 – входящий звонок, 4 – голосовое соединение
char AT_COMAND_AT_CSQ[] = "AT+CSQ\r\n";				// Рівень сигналу

// --------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which UART generate Callback function
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4a23      	ldr	r2, [pc, #140]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d13e      	bne.n	80001de <HAL_UART_RxCpltCallback+0x8e>
	{
		// '\r' -
		// '\n' - 10
		if((str[0] == 0x0D) || (rx_data_counter >= sizeof(uart_rx_data)))
 8000160:	4b22      	ldr	r3, [pc, #136]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	2b0d      	cmp	r3, #13
 8000166:	d003      	beq.n	8000170 <HAL_UART_RxCpltCallback+0x20>
 8000168:	4b21      	ldr	r3, [pc, #132]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b31      	cmp	r3, #49	; 0x31
 800016e:	d921      	bls.n	80001b4 <HAL_UART_RxCpltCallback+0x64>
		{
			flag_command_received = true;                           // Data is ready
 8000170:	4b20      	ldr	r3, [pc, #128]	; (80001f4 <HAL_UART_RxCpltCallback+0xa4>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000176:	4b1e      	ldr	r3, [pc, #120]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 8000178:	2200      	movs	r2, #0
 800017a:	701a      	strb	r2, [r3, #0]

			// Transmeet receiver data into queue for parsing,
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 800017c:	2300      	movs	r3, #0
 800017e:	60bb      	str	r3, [r7, #8]
			if(xQueueSendToFrontFromISR(command_from_GCMHandle, &uart_rx_data, &xHigherPriorityTaskWoken ) != pdTRUE)
 8000180:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <HAL_UART_RxCpltCallback+0xa8>)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f107 0208 	add.w	r2, r7, #8
 8000188:	2301      	movs	r3, #1
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 800018c:	f002 ff64 	bl	8003058 <xQueueGenericSendFromISR>
 8000190:	4603      	mov	r3, r0
 8000192:	2b01      	cmp	r3, #1
 8000194:	d002      	beq.n	800019c <HAL_UART_RxCpltCallback+0x4c>
			{
				int fff = 999; // ERROR for debug
 8000196:	f240 33e7 	movw	r3, #999	; 0x3e7
 800019a:	60fb      	str	r3, [r7, #12]
			}
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800019c:	2232      	movs	r2, #50	; 0x32
 800019e:	2100      	movs	r1, #0
 80001a0:	4816      	ldr	r0, [pc, #88]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 80001a2:	f005 f875 	bl	8005290 <memset>
			HAL_UART_Receive_IT(&huart1, str, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	4910      	ldr	r1, [pc, #64]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001aa:	480f      	ldr	r0, [pc, #60]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 80001ac:	f001 fe61 	bl	8001e72 <HAL_UART_Receive_IT>
		{
 80001b0:	bf00      	nop
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 80001b2:	e014      	b.n	80001de <HAL_UART_RxCpltCallback+0x8e>
			flag_command_received = false;							// Receive data
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <HAL_UART_RxCpltCallback+0xa4>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	461a      	mov	r2, r3
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001c2:	7819      	ldrb	r1, [r3, #0]
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 80001c6:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 80001c8:	2201      	movs	r2, #1
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001cc:	4806      	ldr	r0, [pc, #24]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 80001ce:	f001 fe50 	bl	8001e72 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001dc:	701a      	strb	r2, [r3, #0]
}
 80001de:	bf00      	nop
 80001e0:	3710      	adds	r7, #16
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	200000ec 	.word	0x200000ec
 80001f0:	200000ee 	.word	0x200000ee
 80001f4:	200000ed 	.word	0x200000ed
 80001f8:	20000144 	.word	0x20000144
 80001fc:	200000b8 	.word	0x200000b8

08000200 <gsm_send_at_command>:
//-------------------------------------------------------------------------------
bool gsm_send_at_command(char *cmd, uint8_t size)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	70fb      	strb	r3, [r7, #3]
	// 1. Send command
	HAL_UART_Transmit_IT(&huart1, cmd, size);
 800020c:	78fb      	ldrb	r3, [r7, #3]
 800020e:	b29b      	uxth	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <gsm_send_at_command+0x24>)
 8000216:	f001 fde8 	bl	8001dea <HAL_UART_Transmit_IT>
//	{
//
//	}while();


	return true;
 800021a:	2301      	movs	r3, #1
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	200000f0 	.word	0x200000f0

08000228 <init_gsm_module>:
//-------------------------------------------------------------------------------
bool init_gsm_module(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart1, AT_COMAND, 10, 1000);

	gsm_send_at_command(AT_COMAND, sizeof(AT_COMAND));     // TEST
 800022c:	2105      	movs	r1, #5
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <init_gsm_module+0x34>)
 8000230:	f7ff ffe6 	bl	8000200 <gsm_send_at_command>
	osDelay(100);
 8000234:	2064      	movs	r0, #100	; 0x64
 8000236:	f002 fb3b 	bl	80028b0 <osDelay>
	gsm_send_at_command(AT_COMAND_ATE1, sizeof(AT_COMAND_ATE1));
 800023a:	2107      	movs	r1, #7
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <init_gsm_module+0x38>)
 800023e:	f7ff ffdf 	bl	8000200 <gsm_send_at_command>
	osDelay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f002 fb34 	bl	80028b0 <osDelay>
	gsm_send_at_command(AT_COMAND_AT_CLIP, sizeof(AT_COMAND_AT_CLIP));
 8000248:	210c      	movs	r1, #12
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <init_gsm_module+0x3c>)
 800024c:	f7ff ffd8 	bl	8000200 <gsm_send_at_command>
	osDelay(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f002 fb2d 	bl	80028b0 <osDelay>
//	gsm_send_at_command(AT_COMAND_TURN_OFF_ECHO, sizeof(AT_COMAND_TURN_OFF_ECHO));		// не буде відповіді від модуля "OK"
//	osDelay(100);


	return true;
 8000256:	2301      	movs	r3, #1
}
 8000258:	4618      	mov	r0, r3
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000000 	.word	0x20000000
 8000260:	20000008 	.word	0x20000008
 8000264:	20000010 	.word	0x20000010

08000268 <send_sms_to_me>:
	gsm_send_at_command(AT_COMAND_MAKE_CALL_ON_NUMBER, sizeof(AT_COMAND_MAKE_CALL_ON_NUMBER));
	//HAL_UART_Transmit_IT(&huart1, AT_COMAND_MAKE_CALL_ON_NUMBER, sizeof(AT_COMAND_MAKE_CALL_ON_NUMBER));			// Work !
}
//-------------------------------------------------------------------------------
void send_sms_to_me(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b099      	sub	sp, #100	; 0x64
 800026c:	af00      	add	r7, sp, #0
//
//
	// 2. Send test SMS   "ATD+ 380931482354;\n\r";     '\0'


	gsm_send_at_command(AT_COMAND_AT_CMGF_1, sizeof(AT_COMAND_AT_CMGF_1));
 800026e:	210c      	movs	r1, #12
 8000270:	482a      	ldr	r0, [pc, #168]	; (800031c <send_sms_to_me+0xb4>)
 8000272:	f7ff ffc5 	bl	8000200 <gsm_send_at_command>


	osDelay(200);
 8000276:	20c8      	movs	r0, #200	; 0xc8
 8000278:	f002 fb1a 	bl	80028b0 <osDelay>
//	uint8_t ctrl_z =26;
	char PhoneNumber[] = "+380931482354";
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <send_sms_to_me+0xb8>)
 800027e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000284:	c407      	stmia	r4!, {r0, r1, r2}
 8000286:	8023      	strh	r3, [r4, #0]
	char AT_SMS[60] = {0};
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	2238      	movs	r2, #56	; 0x38
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f004 fffb 	bl	8005290 <memset>
	//memset(AT_SMS, '\0', sizeof(AT_SMS));
	sprintf(AT_SMS,"AT+CMGS=\"%s\"\r\n", PhoneNumber);
 800029a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4920      	ldr	r1, [pc, #128]	; (8000324 <send_sms_to_me+0xbc>)
 80002a4:	4618      	mov	r0, r3
 80002a6:	f005 f909 	bl	80054bc <siprintf>

	//char str_sms_on_number[] = "AT+CMGS=\"+380931482354\"\r";
	//char str_sms_on_number[] = "AT+CMGS=+380931482354\r\n";
	uint8_t size_buf = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	do{
		size_buf++;
 80002b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80002b4:	3301      	adds	r3, #1
 80002b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}while(AT_SMS[size_buf] != '\0');
 80002ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80002be:	3360      	adds	r3, #96	; 0x60
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1f2      	bne.n	80002b0 <send_sms_to_me+0x48>
//	for(size_buf = 0; AT_SMS[size_buf] != '\0'; size_buf++)
//	{
//
//	}
	gsm_send_at_command(AT_SMS, size_buf);
 80002ca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	4611      	mov	r1, r2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff93 	bl	8000200 <gsm_send_at_command>

	//sim800l.print("AT+CMGS=\"+380931482354\"\r");  //Your phone number don't forget to include your country code, example +212123456789"
	osDelay(200);
 80002da:	20c8      	movs	r0, #200	; 0xc8
 80002dc:	f002 fae8 	bl	80028b0 <osDelay>
	char str_test_message[] = "TEST 1\r\n";
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <send_sms_to_me+0xc0>)
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e8:	c303      	stmia	r3!, {r0, r1}
 80002ea:	701a      	strb	r2, [r3, #0]
	gsm_send_at_command(str_test_message, sizeof(str_test_message));
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	2109      	movs	r1, #9
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff84 	bl	8000200 <gsm_send_at_command>
	//sim800l.print("SIM800l is working");       //This is the text to send to the phone number, don't make it too long or you have to modify the SoftwareSerial buffer
	osDelay(200);
 80002f8:	20c8      	movs	r0, #200	; 0xc8
 80002fa:	f002 fad9 	bl	80028b0 <osDelay>
	char str_end_of_sms = (char)26;
 80002fe:	231a      	movs	r3, #26
 8000300:	71fb      	strb	r3, [r7, #7]
	//HAL_UART_Transmit_IT(&huart1, str_end_of_sms, 1);
	gsm_send_at_command(&str_end_of_sms, 1);
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff7a 	bl	8000200 <gsm_send_at_command>
	//sim800l.print((char)26);// (required according to the datasheet)
	osDelay(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f002 face 	bl	80028b0 <osDelay>
//	osDelay(500);
	//////////////////////////////////////////////////////



}
 8000314:	bf00      	nop
 8000316:	3764      	adds	r7, #100	; 0x64
 8000318:	46bd      	mov	sp, r7
 800031a:	bd90      	pop	{r4, r7, pc}
 800031c:	2000001c 	.word	0x2000001c
 8000320:	08005ce8 	.word	0x08005ce8
 8000324:	08005cd8 	.word	0x08005cd8
 8000328:	08005cf8 	.word	0x08005cf8

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f000 fb02 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f856 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f000 f8c4 	bl	80004c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800033c:	f000 f898 	bl	8000470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000340:	f002 f9a6 	bl	8002690 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of command_from_GCM */
  command_from_GCMHandle = osMessageQueueNew (1, sizeof(TX_GCM_COMAND), &command_from_GCM_attributes);
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <main+0x78>)
 8000346:	212d      	movs	r1, #45	; 0x2d
 8000348:	2001      	movs	r0, #1
 800034a:	f002 fadf 	bl	800290c <osMessageQueueNew>
 800034e:	4603      	mov	r3, r0
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <main+0x7c>)
 8000352:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <main+0x80>)
 8000356:	2100      	movs	r1, #0
 8000358:	4815      	ldr	r0, [pc, #84]	; (80003b0 <main+0x84>)
 800035a:	f002 f9ff 	bl	800275c <osThreadNew>
 800035e:	4603      	mov	r3, r0
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <main+0x88>)
 8000362:	6013      	str	r3, [r2, #0]

  /* creation of gsm_task */
  gsm_taskHandle = osThreadNew(Start_gsm_task, NULL, &gsm_task_attributes);
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <main+0x8c>)
 8000366:	2100      	movs	r1, #0
 8000368:	4814      	ldr	r0, [pc, #80]	; (80003bc <main+0x90>)
 800036a:	f002 f9f7 	bl	800275c <osThreadNew>
 800036e:	4603      	mov	r3, r0
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <main+0x94>)
 8000372:	6013      	str	r3, [r2, #0]

  /* creation of parsingGSMcom */
  parsingGSMcomHandle = osThreadNew(StartParsingGSMCom, NULL, &parsingGSMcom_attributes);
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <main+0x98>)
 8000376:	2100      	movs	r1, #0
 8000378:	4813      	ldr	r0, [pc, #76]	; (80003c8 <main+0x9c>)
 800037a:	f002 f9ef 	bl	800275c <osThreadNew>
 800037e:	4603      	mov	r3, r0
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <main+0xa0>)
 8000382:	6013      	str	r3, [r2, #0]

  /* creation of resoursesMonito */
  resoursesMonitoHandle = osThreadNew(StartResoursesMonitor, NULL, &resoursesMonito_attributes);
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <main+0xa4>)
 8000386:	2100      	movs	r1, #0
 8000388:	4812      	ldr	r0, [pc, #72]	; (80003d4 <main+0xa8>)
 800038a:	f002 f9e7 	bl	800275c <osThreadNew>
 800038e:	4603      	mov	r3, r0
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <main+0xac>)
 8000392:	6013      	str	r3, [r2, #0]

//  HAL_UART_Receive_IT(&huart1, &rx_uart, 1);
  //HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 // HAL_NVIC_EnableIRQ(USART1_IRQn);

  HAL_UART_Receive_IT(&huart1, str, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	4911      	ldr	r1, [pc, #68]	; (80003dc <main+0xb0>)
 8000398:	4811      	ldr	r0, [pc, #68]	; (80003e0 <main+0xb4>)
 800039a:	f001 fd6a 	bl	8001e72 <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800039e:	f002 f9a9 	bl	80026f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <main+0x76>
 80003a4:	08005dc0 	.word	0x08005dc0
 80003a8:	20000144 	.word	0x20000144
 80003ac:	08005d30 	.word	0x08005d30
 80003b0:	0800055d 	.word	0x0800055d
 80003b4:	20000134 	.word	0x20000134
 80003b8:	08005d54 	.word	0x08005d54
 80003bc:	0800057d 	.word	0x0800057d
 80003c0:	20000138 	.word	0x20000138
 80003c4:	08005d78 	.word	0x08005d78
 80003c8:	080005a9 	.word	0x080005a9
 80003cc:	2000013c 	.word	0x2000013c
 80003d0:	08005d9c 	.word	0x08005d9c
 80003d4:	08000619 	.word	0x08000619
 80003d8:	20000140 	.word	0x20000140
 80003dc:	200000ec 	.word	0x200000ec
 80003e0:	200000f0 	.word	0x200000f0

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	; 0x40
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f004 ff4c 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0318 	add.w	r3, r7, #24
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fdfb 	bl	8001028 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000438:	f000 f908 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 f868 	bl	800152c <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000462:	f000 f8f3 	bl	800064c <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_USART1_UART_Init+0x50>)
 8000478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800047c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a8:	f001 fc52 	bl	8001d50 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b2:	f000 f8cb 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000f0 	.word	0x200000f0
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a1d      	ldr	r2, [pc, #116]	; (8000554 <MX_GPIO_Init+0x90>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0310 	and.w	r3, r3, #16
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <MX_GPIO_Init+0x90>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_GPIO_Init+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_GPIO_Init+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a11      	ldr	r2, [pc, #68]	; (8000554 <MX_GPIO_Init+0x90>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_GPIO_Init+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_GPIO_Init+0x94>)
 8000528:	f000 fd4c 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800052c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2302      	movs	r3, #2
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_GPIO_Init+0x94>)
 8000546:	f000 fbb9 	bl	8000cbc <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40011000 	.word	0x40011000

0800055c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <StartDefaultTask+0x1c>)
 800056a:	f000 fd43 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f002 f99d 	bl	80028b0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000576:	e7f5      	b.n	8000564 <StartDefaultTask+0x8>
 8000578:	40011000 	.word	0x40011000

0800057c <Start_gsm_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_gsm_task */
void Start_gsm_task(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_gsm_task */
  /* Infinite loop */

	osDelay(7000);
 8000584:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000588:	f002 f992 	bl	80028b0 <osDelay>
	init_gsm_module();
 800058c:	f7ff fe4c 	bl	8000228 <init_gsm_module>
	osDelay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f002 f98c 	bl	80028b0 <osDelay>

	// meke_call_to_me();			// Test Work fine
	send_sms_to_me();
 8000598:	f7ff fe66 	bl	8000268 <send_sms_to_me>
	  //gsm_send_at_command(AT_COMAND_AT_CMGF_1, sizeof(AT_COMAND_AT_CMGF_1));
	  // gsm_send_at_command(AT_COMAND_AT_CMGF_1, sizeof(AT_COMAND_AT_CMGF_1));
	  // gsm_send_at_command(AT_COMAND, sizeof(AT_COMAND));     // TEST

	  // init_gsm_module();
	  osDelay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f002 f986 	bl	80028b0 <osDelay>
 80005a4:	e7fa      	b.n	800059c <Start_gsm_task+0x20>
	...

080005a8 <StartParsingGSMCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParsingGSMCom */
void StartParsingGSMCom(void *argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b092      	sub	sp, #72	; 0x48
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParsingGSMCom */
  /* Infinite loop */
  for(;;)
  {
	  char tx_gsm_data[50] = {0};
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	222e      	movs	r2, #46	; 0x2e
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fe67 	bl	8005290 <memset>
	  if (xQueueReceive(command_from_GCMHandle, tx_gsm_data, 0) == pdTRUE)		// Read witch button was pressed
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <StartParsingGSMCom+0x68>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f107 010c 	add.w	r1, r7, #12
 80005ca:	2200      	movs	r2, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fddb 	bl	8003188 <xQueueReceive>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d116      	bne.n	8000606 <StartParsingGSMCom+0x5e>
	  {
		  // Command was received

		  char OK_str[] = "OK";
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <StartParsingGSMCom+0x6c>)
 80005da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005de:	6812      	ldr	r2, [r2, #0]
 80005e0:	4611      	mov	r1, r2
 80005e2:	8019      	strh	r1, [r3, #0]
 80005e4:	3302      	adds	r3, #2
 80005e6:	0c12      	lsrs	r2, r2, #16
 80005e8:	701a      	strb	r2, [r3, #0]
		  if((strstr(tx_gsm_data, OK_str)) != NULL)					// Works
 80005ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 ff81 	bl	80054fc <strstr>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <StartParsingGSMCom+0x5e>
		  {
			  int hhdd = 888;
 8000600:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
//		  }


	  }

    osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f002 f952 	bl	80028b0 <osDelay>
  {
 800060c:	e7d0      	b.n	80005b0 <StartParsingGSMCom+0x8>
 800060e:	bf00      	nop
 8000610:	20000144 	.word	0x20000144
 8000614:	08005d04 	.word	0x08005d04

08000618 <StartResoursesMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResoursesMonitor */
void StartResoursesMonitor(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
//	  char rx_buffer_at_comand[40] = "HELLO !";
//	 //rx_buffer_at_comand memscpy();
//	  xQueueOverwrite( command_from_GCMHandle, rx_buffer_at_comand );


    osDelay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f002 f945 	bl	80028b0 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartResoursesMonitor+0x8>

08000628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063a:	f000 f993 	bl	8000964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40000800 	.word	0x40000800

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_MspInit+0x68>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <HAL_MspInit+0x68>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_MspInit+0x68>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_MspInit+0x68>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_MspInit+0x68>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x68>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	210f      	movs	r1, #15
 8000692:	f06f 0001 	mvn.w	r0, #1
 8000696:	f000 fa36 	bl	8000b06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_MspInit+0x6c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_MspInit+0x6c>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <HAL_UART_MspInit+0x9c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d139      	bne.n	800075c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_UART_MspInit+0xa0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_UART_MspInit+0xa0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_UART_MspInit+0xa0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_UART_MspInit+0xa0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_UART_MspInit+0xa0>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_UART_MspInit+0xa0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <HAL_UART_MspInit+0xa4>)
 800072e:	f000 fac5 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <HAL_UART_MspInit+0xa4>)
 8000748:	f000 fab8 	bl	8000cbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2105      	movs	r1, #5
 8000750:	2025      	movs	r0, #37	; 0x25
 8000752:	f000 f9d8 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000756:	2025      	movs	r0, #37	; 0x25
 8000758:	f000 f9f1 	bl	8000b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40013800 	.word	0x40013800
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800

08000770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	201e      	movs	r0, #30
 8000786:	f000 f9be 	bl	8000b06 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800078a:	201e      	movs	r0, #30
 800078c:	f000 f9d7 	bl	8000b3e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_InitTick+0xa0>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <HAL_InitTick+0xa0>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	61d3      	str	r3, [r2, #28]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_InitTick+0xa0>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a8:	f107 0210 	add.w	r2, r7, #16
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f834 	bl	8001820 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007b8:	f001 f80a 	bl	80017d0 <HAL_RCC_GetPCLK1Freq>
 80007bc:	4603      	mov	r3, r0
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_InitTick+0xa4>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_InitTick+0xa8>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_InitTick+0xac>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_InitTick+0xa8>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_InitTick+0xa8>)
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_InitTick+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_InitTick+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_InitTick+0xa8>)
 80007f2:	f001 f863 	bl	80018bc <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <HAL_InitTick+0xa8>)
 80007fe:	f001 f8b5 	bl	800196c <HAL_TIM_Base_Start_IT>
 8000802:	4603      	mov	r3, r0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	431bde83 	.word	0x431bde83
 8000818:	20000148 	.word	0x20000148
 800081c:	40000800 	.word	0x40000800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
	...

0800084c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <TIM4_IRQHandler+0x10>)
 8000852:	f001 f8dd 	bl	8001a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000148 	.word	0x20000148

08000860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USART1_IRQHandler+0x10>)
 8000866:	f001 fb35 	bl	8001ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000f0 	.word	0x200000f0

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f004 fcba 	bl	800521c <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20005000 	.word	0x20005000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	20000190 	.word	0x20000190
 80008dc:	20002ef0 	.word	0x20002ef0

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	; (8000924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	; (8000930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000912:	f7ff ffe5 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000916:	f004 fc87 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fd07 	bl	800032c <main>
  bx lr
 800091e:	4770      	bx	lr
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000928:	08005e8c 	.word	0x08005e8c
  ldr r2, =_sbss
 800092c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000930:	20002ef0 	.word	0x20002ef0

08000934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_2_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x28>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x28>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f8d1 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	200f      	movs	r0, #15
 8000950:	f7ff ff0e 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff fe80 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000030 	.word	0x20000030
 8000984:	20000194 	.word	0x20000194

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000194 	.word	0x20000194

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff4f 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff64 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ffb2 	bl	8000a8c <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff81 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff57 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d008      	beq.n	8000b82 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e020      	b.n	8000bc4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 020e 	bic.w	r2, r2, #14
 8000b90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0201 	bic.w	r2, r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d005      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2204      	movs	r2, #4
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e051      	b.n	8000c96 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 020e 	bic.w	r2, r2, #14
 8000c00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0201 	bic.w	r2, r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_DMA_Abort_IT+0xd0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d029      	beq.n	8000c70 <HAL_DMA_Abort_IT+0xa0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_DMA_Abort_IT+0xd4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d022      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x9c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_DMA_Abort_IT+0xd8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d01a      	beq.n	8000c66 <HAL_DMA_Abort_IT+0x96>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_DMA_Abort_IT+0xdc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d012      	beq.n	8000c60 <HAL_DMA_Abort_IT+0x90>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_DMA_Abort_IT+0xe0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00a      	beq.n	8000c5a <HAL_DMA_Abort_IT+0x8a>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <HAL_DMA_Abort_IT+0xe4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d102      	bne.n	8000c54 <HAL_DMA_Abort_IT+0x84>
 8000c4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c52:	e00e      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c58:	e00b      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5e:	e008      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	e005      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	e002      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	e000      	b.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c70:	2301      	movs	r3, #1
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_DMA_Abort_IT+0xe8>)
 8000c74:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
    } 
  }
  return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020008 	.word	0x40020008
 8000ca4:	4002001c 	.word	0x4002001c
 8000ca8:	40020030 	.word	0x40020030
 8000cac:	40020044 	.word	0x40020044
 8000cb0:	40020058 	.word	0x40020058
 8000cb4:	4002006c 	.word	0x4002006c
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	; 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4918      	ldr	r1, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60cb      	str	r3, [r1, #12]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	; 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43d9      	mvns	r1, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	400b      	ands	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	611a      	str	r2, [r3, #16]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e272      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8087 	beq.w	8001156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001048:	4b92      	ldr	r3, [pc, #584]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b04      	cmp	r3, #4
 8001052:	d00c      	beq.n	800106e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001054:	4b8f      	ldr	r3, [pc, #572]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d112      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
 8001060:	4b8c      	ldr	r3, [pc, #560]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d06c      	beq.n	8001154 <HAL_RCC_OscConfig+0x12c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d168      	bne.n	8001154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e24c      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x76>
 8001090:	4b80      	ldr	r3, [pc, #512]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a7f      	ldr	r2, [pc, #508]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e02e      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7a      	ldr	r2, [pc, #488]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a77      	ldr	r2, [pc, #476]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e01d      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a71      	ldr	r2, [pc, #452]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e00b      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a67      	ldr	r2, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc40 	bl	8000988 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fc3c 	bl	8000988 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e200      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0xe4>
 800112a:	e014      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc2c 	bl	8000988 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fc28 	bl	8000988 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1ec      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x10c>
 8001152:	e000      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d063      	beq.n	800122a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d116      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d001      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e1c0      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4939      	ldr	r1, [pc, #228]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	e03a      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fbe1 	bl	8000988 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fbdd 	bl	8000988 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1a1      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fbc0 	bl	8000988 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fbbc 	bl	8000988 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e180      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03a      	beq.n	80012ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d019      	beq.n	8001272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fba0 	bl	8000988 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fb9c 	bl	8000988 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e160      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 fb08 	bl	8001880 <RCC_Delay>
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fb86 	bl	8000988 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127e:	e00f      	b.n	80012a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fb82 	bl	8000988 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d908      	bls.n	80012a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e146      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	42420000 	.word	0x42420000
 800129c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b92      	ldr	r3, [pc, #584]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e9      	bne.n	8001280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a6 	beq.w	8001406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b8b      	ldr	r3, [pc, #556]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a87      	ldr	r2, [pc, #540]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b82      	ldr	r3, [pc, #520]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb43 	bl	8000988 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fb3f 	bl	8000988 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e103      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x4c8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x312>
 800132c:	4b6f      	ldr	r3, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e02d      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x334>
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a69      	ldr	r2, [pc, #420]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a66      	ldr	r2, [pc, #408]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	e01c      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d10c      	bne.n	800137e <HAL_RCC_OscConfig+0x356>
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a60      	ldr	r2, [pc, #384]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a5d      	ldr	r2, [pc, #372]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	e00b      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d015      	beq.n	80013ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff faf3 	bl	8000988 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff faef 	bl	8000988 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0b1      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ee      	beq.n	80013a6 <HAL_RCC_OscConfig+0x37e>
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fadd 	bl	8000988 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fad9 	bl	8000988 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e09b      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ee      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a3b      	ldr	r2, [pc, #236]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8087 	beq.w	800151e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d061      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d146      	bne.n	80014b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff faad 	bl	8000988 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff faa9 	bl	8000988 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e06d      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d108      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4921      	ldr	r1, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a19      	ldr	r1, [r3, #32]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	430b      	orrs	r3, r1
 800147e:	491b      	ldr	r1, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa7d 	bl	8000988 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fa79 	bl	8000988 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e03d      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x46a>
 80014b0:	e035      	b.n	800151e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_RCC_OscConfig+0x4cc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa66 	bl	8000988 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fa62 	bl	8000988 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e026      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x498>
 80014de:	e01e      	b.n	800151e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e019      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40007000 	.word	0x40007000
 80014f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x500>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	429a      	cmp	r2, r3
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0d0      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d910      	bls.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0207 	bic.w	r2, r3, #7
 8001556:	4965      	ldr	r1, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d040      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d115      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e073      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4936      	ldr	r1, [pc, #216]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff f9b4 	bl	8000988 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff f9b0 	bl	8000988 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e053      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d210      	bcs.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1cc>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f848 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08005dd8 	.word	0x08005dd8
 80016f8:	20000028 	.word	0x20000028
 80016fc:	2000002c 	.word	0x2000002c

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b490      	push	{r4, r7}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_GetSysClockFreq+0xac>)
 8001708:	1d3c      	adds	r4, r7, #4
 800170a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001710:	f240 2301 	movw	r3, #513	; 0x201
 8001714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x40>
 800173a:	2b08      	cmp	r3, #8
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x46>
 800173e:	e02b      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001742:	623b      	str	r3, [r7, #32]
      break;
 8001744:	e02b      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3328      	adds	r3, #40	; 0x28
 8001750:	443b      	add	r3, r7
 8001752:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001756:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d012      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0c5b      	lsrs	r3, r3, #17
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	3328      	adds	r3, #40	; 0x28
 800176e:	443b      	add	r3, r7
 8001770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001774:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800177a:	fb03 f202 	mul.w	r2, r3, r2
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	e004      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	623b      	str	r3, [r7, #32]
      break;
 8001796:	e002      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179e:	6a3b      	ldr	r3, [r7, #32]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc90      	pop	{r4, r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	08005d08 	.word	0x08005d08
 80017b0:	40021000 	.word	0x40021000
 80017b4:	007a1200 	.word	0x007a1200
 80017b8:	003d0900 	.word	0x003d0900

080017bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <HAL_RCC_GetHCLKFreq+0x10>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000028 	.word	0x20000028

080017d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017d4:	f7ff fff2 	bl	80017bc <HAL_RCC_GetHCLKFreq>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	4903      	ldr	r1, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08005de8 	.word	0x08005de8

080017f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017fc:	f7ff ffde 	bl	80017bc <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0adb      	lsrs	r3, r3, #11
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK2Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	08005de8 	.word	0x08005de8

08001820 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	220f      	movs	r2, #15
 800182e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_GetClockConfig+0x58>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_RCC_GetClockConfig+0x58>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_GetClockConfig+0x58>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_RCC_GetClockConfig+0x58>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_GetClockConfig+0x5c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	40022000 	.word	0x40022000

08001880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <RCC_Delay+0x34>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <RCC_Delay+0x38>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a5b      	lsrs	r3, r3, #9
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800189c:	bf00      	nop
  }
  while (Delay --);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f9      	bne.n	800189c <RCC_Delay+0x1c>
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000028 	.word	0x20000028
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e041      	b.n	8001952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f839 	bl	800195a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 f9b4 	bl	8001c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d001      	beq.n	8001984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e03a      	b.n	80019fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_TIM_Base_Start_IT+0x98>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00e      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x58>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d009      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x58>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_TIM_Base_Start_IT+0x9c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d004      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x58>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_TIM_Base_Start_IT+0xa0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d111      	bne.n	80019e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d010      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e6:	e007      	b.n	80019f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800

08001a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0202 	mvn.w	r2, #2
 8001a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8ed 	bl	8001c32 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8e0 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8ef 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d122      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0204 	mvn.w	r2, #4
 8001a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8c3 	bl	8001c32 <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8b6 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8c5 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0208 	mvn.w	r2, #8
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f899 	bl	8001c32 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f88c 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f89b 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0210 	mvn.w	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f86f 	bl	8001c32 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f862 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f871 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fd4a 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b80      	cmp	r3, #128	; 0x80
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8bf 	bl	8001d3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f835 	bl	8001c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0220 	mvn.w	r2, #32
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f88a 	bl	8001d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d007      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <TIM_Base_SetConfig+0xbc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <TIM_Base_SetConfig+0xc0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d108      	bne.n	8001caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00b      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d007      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <TIM_Base_SetConfig+0xbc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <TIM_Base_SetConfig+0xc0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800

08001d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e03f      	b.n	8001de2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fca6 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2224      	movs	r2, #36	; 0x24
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fbed 	bl	8002574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	4613      	mov	r3, r2
 8001df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d130      	bne.n	8001e66 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_UART_Transmit_IT+0x26>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e029      	b.n	8001e68 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Transmit_IT+0x38>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e022      	b.n	8001e68 <HAL_UART_Transmit_IT+0x7e>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2221      	movs	r2, #33	; 0x21
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e60:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_UART_Receive_IT+0x26>
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e016      	b.n	8001eca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Receive_IT+0x38>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e00f      	b.n	8001eca <HAL_UART_Receive_IT+0x58>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f9cf 	bl	8002262 <UART_Start_Receive_IT>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	e000      	b.n	8001eca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_UART_IRQHandler+0x52>
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa7f 	bl	8002422 <UART_Receive_IT>
      return;
 8001f24:	e17b      	b.n	800221e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80b1 	beq.w	8002090 <HAL_UART_IRQHandler+0x1bc>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_UART_IRQHandler+0x70>
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80a6 	beq.w	8002090 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_UART_IRQHandler+0x90>
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_UART_IRQHandler+0xb0>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f043 0202 	orr.w	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xd0>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <HAL_UART_IRQHandler+0xfa>
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_UART_IRQHandler+0xee>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0208 	orr.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 811e 	beq.w	8002214 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x11e>
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fa18 	bl	8002422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <HAL_UART_IRQHandler+0x146>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d031      	beq.n	800207e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f95a 	bl	80022d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	2b00      	cmp	r3, #0
 8002044:	d013      	beq.n	800206e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	4a76      	ldr	r2, [pc, #472]	; (8002224 <HAL_UART_IRQHandler+0x350>)
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fdbc 	bl	8000bd0 <HAL_DMA_Abort_IT>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002068:	4610      	mov	r0, r2
 800206a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800206c:	e00e      	b.n	800208c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8e3 	bl	800223a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	e00a      	b.n	800208c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8df 	bl	800223a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	e006      	b.n	800208c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8db 	bl	800223a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800208a:	e0c3      	b.n	8002214 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	bf00      	nop
    return;
 800208e:	e0c1      	b.n	8002214 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b01      	cmp	r3, #1
 8002096:	f040 80a1 	bne.w	80021dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 809b 	beq.w	80021dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8095 	beq.w	80021dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d04e      	beq.n	8002174 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80020e0:	8a3b      	ldrh	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8098 	beq.w	8002218 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020ec:	8a3a      	ldrh	r2, [r7, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	f080 8092 	bcs.w	8002218 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8a3a      	ldrh	r2, [r7, #16]
 80020f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b20      	cmp	r3, #32
 8002102:	d02b      	beq.n	800215c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002112:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002132:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fcff 	bl	8000b5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002164:	b29b      	uxth	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b29b      	uxth	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f86d 	bl	800224c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002172:	e051      	b.n	8002218 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800217c:	b29b      	uxth	r3, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d047      	beq.n	800221c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800218c:	8a7b      	ldrh	r3, [r7, #18]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d044      	beq.n	800221c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0210 	bic.w	r2, r2, #16
 80021ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d0:	8a7b      	ldrh	r3, [r7, #18]
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f839 	bl	800224c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021da:	e01f      	b.n	800221c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_UART_IRQHandler+0x324>
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f8af 	bl	8002354 <UART_Transmit_IT>
    return;
 80021f6:	e012      	b.n	800221e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_UART_IRQHandler+0x34a>
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8f0 	bl	80023f2 <UART_EndTransmit_IT>
    return;
 8002212:	e004      	b.n	800221e <HAL_UART_IRQHandler+0x34a>
    return;
 8002214:	bf00      	nop
 8002216:	e002      	b.n	800221e <HAL_UART_IRQHandler+0x34a>
      return;
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <HAL_UART_IRQHandler+0x34a>
      return;
 800221c:	bf00      	nop
  }
}
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	0800232d 	.word	0x0800232d

08002228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	4613      	mov	r3, r2
 800226e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2222      	movs	r2, #34	; 0x22
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0210 	bic.w	r2, r2, #16
 8002312:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff77 	bl	800223a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b21      	cmp	r3, #33	; 0x21
 8002366:	d13e      	bne.n	80023e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	d114      	bne.n	800239c <UART_Transmit_IT+0x48>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d110      	bne.n	800239c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	621a      	str	r2, [r3, #32]
 800239a:	e008      	b.n	80023ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6211      	str	r1, [r2, #32]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4619      	mov	r1, r3
 80023bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff08 	bl	8002228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b22      	cmp	r3, #34	; 0x22
 8002434:	f040 8099 	bne.w	800256a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d117      	bne.n	8002472 <UART_Receive_IT+0x50>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d113      	bne.n	8002472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	b29b      	uxth	r3, r3
 800245c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002460:	b29a      	uxth	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
 8002470:	e026      	b.n	80024c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002484:	d007      	beq.n	8002496 <UART_Receive_IT+0x74>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <UART_Receive_IT+0x82>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e008      	b.n	80024b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4619      	mov	r1, r3
 80024ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d148      	bne.n	8002566 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0220 	bic.w	r2, r2, #32
 80024e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	2b01      	cmp	r3, #1
 8002512:	d123      	bne.n	800255c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b10      	cmp	r3, #16
 8002536:	d10a      	bne.n	800254e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fe79 	bl	800224c <HAL_UARTEx_RxEventCallback>
 800255a:	e002      	b.n	8002562 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fd fdf7 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e002      	b.n	800256c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ae:	f023 030c 	bic.w	r3, r3, #12
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <UART_SetConfig+0x114>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025dc:	f7ff f90c 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	e002      	b.n	80025ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e4:	f7ff f8f4 	bl	80017d0 <HAL_RCC_GetPCLK1Freq>
 80025e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	009a      	lsls	r2, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <UART_SetConfig+0x118>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	0119      	lsls	r1, r3, #4
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <UART_SetConfig+0x118>)
 8002622:	fba3 0302 	umull	r0, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <UART_SetConfig+0x118>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002640:	4419      	add	r1, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <UART_SetConfig+0x118>)
 800265a:	fba3 0302 	umull	r0, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <UART_SetConfig+0x118>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	440a      	add	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40013800 	.word	0x40013800
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002696:	f3ef 8305 	mrs	r3, IPSR
 800269a:	60bb      	str	r3, [r7, #8]
  return(result);
 800269c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8310 	mrs	r3, PRIMASK
 80026a6:	607b      	str	r3, [r7, #4]
  return(result);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <osKernelInitialize+0x32>
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <osKernelInitialize+0x60>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d109      	bne.n	80026ca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026b6:	f3ef 8311 	mrs	r3, BASEPRI
 80026ba:	603b      	str	r3, [r7, #0]
  return(result);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80026c2:	f06f 0305 	mvn.w	r3, #5
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e00c      	b.n	80026e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <osKernelInitialize+0x60>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <osKernelInitialize+0x60>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e002      	b.n	80026e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026e4:	68fb      	ldr	r3, [r7, #12]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000198 	.word	0x20000198

080026f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026fa:	f3ef 8305 	mrs	r3, IPSR
 80026fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002700:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002706:	f3ef 8310 	mrs	r3, PRIMASK
 800270a:	607b      	str	r3, [r7, #4]
  return(result);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <osKernelStart+0x32>
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <osKernelStart+0x64>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d109      	bne.n	800272e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800271a:	f3ef 8311 	mrs	r3, BASEPRI
 800271e:	603b      	str	r3, [r7, #0]
  return(result);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002726:	f06f 0305 	mvn.w	r3, #5
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e00e      	b.n	800274c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <osKernelStart+0x64>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <osKernelStart+0x64>)
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800273c:	f001 f954 	bl	80039e8 <vTaskStartScheduler>
      stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e002      	b.n	800274c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800274a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000198 	.word	0x20000198

0800275c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af04      	add	r7, sp, #16
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276c:	f3ef 8305 	mrs	r3, IPSR
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 8094 	bne.w	80028a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277a:	f3ef 8310 	mrs	r3, PRIMASK
 800277e:	623b      	str	r3, [r7, #32]
  return(result);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 808d 	bne.w	80028a2 <osThreadNew+0x146>
 8002788:	4b48      	ldr	r3, [pc, #288]	; (80028ac <osThreadNew+0x150>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d106      	bne.n	800279e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002790:	f3ef 8311 	mrs	r3, BASEPRI
 8002794:	61fb      	str	r3, [r7, #28]
  return(result);
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 8082 	bne.w	80028a2 <osThreadNew+0x146>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d07e      	beq.n	80028a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027a8:	2318      	movs	r3, #24
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80027ac:	2300      	movs	r3, #0
 80027ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027b0:	f107 031b 	add.w	r3, r7, #27
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d045      	beq.n	800284e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <osThreadNew+0x74>
        name = attr->name;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <osThreadNew+0x9a>
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	2b38      	cmp	r3, #56	; 0x38
 80027e8:	d805      	bhi.n	80027f6 <osThreadNew+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <osThreadNew+0x9e>
        return (NULL);
 80027f6:	2300      	movs	r3, #0
 80027f8:	e054      	b.n	80028a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <osThreadNew+0xd4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2bbb      	cmp	r3, #187	; 0xbb
 8002818:	d90a      	bls.n	8002830 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <osThreadNew+0xd4>
        mem = 1;
 800282a:	2301      	movs	r3, #1
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
 800282e:	e010      	b.n	8002852 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <osThreadNew+0xf6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <osThreadNew+0xf6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <osThreadNew+0xf6>
          mem = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
 800284c:	e001      	b.n	8002852 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	2b01      	cmp	r3, #1
 8002856:	d110      	bne.n	800287a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002860:	9202      	str	r2, [sp, #8]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fed6 	bl	8003620 <xTaskCreateStatic>
 8002874:	4603      	mov	r3, r0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e013      	b.n	80028a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d110      	bne.n	80028a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	b29a      	uxth	r2, r3
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 ff20 	bl	80036d8 <xTaskCreate>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d001      	beq.n	80028a2 <osThreadNew+0x146>
          hTask = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028a2:	697b      	ldr	r3, [r7, #20]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3738      	adds	r7, #56	; 0x38
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000198 	.word	0x20000198

080028b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b8:	f3ef 8305 	mrs	r3, IPSR
 80028bc:	613b      	str	r3, [r7, #16]
  return(result);
 80028be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c4:	f3ef 8310 	mrs	r3, PRIMASK
 80028c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <osDelay+0x34>
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <osDelay+0x58>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d109      	bne.n	80028ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028d8:	f3ef 8311 	mrs	r3, BASEPRI
 80028dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <osDelay+0x3c>
    stat = osErrorISR;
 80028e4:	f06f 0305 	mvn.w	r3, #5
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e007      	b.n	80028fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f001 f842 	bl	8003980 <vTaskDelay>
    }
  }

  return (stat);
 80028fc:	697b      	ldr	r3, [r7, #20]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000198 	.word	0x20000198

0800290c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291c:	f3ef 8305 	mrs	r3, IPSR
 8002920:	61bb      	str	r3, [r7, #24]
  return(result);
 8002922:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002924:	2b00      	cmp	r3, #0
 8002926:	d16f      	bne.n	8002a08 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002928:	f3ef 8310 	mrs	r3, PRIMASK
 800292c:	617b      	str	r3, [r7, #20]
  return(result);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d169      	bne.n	8002a08 <osMessageQueueNew+0xfc>
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <osMessageQueueNew+0x108>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d105      	bne.n	8002948 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800293c:	f3ef 8311 	mrs	r3, BASEPRI
 8002940:	613b      	str	r3, [r7, #16]
  return(result);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d15f      	bne.n	8002a08 <osMessageQueueNew+0xfc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d05c      	beq.n	8002a08 <osMessageQueueNew+0xfc>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d059      	beq.n	8002a08 <osMessageQueueNew+0xfc>
    mem = -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002958:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d029      	beq.n	80029b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <osMessageQueueNew+0x82>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b4f      	cmp	r3, #79	; 0x4f
 800296e:	d90e      	bls.n	800298e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	429a      	cmp	r2, r3
 8002986:	d302      	bcc.n	800298e <osMessageQueueNew+0x82>
        mem = 1;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	e014      	b.n	80029b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d110      	bne.n	80029b8 <osMessageQueueNew+0xac>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <osMessageQueueNew+0xac>
          mem = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	e001      	b.n	80029b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10b      	bne.n	80029d6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2100      	movs	r1, #0
 80029c8:	9100      	str	r1, [sp, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f96d 	bl	8002cac <xQueueGenericCreateStatic>
 80029d2:	6278      	str	r0, [r7, #36]	; 0x24
 80029d4:	e008      	b.n	80029e8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80029dc:	2200      	movs	r2, #0
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f9da 	bl	8002d9a <xQueueGenericCreate>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <osMessageQueueNew+0xf0>
        name = attr->name;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e001      	b.n	8002a00 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a04:	f000 fdb0 	bl	8003568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000198 	.word	0x20000198

08002a18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <vApplicationGetIdleTaskMemory+0x28>)
 8002a28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	2000019c 	.word	0x2000019c
 8002a44:	20000258 	.word	0x20000258

08002a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <vApplicationGetTimerTaskMemory+0x30>)
 8002a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000458 	.word	0x20000458
 8002a78:	20000514 	.word	0x20000514

08002a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0208 	add.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0208 	add.w	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f103 0208 	add.w	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2e:	d103      	bne.n	8002b38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e00c      	b.n	8002b52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e002      	b.n	8002b46 <vListInsert+0x2e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d2f6      	bcs.n	8002b40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d103      	bne.n	8002bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1e5a      	subs	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
	...

08002bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c06:	f002 f831 	bl	8004c6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	3b01      	subs	r3, #1
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	441a      	add	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d114      	bne.n	8002c86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3310      	adds	r3, #16
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f959 	bl	8003f20 <xTaskRemoveFromEventList>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <xQueueGenericReset+0xcc>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	e009      	b.n	8002c9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3310      	adds	r3, #16
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fef6 	bl	8002a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3324      	adds	r3, #36	; 0x24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fef1 	bl	8002a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c9a:	f002 f817 	bl	8004ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <xQueueGenericCreateStatic+0x52>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <xQueueGenericCreateStatic+0x56>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <xQueueGenericCreateStatic+0x58>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	623b      	str	r3, [r7, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <xQueueGenericCreateStatic+0x7e>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueGenericCreateStatic+0x82>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueGenericCreateStatic+0x84>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fb      	str	r3, [r7, #28]
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d4a:	2350      	movs	r3, #80	; 0x50
 8002d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b50      	cmp	r3, #80	; 0x50
 8002d52:	d00a      	beq.n	8002d6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	61bb      	str	r3, [r7, #24]
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f843 	bl	8002e16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3730      	adds	r7, #48	; 0x30
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08a      	sub	sp, #40	; 0x28
 8002d9e:	af02      	add	r7, sp, #8
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	613b      	str	r3, [r7, #16]
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e004      	b.n	8002dda <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3350      	adds	r3, #80	; 0x50
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 f844 	bl	8004e6c <pvPortMalloc>
 8002de4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	3350      	adds	r3, #80	; 0x50
 8002df0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dfa:	79fa      	ldrb	r2, [r7, #7]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f805 	bl	8002e16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
	}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e002      	b.n	8002e38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e44:	2101      	movs	r1, #1
 8002e46:	69b8      	ldr	r0, [r7, #24]
 8002e48:	f7ff fec8 	bl	8002bdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericSend+0x32>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSend+0x40>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericSend+0x44>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericSend+0x46>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericSend+0x60>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSend+0x6e>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSend+0x72>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSend+0x74>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericSend+0x8e>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eea:	f001 f9df 	bl	80042ac <xTaskGetSchedulerState>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <xQueueGenericSend+0x9e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <xQueueGenericSend+0xa2>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericSend+0xa4>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61fb      	str	r3, [r7, #28]
}
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f1a:	f001 fea7 	bl	8004c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <xQueueGenericSend+0xd4>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d129      	bne.n	8002f84 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f36:	f000 fa07 	bl	8003348 <prvCopyDataToQueue>
 8002f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	3324      	adds	r3, #36	; 0x24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 ffe9 	bl	8003f20 <xTaskRemoveFromEventList>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <xQueueGenericSend+0x1f8>)
 8002f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	e00a      	b.n	8002f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <xQueueGenericSend+0x1f8>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f7c:	f001 fea6 	bl	8004ccc <vPortExitCritical>
				return pdPASS;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e063      	b.n	800304c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f8a:	f001 fe9f 	bl	8004ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e05c      	b.n	800304c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f823 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fa6:	f001 fe91 	bl	8004ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002faa:	f000 fd8d 	bl	8003ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fae:	f001 fe5d 	bl	8004c6c <vPortEnterCritical>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSend+0x16c>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x182>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fde:	f001 fe75 	bl	8004ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 f812 	bl	8004014 <xTaskCheckForTimeOut>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d124      	bne.n	8003040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff8:	f000 fa9e 	bl	8003538 <prvIsQueueFull>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3310      	adds	r3, #16
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ff38 	bl	8003e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003012:	f000 fa29 	bl	8003468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003016:	f000 fd65 	bl	8003ae4 <xTaskResumeAll>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af7c 	bne.w	8002f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <xQueueGenericSend+0x1f8>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e772      	b.n	8002f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003036:	f000 fa17 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800303a:	f000 fd53 	bl	8003ae4 <xTaskResumeAll>
 800303e:	e76c      	b.n	8002f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003042:	f000 fa11 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003046:	f000 fd4d 	bl	8003ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800304a:	2300      	movs	r3, #0
		}
	}
}
 800304c:	4618      	mov	r0, r3
 800304e:	3738      	adds	r7, #56	; 0x38
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <xQueueGenericSendFromISR+0x3c>
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <xQueueGenericSendFromISR+0x40>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <xQueueGenericSendFromISR+0x42>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	623b      	str	r3, [r7, #32]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d103      	bne.n	80030c2 <xQueueGenericSendFromISR+0x6a>
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <xQueueGenericSendFromISR+0x6e>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueGenericSendFromISR+0x70>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61fb      	str	r3, [r7, #28]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e2:	f001 fe85 	bl	8004df0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e6:	f3ef 8211 	mrs	r2, BASEPRI
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	61ba      	str	r2, [r7, #24]
 80030fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <xQueueGenericSendFromISR+0xbc>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d12c      	bne.n	800316e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003124:	f000 f910 	bl	8003348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003128:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003130:	d112      	bne.n	8003158 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	3324      	adds	r3, #36	; 0x24
 800313e:	4618      	mov	r0, r3
 8003140:	f000 feee 	bl	8003f20 <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800315c:	3301      	adds	r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	b25a      	sxtb	r2, r3
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003168:	2301      	movs	r3, #1
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800316c:	e001      	b.n	8003172 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800316e:	2300      	movs	r3, #0
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800317c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003180:	4618      	mov	r0, r3
 8003182:	3738      	adds	r7, #56	; 0x38
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <xQueueReceive+0x30>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	623b      	str	r3, [r7, #32]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <xQueueReceive+0x3e>
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <xQueueReceive+0x42>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <xQueueReceive+0x44>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <xQueueReceive+0x5e>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61fb      	str	r3, [r7, #28]
}
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031e6:	f001 f861 	bl	80042ac <xTaskGetSchedulerState>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <xQueueReceive+0x6e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <xQueueReceive+0x72>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueReceive+0x74>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xQueueReceive+0x8e>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	61bb      	str	r3, [r7, #24]
}
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003216:	f001 fd29 	bl	8004c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 f8f7 	bl	800341c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00f      	beq.n	800325e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	3310      	adds	r3, #16
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fe6c 	bl	8003f20 <xTaskRemoveFromEventList>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <xQueueReceive+0x1bc>)
 8003250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800325e:	f001 fd35 	bl	8004ccc <vPortExitCritical>
				return pdPASS;
 8003262:	2301      	movs	r3, #1
 8003264:	e069      	b.n	800333a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d103      	bne.n	8003274 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800326c:	f001 fd2e 	bl	8004ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003270:	2300      	movs	r3, #0
 8003272:	e062      	b.n	800333a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f000 feb2 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003288:	f001 fd20 	bl	8004ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800328c:	f000 fc1c 	bl	8003ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003290:	f001 fcec 	bl	8004c6c <vPortEnterCritical>
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329a:	b25b      	sxtb	r3, r3
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a0:	d103      	bne.n	80032aa <xQueueReceive+0x122>
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b6:	d103      	bne.n	80032c0 <xQueueReceive+0x138>
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c0:	f001 fd04 	bl	8004ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032c4:	1d3a      	adds	r2, r7, #4
 80032c6:	f107 0310 	add.w	r3, r7, #16
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fea1 	bl	8004014 <xTaskCheckForTimeOut>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d123      	bne.n	8003320 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032da:	f000 f917 	bl	800350c <prvIsQueueEmpty>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fdc7 	bl	8003e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f4:	f000 f8b8 	bl	8003468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032f8:	f000 fbf4 	bl	8003ae4 <xTaskResumeAll>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d189      	bne.n	8003216 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <xQueueReceive+0x1bc>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	e780      	b.n	8003216 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f000 f8a7 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800331a:	f000 fbe3 	bl	8003ae4 <xTaskResumeAll>
 800331e:	e77a      	b.n	8003216 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003322:	f000 f8a1 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003326:	f000 fbdd 	bl	8003ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	f000 f8ee 	bl	800350c <prvIsQueueEmpty>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f43f af6f 	beq.w	8003216 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800333a:	4618      	mov	r0, r3
 800333c:	3730      	adds	r7, #48	; 0x30
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000ed04 	.word	0xe000ed04

08003348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d14d      	bne.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 ffb8 	bl	80042e8 <xTaskPriorityDisinherit>
 8003378:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	e043      	b.n	800340a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6898      	ldr	r0, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f001 ff6e 	bl	8005274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d32b      	bcc.n	800340a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	e026      	b.n	800340a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68d8      	ldr	r0, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	461a      	mov	r2, r3
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	f001 ff54 	bl	8005274 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	425b      	negs	r3, r3
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	425b      	negs	r3, r3
 80033f2:	441a      	add	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d105      	bne.n	800340a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3b01      	subs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d303      	bcc.n	8003450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68d9      	ldr	r1, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	461a      	mov	r2, r3
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	f001 ff0a 	bl	8005274 <memcpy>
	}
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003470:	f001 fbfc 	bl	8004c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800347c:	e011      	b.n	80034a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fd48 	bl	8003f20 <xTaskRemoveFromEventList>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003496:	f000 fe1f 	bl	80040d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3b01      	subs	r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dce9      	bgt.n	800347e <prvUnlockQueue+0x16>
 80034aa:	e000      	b.n	80034ae <prvUnlockQueue+0x46>
					break;
 80034ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034b6:	f001 fc09 	bl	8004ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ba:	f001 fbd7 	bl	8004c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034c6:	e011      	b.n	80034ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3310      	adds	r3, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fd23 	bl	8003f20 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e0:	f000 fdfa 	bl	80040d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dce9      	bgt.n	80034c8 <prvUnlockQueue+0x60>
 80034f4:	e000      	b.n	80034f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003500:	f001 fbe4 	bl	8004ccc <vPortExitCritical>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003514:	f001 fbaa 	bl	8004c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352a:	f001 fbcf 	bl	8004ccc <vPortExitCritical>

	return xReturn;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003540:	f001 fb94 	bl	8004c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e001      	b.n	800355a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355a:	f001 fbb7 	bl	8004ccc <vPortExitCritical>

	return xReturn;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e014      	b.n	80035a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003578:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <vQueueAddToRegistry+0x4c>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003584:	490b      	ldr	r1, [pc, #44]	; (80035b4 <vQueueAddToRegistry+0x4c>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <vQueueAddToRegistry+0x4c>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800359a:	e006      	b.n	80035aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d9e7      	bls.n	8003578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	20000914 	.word	0x20000914

080035b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035c8:	f001 fb50 	bl	8004c6c <vPortEnterCritical>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d8:	d103      	bne.n	80035e2 <vQueueWaitForMessageRestricted+0x2a>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ee:	d103      	bne.n	80035f8 <vQueueWaitForMessageRestricted+0x40>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f8:	f001 fb68 	bl	8004ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3324      	adds	r3, #36	; 0x24
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fc5b 	bl	8003ec8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003612:	6978      	ldr	r0, [r7, #20]
 8003614:	f7ff ff28 	bl	8003468 <prvUnlockQueue>
	}
 8003618:	bf00      	nop
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08e      	sub	sp, #56	; 0x38
 8003624:	af04      	add	r7, sp, #16
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	623b      	str	r3, [r7, #32]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xTaskCreateStatic+0x46>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	61fb      	str	r3, [r7, #28]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003666:	23bc      	movs	r3, #188	; 0xbc
 8003668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2bbc      	cmp	r3, #188	; 0xbc
 800366e:	d00a      	beq.n	8003686 <xTaskCreateStatic+0x66>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01e      	beq.n	80036ca <xTaskCreateStatic+0xaa>
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036a4:	2300      	movs	r3, #0
 80036a6:	9303      	str	r3, [sp, #12]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f851 	bl	8003764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036c4:	f000 f8ec 	bl	80038a0 <prvAddNewTaskToReadyList>
 80036c8:	e001      	b.n	80036ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036ce:	697b      	ldr	r3, [r7, #20]
	}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fbbd 	bl	8004e6c <pvPortMalloc>
 80036f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036fa:	20bc      	movs	r0, #188	; 0xbc
 80036fc:	f001 fbb6 	bl	8004e6c <pvPortMalloc>
 8003700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
 800370e:	e005      	b.n	800371c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f001 fc6f 	bl	8004ff4 <vPortFree>
 8003716:	e001      	b.n	800371c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d017      	beq.n	8003752 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	2300      	movs	r3, #0
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f80f 	bl	8003764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003746:	69f8      	ldr	r0, [r7, #28]
 8003748:	f000 f8aa 	bl	80038a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800374c:	2301      	movs	r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e002      	b.n	8003758 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003758:	69bb      	ldr	r3, [r7, #24]
	}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	461a      	mov	r2, r3
 800377c:	21a5      	movs	r1, #165	; 0xa5
 800377e:	f001 fd87 	bl	8005290 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800378c:	3b01      	subs	r3, #1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	617b      	str	r3, [r7, #20]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e012      	b.n	80037e8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	7819      	ldrb	r1, [r3, #0]
 80037ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	3334      	adds	r3, #52	; 0x34
 80037d2:	460a      	mov	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d9e9      	bls.n	80037c2 <prvInitialiseNewTask+0x5e>
 80037ee:	e000      	b.n	80037f2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80037f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2b37      	cmp	r3, #55	; 0x37
 80037fe:	d901      	bls.n	8003804 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003800:	2337      	movs	r3, #55	; 0x37
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f94d 	bl	8002aba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f948 	bl	8002aba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2200      	movs	r2, #0
 8003844:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3354      	adds	r3, #84	; 0x54
 8003854:	2260      	movs	r2, #96	; 0x60
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fd19 	bl	8005290 <memset>
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <prvInitialiseNewTask+0x130>)
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <prvInitialiseNewTask+0x134>)
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvInitialiseNewTask+0x138>)
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	69b8      	ldr	r0, [r7, #24]
 8003876:	f001 f90b 	bl	8004a90 <pxPortInitialiseStack>
 800387a:	4602      	mov	r2, r0
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388c:	bf00      	nop
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	08005e10 	.word	0x08005e10
 8003898:	08005e30 	.word	0x08005e30
 800389c:	08005df0 	.word	0x08005df0

080038a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038a8:	f001 f9e0 	bl	8004c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038be:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d110      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038cc:	f000 fc28 	bl	8004120 <prvInitialiseTaskLists>
 80038d0:	e00d      	b.n	80038ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <prvAddNewTaskToReadyList+0xcc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d802      	bhi.n	80038ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <prvAddNewTaskToReadyList+0xd0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <prvAddNewTaskToReadyList+0xd0>)
 80038f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <prvAddNewTaskToReadyList+0xd0>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <prvAddNewTaskToReadyList+0xd4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d903      	bls.n	8003914 <prvAddNewTaskToReadyList+0x74>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <prvAddNewTaskToReadyList+0xd4>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <prvAddNewTaskToReadyList+0xd8>)
 8003922:	441a      	add	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f7ff f8d1 	bl	8002ad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003930:	f001 f9cc 	bl	8004ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <prvAddNewTaskToReadyList+0xcc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	429a      	cmp	r2, r3
 8003948:	d207      	bcs.n	800395a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <prvAddNewTaskToReadyList+0xdc>)
 800394c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000e28 	.word	0x20000e28
 8003968:	20000954 	.word	0x20000954
 800396c:	20000e34 	.word	0x20000e34
 8003970:	20000e44 	.word	0x20000e44
 8003974:	20000e30 	.word	0x20000e30
 8003978:	20000958 	.word	0x20000958
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <vTaskDelay+0x60>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <vTaskDelay+0x30>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60bb      	str	r3, [r7, #8]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039b0:	f000 f88a 	bl	8003ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039b4:	2100      	movs	r1, #0
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fd04 	bl	80043c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039bc:	f000 f892 	bl	8003ae4 <xTaskResumeAll>
 80039c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <vTaskDelay+0x64>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000e50 	.word	0x20000e50
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039f6:	463a      	mov	r2, r7
 80039f8:	1d39      	adds	r1, r7, #4
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff f80a 	bl	8002a18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	9202      	str	r2, [sp, #8]
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	460a      	mov	r2, r1
 8003a16:	4924      	ldr	r1, [pc, #144]	; (8003aa8 <vTaskStartScheduler+0xc0>)
 8003a18:	4824      	ldr	r0, [pc, #144]	; (8003aac <vTaskStartScheduler+0xc4>)
 8003a1a:	f7ff fe01 	bl	8003620 <xTaskCreateStatic>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <vTaskStartScheduler+0xc8>)
 8003a22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <vTaskStartScheduler+0xc8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e001      	b.n	8003a36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a3c:	f000 fd16 	bl	800446c <xTimerCreateTimerTask>
 8003a40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d11b      	bne.n	8003a80 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	613b      	str	r3, [r7, #16]
}
 8003a5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <vTaskStartScheduler+0xcc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3354      	adds	r3, #84	; 0x54
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <vTaskStartScheduler+0xd0>)
 8003a64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <vTaskStartScheduler+0xd4>)
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <vTaskStartScheduler+0xd8>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <vTaskStartScheduler+0xdc>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a7a:	f001 f885 	bl	8004b88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a7e:	e00e      	b.n	8003a9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a86:	d10a      	bne.n	8003a9e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <vTaskStartScheduler+0xb4>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08005d18 	.word	0x08005d18
 8003aac:	080040f1 	.word	0x080040f1
 8003ab0:	20000e4c 	.word	0x20000e4c
 8003ab4:	20000954 	.word	0x20000954
 8003ab8:	20000038 	.word	0x20000038
 8003abc:	20000e48 	.word	0x20000e48
 8003ac0:	20000e34 	.word	0x20000e34
 8003ac4:	20000e2c 	.word	0x20000e2c

08003ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <vTaskSuspendAll+0x18>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <vTaskSuspendAll+0x18>)
 8003ad4:	6013      	str	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000e50 	.word	0x20000e50

08003ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <xTaskResumeAll+0x118>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xTaskResumeAll+0x2c>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	603b      	str	r3, [r7, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b10:	f001 f8ac 	bl	8004c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <xTaskResumeAll+0x118>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <xTaskResumeAll+0x118>)
 8003b1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <xTaskResumeAll+0x118>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d162      	bne.n	8003bec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <xTaskResumeAll+0x11c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d05e      	beq.n	8003bec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b2e:	e02f      	b.n	8003b90 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <xTaskResumeAll+0x120>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f823 	bl	8002b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f81e 	bl	8002b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <xTaskResumeAll+0x124>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d903      	bls.n	8003b60 <xTaskResumeAll+0x7c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <xTaskResumeAll+0x124>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <xTaskResumeAll+0x128>)
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7fe ffab 	bl	8002ad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <xTaskResumeAll+0x12c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b8a:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <xTaskResumeAll+0x130>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <xTaskResumeAll+0x120>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1cb      	bne.n	8003b30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b9e:	f000 fb61 	bl	8004264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <xTaskResumeAll+0x134>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bae:	f000 f845 	bl	8003c3c <xTaskIncrementTick>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <xTaskResumeAll+0x130>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f1      	bne.n	8003bae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <xTaskResumeAll+0x134>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <xTaskResumeAll+0x130>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <xTaskResumeAll+0x138>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bec:	f001 f86e 	bl	8004ccc <vPortExitCritical>

	return xAlreadyYielded;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000e50 	.word	0x20000e50
 8003c00:	20000e28 	.word	0x20000e28
 8003c04:	20000de8 	.word	0x20000de8
 8003c08:	20000e30 	.word	0x20000e30
 8003c0c:	20000958 	.word	0x20000958
 8003c10:	20000954 	.word	0x20000954
 8003c14:	20000e3c 	.word	0x20000e3c
 8003c18:	20000e38 	.word	0x20000e38
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <xTaskGetTickCount+0x18>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c2c:	687b      	ldr	r3, [r7, #4]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	20000e2c 	.word	0x20000e2c

08003c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c46:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <xTaskIncrementTick+0x150>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 808e 	bne.w	8003d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c50:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <xTaskIncrementTick+0x154>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c58:	4a4d      	ldr	r2, [pc, #308]	; (8003d90 <xTaskIncrementTick+0x154>)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d120      	bne.n	8003ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <xTaskIncrementTick+0x158>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xTaskIncrementTick+0x46>
 8003c84:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <xTaskIncrementTick+0x158>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <xTaskIncrementTick+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <xTaskIncrementTick+0x158>)
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <xTaskIncrementTick+0x15c>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <xTaskIncrementTick+0x160>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <xTaskIncrementTick+0x160>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	f000 fadf 	bl	8004264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <xTaskIncrementTick+0x164>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d34e      	bcc.n	8003d4e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb0:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <xTaskIncrementTick+0x158>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <xTaskIncrementTick+0x82>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <xTaskIncrementTick+0x84>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc4:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <xTaskIncrementTick+0x164>)
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cca:	601a      	str	r2, [r3, #0]
					break;
 8003ccc:	e03f      	b.n	8003d4e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <xTaskIncrementTick+0x158>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d203      	bcs.n	8003cee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ce6:	4a2e      	ldr	r2, [pc, #184]	; (8003da0 <xTaskIncrementTick+0x164>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6013      	str	r3, [r2, #0]
						break;
 8003cec:	e02f      	b.n	8003d4e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe ff48 	bl	8002b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3318      	adds	r3, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe ff3f 	bl	8002b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <xTaskIncrementTick+0x168>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d903      	bls.n	8003d1e <xTaskIncrementTick+0xe2>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <xTaskIncrementTick+0x168>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <xTaskIncrementTick+0x16c>)
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7fe fecc 	bl	8002ad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <xTaskIncrementTick+0x170>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3b3      	bcc.n	8003cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d4c:	e7b0      	b.n	8003cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <xTaskIncrementTick+0x170>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4914      	ldr	r1, [pc, #80]	; (8003da8 <xTaskIncrementTick+0x16c>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d907      	bls.n	8003d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e004      	b.n	8003d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <xTaskIncrementTick+0x174>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <xTaskIncrementTick+0x174>)
 8003d74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <xTaskIncrementTick+0x178>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d82:	697b      	ldr	r3, [r7, #20]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000e50 	.word	0x20000e50
 8003d90:	20000e2c 	.word	0x20000e2c
 8003d94:	20000de0 	.word	0x20000de0
 8003d98:	20000de4 	.word	0x20000de4
 8003d9c:	20000e40 	.word	0x20000e40
 8003da0:	20000e48 	.word	0x20000e48
 8003da4:	20000e30 	.word	0x20000e30
 8003da8:	20000958 	.word	0x20000958
 8003dac:	20000954 	.word	0x20000954
 8003db0:	20000e38 	.word	0x20000e38
 8003db4:	20000e3c 	.word	0x20000e3c

08003db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <vTaskSwitchContext+0xb0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <vTaskSwitchContext+0xb4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dcc:	e046      	b.n	8003e5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <vTaskSwitchContext+0xb4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <vTaskSwitchContext+0xb8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e010      	b.n	8003dfe <vTaskSwitchContext+0x46>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	607b      	str	r3, [r7, #4]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <vTaskSwitchContext+0x3e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	491d      	ldr	r1, [pc, #116]	; (8003e74 <vTaskSwitchContext+0xbc>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0e4      	beq.n	8003ddc <vTaskSwitchContext+0x24>
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <vTaskSwitchContext+0xbc>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3308      	adds	r3, #8
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d104      	bne.n	8003e42 <vTaskSwitchContext+0x8a>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <vTaskSwitchContext+0xc0>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <vTaskSwitchContext+0xb8>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <vTaskSwitchContext+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3354      	adds	r3, #84	; 0x54
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <vTaskSwitchContext+0xc4>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000e50 	.word	0x20000e50
 8003e6c:	20000e3c 	.word	0x20000e3c
 8003e70:	20000e30 	.word	0x20000e30
 8003e74:	20000958 	.word	0x20000958
 8003e78:	20000954 	.word	0x20000954
 8003e7c:	20000038 	.word	0x20000038

08003e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <vTaskPlaceOnEventList+0x44>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3318      	adds	r3, #24
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe fe32 	bl	8002b18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	f000 fa84 	bl	80043c4 <prvAddCurrentTaskToDelayedList>
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000954 	.word	0x20000954

08003ec8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	617b      	str	r3, [r7, #20]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7fe fdea 	bl	8002ad2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	68b8      	ldr	r0, [r7, #8]
 8003f0e:	f000 fa59 	bl	80043c4 <prvAddCurrentTaskToDelayedList>
	}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000954 	.word	0x20000954

08003f20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60fb      	str	r3, [r7, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3318      	adds	r3, #24
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fe19 	bl	8002b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <xTaskRemoveFromEventList+0xb0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11d      	bne.n	8003f9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fe10 	bl	8002b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <xTaskRemoveFromEventList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <xTaskRemoveFromEventList+0x5c>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <xTaskRemoveFromEventList+0xb4>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <xTaskRemoveFromEventList+0xb8>)
 8003f8a:	441a      	add	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fe fd9d 	bl	8002ad2 <vListInsertEnd>
 8003f98:	e005      	b.n	8003fa6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3318      	adds	r3, #24
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480e      	ldr	r0, [pc, #56]	; (8003fdc <xTaskRemoveFromEventList+0xbc>)
 8003fa2:	f7fe fd96 	bl	8002ad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <xTaskRemoveFromEventList+0xc0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d905      	bls.n	8003fc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <xTaskRemoveFromEventList+0xc4>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e001      	b.n	8003fc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003fc4:	697b      	ldr	r3, [r7, #20]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000e50 	.word	0x20000e50
 8003fd4:	20000e30 	.word	0x20000e30
 8003fd8:	20000958 	.word	0x20000958
 8003fdc:	20000de8 	.word	0x20000de8
 8003fe0:	20000954 	.word	0x20000954
 8003fe4:	20000e3c 	.word	0x20000e3c

08003fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <vTaskInternalSetTimeOutState+0x24>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <vTaskInternalSetTimeOutState+0x28>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	605a      	str	r2, [r3, #4]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000e40 	.word	0x20000e40
 8004010:	20000e2c 	.word	0x20000e2c

08004014 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004056:	f000 fe09 	bl	8004c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskCheckForTimeOut+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004072:	d102      	bne.n	800407a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e023      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <xTaskCheckForTimeOut+0xc0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d007      	beq.n	8004096 <xTaskCheckForTimeOut+0x82>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e015      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d20b      	bcs.n	80040b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff9b 	bl	8003fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e004      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040c2:	f000 fe03 	bl	8004ccc <vPortExitCritical>

	return xReturn;
 80040c6:	69fb      	ldr	r3, [r7, #28]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000e2c 	.word	0x20000e2c
 80040d4:	20000e40 	.word	0x20000e40

080040d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <vTaskMissedYield+0x14>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000e3c 	.word	0x20000e3c

080040f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f8:	f000 f852 	bl	80041a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvIdleTask+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d9f9      	bls.n	80040f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <prvIdleTask+0x2c>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004114:	e7f0      	b.n	80040f8 <prvIdleTask+0x8>
 8004116:	bf00      	nop
 8004118:	20000958 	.word	0x20000958
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e00c      	b.n	8004146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <prvInitialiseTaskLists+0x60>)
 8004138:	4413      	add	r3, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fc9e 	bl	8002a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b37      	cmp	r3, #55	; 0x37
 800414a:	d9ef      	bls.n	800412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800414c:	480d      	ldr	r0, [pc, #52]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800414e:	f7fe fc95 	bl	8002a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004152:	480d      	ldr	r0, [pc, #52]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004154:	f7fe fc92 	bl	8002a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <prvInitialiseTaskLists+0x6c>)
 800415a:	f7fe fc8f 	bl	8002a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800415e:	480c      	ldr	r0, [pc, #48]	; (8004190 <prvInitialiseTaskLists+0x70>)
 8004160:	f7fe fc8c 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <prvInitialiseTaskLists+0x74>)
 8004166:	f7fe fc89 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <prvInitialiseTaskLists+0x78>)
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <prvInitialiseTaskLists+0x7c>)
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000958 	.word	0x20000958
 8004184:	20000db8 	.word	0x20000db8
 8004188:	20000dcc 	.word	0x20000dcc
 800418c:	20000de8 	.word	0x20000de8
 8004190:	20000dfc 	.word	0x20000dfc
 8004194:	20000e14 	.word	0x20000e14
 8004198:	20000de0 	.word	0x20000de0
 800419c:	20000de4 	.word	0x20000de4

080041a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a6:	e019      	b.n	80041dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a8:	f000 fd60 	bl	8004c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <prvCheckTasksWaitingTermination+0x50>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fce5 	bl	8002b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d2:	f000 fd7b 	bl	8004ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f810 	bl	80041fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000dfc 	.word	0x20000dfc
 80041f4:	20000e28 	.word	0x20000e28
 80041f8:	20000e10 	.word	0x20000e10

080041fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3354      	adds	r3, #84	; 0x54
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f8eb 	bl	80053e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fee9 	bl	8004ff4 <vPortFree>
				vPortFree( pxTCB );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fee6 	bl	8004ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004228:	e018      	b.n	800425c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004230:	2b01      	cmp	r3, #1
 8004232:	d103      	bne.n	800423c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fedd 	bl	8004ff4 <vPortFree>
	}
 800423a:	e00f      	b.n	800425c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004242:	2b02      	cmp	r3, #2
 8004244:	d00a      	beq.n	800425c <prvDeleteTCB+0x60>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <prvDeleteTCB+0x5e>
	}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <prvResetNextTaskUnblockTime+0x40>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <prvResetNextTaskUnblockTime+0x14>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <prvResetNextTaskUnblockTime+0x16>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <prvResetNextTaskUnblockTime+0x44>)
 8004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004284:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004286:	e008      	b.n	800429a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <prvResetNextTaskUnblockTime+0x40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <prvResetNextTaskUnblockTime+0x44>)
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	20000de0 	.word	0x20000de0
 80042a8:	20000e48 	.word	0x20000e48

080042ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <xTaskGetSchedulerState+0x34>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ba:	2301      	movs	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	e008      	b.n	80042d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <xTaskGetSchedulerState+0x38>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c8:	2302      	movs	r3, #2
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e001      	b.n	80042d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042d2:	687b      	ldr	r3, [r7, #4]
	}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000e34 	.word	0x20000e34
 80042e4:	20000e50 	.word	0x20000e50

080042e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d056      	beq.n	80043ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042fe:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <xTaskPriorityDisinherit+0xd0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d00a      	beq.n	800431e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60fb      	str	r3, [r7, #12]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60bb      	str	r3, [r7, #8]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	429a      	cmp	r2, r3
 8004350:	d02c      	beq.n	80043ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	2b00      	cmp	r3, #0
 8004358:	d128      	bne.n	80043ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3304      	adds	r3, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fc12 	bl	8002b88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <xTaskPriorityDisinherit+0xd4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d903      	bls.n	800438c <xTaskPriorityDisinherit+0xa4>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <xTaskPriorityDisinherit+0xd4>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <xTaskPriorityDisinherit+0xd8>)
 800439a:	441a      	add	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe fb95 	bl	8002ad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043ac:	697b      	ldr	r3, [r7, #20]
	}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000954 	.word	0x20000954
 80043bc:	20000e30 	.word	0x20000e30
 80043c0:	20000958 	.word	0x20000958

080043c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <prvAddCurrentTaskToDelayedList+0x90>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fbd4 	bl	8002b88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	d10a      	bne.n	80043fe <prvAddCurrentTaskToDelayedList+0x3a>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4819      	ldr	r0, [pc, #100]	; (800445c <prvAddCurrentTaskToDelayedList+0x98>)
 80043f8:	f7fe fb6b 	bl	8002ad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043fc:	e026      	b.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	429a      	cmp	r2, r3
 8004414:	d209      	bcs.n	800442a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fe fb78 	bl	8002b18 <vListInsert>
}
 8004428:	e010      	b.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f7fe fb6e 	bl	8002b18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d202      	bcs.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000e2c 	.word	0x20000e2c
 8004458:	20000954 	.word	0x20000954
 800445c:	20000e14 	.word	0x20000e14
 8004460:	20000de4 	.word	0x20000de4
 8004464:	20000de0 	.word	0x20000de0
 8004468:	20000e48 	.word	0x20000e48

0800446c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004476:	f000 facb 	bl	8004a10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <xTimerCreateTimerTask+0x80>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d021      	beq.n	80044c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800448a:	1d3a      	adds	r2, r7, #4
 800448c:	f107 0108 	add.w	r1, r7, #8
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fad7 	bl	8002a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	9202      	str	r2, [sp, #8]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2302      	movs	r3, #2
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2300      	movs	r3, #0
 80044aa:	460a      	mov	r2, r1
 80044ac:	4910      	ldr	r1, [pc, #64]	; (80044f0 <xTimerCreateTimerTask+0x84>)
 80044ae:	4811      	ldr	r0, [pc, #68]	; (80044f4 <xTimerCreateTimerTask+0x88>)
 80044b0:	f7ff f8b6 	bl	8003620 <xTaskCreateStatic>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <xTimerCreateTimerTask+0x8c>)
 80044b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <xTimerCreateTimerTask+0x8c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	613b      	str	r3, [r7, #16]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044e2:	697b      	ldr	r3, [r7, #20]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000e84 	.word	0x20000e84
 80044f0:	08005d20 	.word	0x08005d20
 80044f4:	08004619 	.word	0x08004619
 80044f8:	20000e88 	.word	0x20000e88

080044fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <xTimerGenericCommand+0x98>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02a      	beq.n	8004588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	dc18      	bgt.n	8004576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004544:	f7ff feb2 	bl	80042ac <xTaskGetSchedulerState>
 8004548:	4603      	mov	r3, r0
 800454a:	2b02      	cmp	r3, #2
 800454c:	d109      	bne.n	8004562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <xTimerGenericCommand+0x98>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f107 0110 	add.w	r1, r7, #16
 8004556:	2300      	movs	r3, #0
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	f7fe fc7f 	bl	8002e5c <xQueueGenericSend>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24
 8004560:	e012      	b.n	8004588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <xTimerGenericCommand+0x98>)
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f107 0110 	add.w	r1, r7, #16
 800456a:	2300      	movs	r3, #0
 800456c:	2200      	movs	r2, #0
 800456e:	f7fe fc75 	bl	8002e5c <xQueueGenericSend>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
 8004574:	e008      	b.n	8004588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <xTimerGenericCommand+0x98>)
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	f107 0110 	add.w	r1, r7, #16
 800457e:	2300      	movs	r3, #0
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	f7fe fd69 	bl	8003058 <xQueueGenericSendFromISR>
 8004586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800458a:	4618      	mov	r0, r3
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000e84 	.word	0x20000e84

08004598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <prvProcessExpiredTimer+0x7c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fae9 	bl	8002b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d122      	bne.n	8004604 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	18d1      	adds	r1, r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	6978      	ldr	r0, [r7, #20]
 80045cc:	f000 f8c8 	bl	8004760 <prvInsertTimerInActiveList>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045d6:	2300      	movs	r3, #0
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	2100      	movs	r1, #0
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f7ff ff8b 	bl	80044fc <xTimerGenericCommand>
 80045e6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	6978      	ldr	r0, [r7, #20]
 800460a:	4798      	blx	r3
}
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000e7c 	.word	0x20000e7c

08004618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f857 	bl	80046d8 <prvGetNextExpireTime>
 800462a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4619      	mov	r1, r3
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f803 	bl	800463c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004636:	f000 f8d5 	bl	80047e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800463a:	e7f1      	b.n	8004620 <prvTimerTask+0x8>

0800463c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004646:	f7ff fa3f 	bl	8003ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800464a:	f107 0308 	add.w	r3, r7, #8
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f866 	bl	8004720 <prvSampleTimeNow>
 8004654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d130      	bne.n	80046be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <prvProcessTimerOrBlockTask+0x3c>
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	429a      	cmp	r2, r3
 8004668:	d806      	bhi.n	8004678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800466a:	f7ff fa3b 	bl	8003ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff91 	bl	8004598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004676:	e024      	b.n	80046c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <prvProcessTimerOrBlockTask+0x90>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <prvProcessTimerOrBlockTask+0x94>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	f7fe ff8b 	bl	80035b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046a2:	f7ff fa1f 	bl	8003ae4 <xTaskResumeAll>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <prvProcessTimerOrBlockTask+0x98>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
}
 80046bc:	e001      	b.n	80046c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046be:	f7ff fa11 	bl	8003ae4 <xTaskResumeAll>
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000e80 	.word	0x20000e80
 80046d0:	20000e84 	.word	0x20000e84
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <prvGetNextExpireTime+0x44>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <prvGetNextExpireTime+0x44>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e001      	b.n	800470e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000e7c 	.word	0x20000e7c

08004720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004728:	f7ff fa7a 	bl	8003c20 <xTaskGetTickCount>
 800472c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <prvSampleTimeNow+0x3c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d205      	bcs.n	8004744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004738:	f000 f908 	bl	800494c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e002      	b.n	800474a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <prvSampleTimeNow+0x3c>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004750:	68fb      	ldr	r3, [r7, #12]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000e8c 	.word	0x20000e8c

08004760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d812      	bhi.n	80047ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e01b      	b.n	80047d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <prvInsertTimerInActiveList+0x7c>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe f9b7 	bl	8002b18 <vListInsert>
 80047aa:	e012      	b.n	80047d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d206      	bcs.n	80047c2 <prvInsertTimerInActiveList+0x62>
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e007      	b.n	80047d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <prvInsertTimerInActiveList+0x80>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7fe f9a3 	bl	8002b18 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047d2:	697b      	ldr	r3, [r7, #20]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000e80 	.word	0x20000e80
 80047e0:	20000e7c 	.word	0x20000e7c

080047e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	; 0x38
 80047e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ea:	e09d      	b.n	8004928 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da18      	bge.n	8004824 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	3304      	adds	r3, #4
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	61fb      	str	r3, [r7, #28]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481a:	6850      	ldr	r0, [r2, #4]
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	6892      	ldr	r2, [r2, #8]
 8004820:	4611      	mov	r1, r2
 8004822:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db7d      	blt.n	8004926 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	3304      	adds	r3, #4
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f9a4 	bl	8002b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004840:	463b      	mov	r3, r7
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff6c 	bl	8004720 <prvSampleTimeNow>
 8004848:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b09      	cmp	r3, #9
 800484e:	d86b      	bhi.n	8004928 <prvProcessReceivedCommands+0x144>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <prvProcessReceivedCommands+0x74>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	08004881 	.word	0x08004881
 800485c:	08004881 	.word	0x08004881
 8004860:	08004881 	.word	0x08004881
 8004864:	08004929 	.word	0x08004929
 8004868:	080048dd 	.word	0x080048dd
 800486c:	08004915 	.word	0x08004915
 8004870:	08004881 	.word	0x08004881
 8004874:	08004881 	.word	0x08004881
 8004878:	08004929 	.word	0x08004929
 800487c:	080048dd 	.word	0x080048dd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	18d1      	adds	r1, r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488e:	f7ff ff67 	bl	8004760 <prvInsertTimerInActiveList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d047      	beq.n	8004928 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d13f      	bne.n	8004928 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	441a      	add	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ba:	f7ff fe1f 	bl	80044fc <xTimerGenericCommand>
 80048be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d130      	bne.n	8004928 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61bb      	str	r3, [r7, #24]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	617b      	str	r3, [r7, #20]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	18d1      	adds	r1, r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490e:	f7ff ff27 	bl	8004760 <prvInsertTimerInActiveList>
					break;
 8004912:	e009      	b.n	8004928 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800491e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004920:	f000 fb68 	bl	8004ff4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004924:	e000      	b.n	8004928 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004926:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <prvProcessReceivedCommands+0x164>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1d39      	adds	r1, r7, #4
 800492e:	2200      	movs	r2, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fc29 	bl	8003188 <xQueueReceive>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	f47f af57 	bne.w	80047ec <prvProcessReceivedCommands+0x8>
	}
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	3730      	adds	r7, #48	; 0x30
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000e84 	.word	0x20000e84

0800494c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004952:	e045      	b.n	80049e0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004954:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800495e:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe f90b 	bl	8002b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d12e      	bne.n	80049e0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d90e      	bls.n	80049b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe f8b4 	bl	8002b18 <vListInsert>
 80049b0:	e016      	b.n	80049e0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049b2:	2300      	movs	r3, #0
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2300      	movs	r3, #0
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	2100      	movs	r1, #0
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fd9d 	bl	80044fc <xTimerGenericCommand>
 80049c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	603b      	str	r3, [r7, #0]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1b4      	bne.n	8004954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <prvSwitchTimerLists+0xc0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <prvSwitchTimerLists+0xbc>)
 80049f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvSwitchTimerLists+0xc0>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000e7c 	.word	0x20000e7c
 8004a0c:	20000e80 	.word	0x20000e80

08004a10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a16:	f000 f929 	bl	8004c6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d120      	bne.n	8004a64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a22:	4814      	ldr	r0, [pc, #80]	; (8004a74 <prvCheckForValidListAndQueue+0x64>)
 8004a24:	f7fe f82a 	bl	8002a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a28:	4813      	ldr	r0, [pc, #76]	; (8004a78 <prvCheckForValidListAndQueue+0x68>)
 8004a2a:	f7fe f827 	bl	8002a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <prvCheckForValidListAndQueue+0x6c>)
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <prvCheckForValidListAndQueue+0x64>)
 8004a32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <prvCheckForValidListAndQueue+0x70>)
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <prvCheckForValidListAndQueue+0x68>)
 8004a38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <prvCheckForValidListAndQueue+0x74>)
 8004a40:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <prvCheckForValidListAndQueue+0x78>)
 8004a42:	2110      	movs	r1, #16
 8004a44:	200a      	movs	r0, #10
 8004a46:	f7fe f931 	bl	8002cac <xQueueGenericCreateStatic>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	490b      	ldr	r1, [pc, #44]	; (8004a8c <prvCheckForValidListAndQueue+0x7c>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fd82 	bl	8003568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a64:	f000 f932 	bl	8004ccc <vPortExitCritical>
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000e84 	.word	0x20000e84
 8004a74:	20000e54 	.word	0x20000e54
 8004a78:	20000e68 	.word	0x20000e68
 8004a7c:	20000e7c 	.word	0x20000e7c
 8004a80:	20000e80 	.word	0x20000e80
 8004a84:	20000f30 	.word	0x20000f30
 8004a88:	20000e90 	.word	0x20000e90
 8004a8c:	08005d28 	.word	0x08005d28

08004a90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b04      	subs	r3, #4
 8004aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3b04      	subs	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <pxPortInitialiseStack+0x54>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b14      	subs	r3, #20
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b20      	subs	r3, #32
 8004ad6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	08004ae9 	.word	0x08004ae9

08004ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <prvTaskExitError+0x54>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	d00a      	beq.n	8004b12 <prvTaskExitError+0x2a>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <prvTaskExitError+0x28>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b26:	bf00      	nop
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0fc      	beq.n	8004b28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000034 	.word	0x20000034

08004b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <pxCurrentTCBConst2>)
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	6808      	ldr	r0, [r1, #0]
 8004b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b4a:	f380 8809 	msr	PSP, r0
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8811 	msr	BASEPRI, r0
 8004b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b5e:	4770      	bx	lr

08004b60 <pxCurrentTCBConst2>:
 8004b60:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop

08004b68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <prvPortStartFirstTask+0x1c>)
 8004b6a:	6800      	ldr	r0, [r0, #0]
 8004b6c:	6800      	ldr	r0, [r0, #0]
 8004b6e:	f380 8808 	msr	MSP, r0
 8004b72:	b662      	cpsie	i
 8004b74:	b661      	cpsie	f
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	df00      	svc	0
 8004b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b82:	bf00      	nop
 8004b84:	e000ed08 	.word	0xe000ed08

08004b88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b8e:	4b32      	ldr	r3, [pc, #200]	; (8004c58 <xPortStartScheduler+0xd0>)
 8004b90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <xPortStartScheduler+0xd4>)
 8004bb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004bb8:	2207      	movs	r2, #7
 8004bba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bbc:	e009      	b.n	8004bd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004bbe:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004bc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d0ef      	beq.n	8004bbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1c3 0307 	rsb	r3, r3, #7
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d00a      	beq.n	8004c00 <xPortStartScheduler+0x78>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60bb      	str	r3, [r7, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004c08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <xPortStartScheduler+0xd8>)
 8004c14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <xPortStartScheduler+0xdc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <xPortStartScheduler+0xdc>)
 8004c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <xPortStartScheduler+0xdc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <xPortStartScheduler+0xdc>)
 8004c30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c36:	f000 f8b9 	bl	8004dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <xPortStartScheduler+0xe0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c40:	f7ff ff92 	bl	8004b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c44:	f7ff f8b8 	bl	8003db8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c48:	f7ff ff4e 	bl	8004ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000e400 	.word	0xe000e400
 8004c5c:	20000f80 	.word	0x20000f80
 8004c60:	20000f84 	.word	0x20000f84
 8004c64:	e000ed20 	.word	0xe000ed20
 8004c68:	20000034 	.word	0x20000034

08004c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
}
 8004c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <vPortEnterCritical+0x58>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <vPortEnterCritical+0x58>)
 8004c8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <vPortEnterCritical+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10f      	bne.n	8004cb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <vPortEnterCritical+0x5c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	603b      	str	r3, [r7, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vPortEnterCritical+0x4a>
	}
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000034 	.word	0x20000034
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <vPortExitCritical+0x4c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <vPortExitCritical+0x24>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	607b      	str	r3, [r7, #4]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <vPortExitCritical+0x4c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <vPortExitCritical+0x4c>)
 8004cf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <vPortExitCritical+0x4c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <vPortExitCritical+0x42>
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f383 8811 	msr	BASEPRI, r3
}
 8004d0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	20000034 	.word	0x20000034
 8004d1c:	00000000 	.word	0x00000000

08004d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d20:	f3ef 8009 	mrs	r0, PSP
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <pxCurrentTCBConst>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d30:	6010      	str	r0, [r2, #0]
 8004d32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d3a:	f380 8811 	msr	BASEPRI, r0
 8004d3e:	f7ff f83b 	bl	8003db8 <vTaskSwitchContext>
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d56:	f380 8809 	msr	PSP, r0
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	4770      	bx	lr

08004d60 <pxCurrentTCBConst>:
 8004d60:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f7fe ff5b 	bl	8003c3c <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SysTick_Handler+0x40>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <vPortSetupTimerInterrupt+0x30>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <vPortSetupTimerInterrupt+0x38>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <vPortSetupTimerInterrupt+0x3c>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <vPortSetupTimerInterrupt+0x40>)
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dce:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <vPortSetupTimerInterrupt+0x30>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	e000e010 	.word	0xe000e010
 8004de0:	e000e018 	.word	0xe000e018
 8004de4:	20000028 	.word	0x20000028
 8004de8:	10624dd3 	.word	0x10624dd3
 8004dec:	e000e014 	.word	0xe000e014

08004df0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
 8004dfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d914      	bls.n	8004e2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e02:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <vPortValidateInterruptPriority+0x6c>)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <vPortValidateInterruptPriority+0x70>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	7afa      	ldrb	r2, [r7, #11]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d20a      	bcs.n	8004e2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	607b      	str	r3, [r7, #4]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <vPortValidateInterruptPriority+0x74>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <vPortValidateInterruptPriority+0x78>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d90a      	bls.n	8004e52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	603b      	str	r3, [r7, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <vPortValidateInterruptPriority+0x60>
	}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	e000e3f0 	.word	0xe000e3f0
 8004e60:	20000f80 	.word	0x20000f80
 8004e64:	e000ed0c 	.word	0xe000ed0c
 8004e68:	20000f84 	.word	0x20000f84

08004e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e78:	f7fe fe26 	bl	8003ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e7c:	4b58      	ldr	r3, [pc, #352]	; (8004fe0 <pvPortMalloc+0x174>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e84:	f000 f910 	bl	80050a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e88:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <pvPortMalloc+0x178>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 808e 	bne.w	8004fb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01d      	beq.n	8004ed8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f023 0307 	bic.w	r3, r3, #7
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	617b      	str	r3, [r7, #20]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d069      	beq.n	8004fb2 <pvPortMalloc+0x146>
 8004ede:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <pvPortMalloc+0x17c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d864      	bhi.n	8004fb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <pvPortMalloc+0x180>)
 8004eea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004eec:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <pvPortMalloc+0x180>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef2:	e004      	b.n	8004efe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d903      	bls.n	8004f10 <pvPortMalloc+0xa4>
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f1      	bne.n	8004ef4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <pvPortMalloc+0x174>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d04b      	beq.n	8004fb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2208      	movs	r2, #8
 8004f20:	4413      	add	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	2308      	movs	r3, #8
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d91f      	bls.n	8004f7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <pvPortMalloc+0xf8>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	613b      	str	r3, [r7, #16]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad2      	subs	r2, r2, r3
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f76:	69b8      	ldr	r0, [r7, #24]
 8004f78:	f000 f8f8 	bl	800516c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <pvPortMalloc+0x17c>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <pvPortMalloc+0x17c>)
 8004f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f8a:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <pvPortMalloc+0x17c>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <pvPortMalloc+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d203      	bcs.n	8004f9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <pvPortMalloc+0x17c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <pvPortMalloc+0x184>)
 8004f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <pvPortMalloc+0x178>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fb2:	f7fe fd97 	bl	8003ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <pvPortMalloc+0x16a>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <pvPortMalloc+0x168>
	return pvReturn;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20002ed0 	.word	0x20002ed0
 8004fe4:	20002edc 	.word	0x20002edc
 8004fe8:	20002ed4 	.word	0x20002ed4
 8004fec:	20002ec8 	.word	0x20002ec8
 8004ff0:	20002ed8 	.word	0x20002ed8

08004ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d048      	beq.n	8005098 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005006:	2308      	movs	r3, #8
 8005008:	425b      	negs	r3, r3
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <vPortFree+0xac>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <vPortFree+0x44>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	60fb      	str	r3, [r7, #12]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <vPortFree+0x62>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60bb      	str	r3, [r7, #8]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <vPortFree+0xac>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d019      	beq.n	8005098 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d115      	bne.n	8005098 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortFree+0xac>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800507c:	f7fe fd24 	bl	8003ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <vPortFree+0xb0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4413      	add	r3, r2
 800508a:	4a06      	ldr	r2, [pc, #24]	; (80050a4 <vPortFree+0xb0>)
 800508c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f000 f86c 	bl	800516c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005094:	f7fe fd26 	bl	8003ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20002edc 	.word	0x20002edc
 80050a4:	20002ed4 	.word	0x20002ed4

080050a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ae:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80050b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050b4:	4b27      	ldr	r3, [pc, #156]	; (8005154 <prvHeapInit+0xac>)
 80050b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3307      	adds	r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <prvHeapInit+0xac>)
 80050d8:	4413      	add	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <prvHeapInit+0xb0>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050e6:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <prvHeapInit+0xb0>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4413      	add	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050f4:	2208      	movs	r2, #8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <prvHeapInit+0xb4>)
 8005108:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800510a:	4b14      	ldr	r3, [pc, #80]	; (800515c <prvHeapInit+0xb4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <prvHeapInit+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <prvHeapInit+0xb4>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <prvHeapInit+0xb8>)
 8005136:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a09      	ldr	r2, [pc, #36]	; (8005164 <prvHeapInit+0xbc>)
 800513e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <prvHeapInit+0xc0>)
 8005142:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005146:	601a      	str	r2, [r3, #0]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000f88 	.word	0x20000f88
 8005158:	20002ec8 	.word	0x20002ec8
 800515c:	20002ed0 	.word	0x20002ed0
 8005160:	20002ed8 	.word	0x20002ed8
 8005164:	20002ed4 	.word	0x20002ed4
 8005168:	20002edc 	.word	0x20002edc

0800516c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005174:	4b27      	ldr	r3, [pc, #156]	; (8005214 <prvInsertBlockIntoFreeList+0xa8>)
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e002      	b.n	8005180 <prvInsertBlockIntoFreeList+0x14>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d8f7      	bhi.n	800517a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4413      	add	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d108      	bne.n	80051ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	441a      	add	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d118      	bne.n	80051f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvInsertBlockIntoFreeList+0xac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d00d      	beq.n	80051ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e008      	b.n	80051fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <prvInsertBlockIntoFreeList+0xac>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e003      	b.n	80051fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d002      	beq.n	800520a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	20002ec8 	.word	0x20002ec8
 8005218:	20002ed0 	.word	0x20002ed0

0800521c <__errno>:
 800521c:	4b01      	ldr	r3, [pc, #4]	; (8005224 <__errno+0x8>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000038 	.word	0x20000038

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	2600      	movs	r6, #0
 800522c:	4d0c      	ldr	r5, [pc, #48]	; (8005260 <__libc_init_array+0x38>)
 800522e:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	f000 fd1c 	bl	8005c74 <_init>
 800523c:	2600      	movs	r6, #0
 800523e:	4d0a      	ldr	r5, [pc, #40]	; (8005268 <__libc_init_array+0x40>)
 8005240:	4c0a      	ldr	r4, [pc, #40]	; (800526c <__libc_init_array+0x44>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	08005e84 	.word	0x08005e84
 8005264:	08005e84 	.word	0x08005e84
 8005268:	08005e84 	.word	0x08005e84
 800526c:	08005e88 	.word	0x08005e88

08005270 <__retarget_lock_acquire_recursive>:
 8005270:	4770      	bx	lr

08005272 <__retarget_lock_release_recursive>:
 8005272:	4770      	bx	lr

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	4291      	cmp	r1, r2
 8005288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <memset>:
 8005290:	4603      	mov	r3, r0
 8005292:	4402      	add	r2, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <sbrk_aligned>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4e0e      	ldr	r6, [pc, #56]	; (80052dc <sbrk_aligned+0x3c>)
 80052a4:	460c      	mov	r4, r1
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	4605      	mov	r5, r0
 80052aa:	b911      	cbnz	r1, 80052b2 <sbrk_aligned+0x12>
 80052ac:	f000 f8f6 	bl	800549c <_sbrk_r>
 80052b0:	6030      	str	r0, [r6, #0]
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f8f1 	bl	800549c <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d00a      	beq.n	80052d4 <sbrk_aligned+0x34>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d007      	beq.n	80052d8 <sbrk_aligned+0x38>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f8e6 	bl	800549c <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d101      	bne.n	80052d8 <sbrk_aligned+0x38>
 80052d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	20002ee8 	.word	0x20002ee8

080052e0 <_malloc_r>:
 80052e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4607      	mov	r7, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d905      	bls.n	8005308 <_malloc_r+0x28>
 80052fc:	230c      	movs	r3, #12
 80052fe:	2600      	movs	r6, #0
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4630      	mov	r0, r6
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	4e2e      	ldr	r6, [pc, #184]	; (80053c4 <_malloc_r+0xe4>)
 800530a:	f000 f90d 	bl	8005528 <__malloc_lock>
 800530e:	6833      	ldr	r3, [r6, #0]
 8005310:	461c      	mov	r4, r3
 8005312:	bb34      	cbnz	r4, 8005362 <_malloc_r+0x82>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	f7ff ffc2 	bl	80052a0 <sbrk_aligned>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	4604      	mov	r4, r0
 8005320:	d14d      	bne.n	80053be <_malloc_r+0xde>
 8005322:	6834      	ldr	r4, [r6, #0]
 8005324:	4626      	mov	r6, r4
 8005326:	2e00      	cmp	r6, #0
 8005328:	d140      	bne.n	80053ac <_malloc_r+0xcc>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	4631      	mov	r1, r6
 800532e:	4638      	mov	r0, r7
 8005330:	eb04 0803 	add.w	r8, r4, r3
 8005334:	f000 f8b2 	bl	800549c <_sbrk_r>
 8005338:	4580      	cmp	r8, r0
 800533a:	d13a      	bne.n	80053b2 <_malloc_r+0xd2>
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	3503      	adds	r5, #3
 8005340:	1a6d      	subs	r5, r5, r1
 8005342:	f025 0503 	bic.w	r5, r5, #3
 8005346:	3508      	adds	r5, #8
 8005348:	2d0c      	cmp	r5, #12
 800534a:	bf38      	it	cc
 800534c:	250c      	movcc	r5, #12
 800534e:	4638      	mov	r0, r7
 8005350:	4629      	mov	r1, r5
 8005352:	f7ff ffa5 	bl	80052a0 <sbrk_aligned>
 8005356:	3001      	adds	r0, #1
 8005358:	d02b      	beq.n	80053b2 <_malloc_r+0xd2>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	442b      	add	r3, r5
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	e00e      	b.n	8005380 <_malloc_r+0xa0>
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	1b52      	subs	r2, r2, r5
 8005366:	d41e      	bmi.n	80053a6 <_malloc_r+0xc6>
 8005368:	2a0b      	cmp	r2, #11
 800536a:	d916      	bls.n	800539a <_malloc_r+0xba>
 800536c:	1961      	adds	r1, r4, r5
 800536e:	42a3      	cmp	r3, r4
 8005370:	6025      	str	r5, [r4, #0]
 8005372:	bf18      	it	ne
 8005374:	6059      	strne	r1, [r3, #4]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	bf08      	it	eq
 800537a:	6031      	streq	r1, [r6, #0]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4638      	mov	r0, r7
 8005382:	f104 060b 	add.w	r6, r4, #11
 8005386:	f000 f8d5 	bl	8005534 <__malloc_unlock>
 800538a:	f026 0607 	bic.w	r6, r6, #7
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	1af2      	subs	r2, r6, r3
 8005392:	d0b6      	beq.n	8005302 <_malloc_r+0x22>
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	50a3      	str	r3, [r4, r2]
 8005398:	e7b3      	b.n	8005302 <_malloc_r+0x22>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	bf0c      	ite	eq
 80053a0:	6032      	streq	r2, [r6, #0]
 80053a2:	605a      	strne	r2, [r3, #4]
 80053a4:	e7ec      	b.n	8005380 <_malloc_r+0xa0>
 80053a6:	4623      	mov	r3, r4
 80053a8:	6864      	ldr	r4, [r4, #4]
 80053aa:	e7b2      	b.n	8005312 <_malloc_r+0x32>
 80053ac:	4634      	mov	r4, r6
 80053ae:	6876      	ldr	r6, [r6, #4]
 80053b0:	e7b9      	b.n	8005326 <_malloc_r+0x46>
 80053b2:	230c      	movs	r3, #12
 80053b4:	4638      	mov	r0, r7
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	f000 f8bc 	bl	8005534 <__malloc_unlock>
 80053bc:	e7a1      	b.n	8005302 <_malloc_r+0x22>
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	e7de      	b.n	8005380 <_malloc_r+0xa0>
 80053c2:	bf00      	nop
 80053c4:	20002ee4 	.word	0x20002ee4

080053c8 <cleanup_glue>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	460c      	mov	r4, r1
 80053cc:	6809      	ldr	r1, [r1, #0]
 80053ce:	4605      	mov	r5, r0
 80053d0:	b109      	cbz	r1, 80053d6 <cleanup_glue+0xe>
 80053d2:	f7ff fff9 	bl	80053c8 <cleanup_glue>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053de:	f000 b8af 	b.w	8005540 <_free_r>
	...

080053e4 <_reclaim_reent>:
 80053e4:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <_reclaim_reent+0xb4>)
 80053e6:	b570      	push	{r4, r5, r6, lr}
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4604      	mov	r4, r0
 80053ec:	4283      	cmp	r3, r0
 80053ee:	d051      	beq.n	8005494 <_reclaim_reent+0xb0>
 80053f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053f2:	b143      	cbz	r3, 8005406 <_reclaim_reent+0x22>
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d14a      	bne.n	8005490 <_reclaim_reent+0xac>
 80053fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	b111      	cbz	r1, 8005406 <_reclaim_reent+0x22>
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f89d 	bl	8005540 <_free_r>
 8005406:	6961      	ldr	r1, [r4, #20]
 8005408:	b111      	cbz	r1, 8005410 <_reclaim_reent+0x2c>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f898 	bl	8005540 <_free_r>
 8005410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005412:	b111      	cbz	r1, 800541a <_reclaim_reent+0x36>
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f893 	bl	8005540 <_free_r>
 800541a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800541c:	b111      	cbz	r1, 8005424 <_reclaim_reent+0x40>
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f88e 	bl	8005540 <_free_r>
 8005424:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005426:	b111      	cbz	r1, 800542e <_reclaim_reent+0x4a>
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f889 	bl	8005540 <_free_r>
 800542e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005430:	b111      	cbz	r1, 8005438 <_reclaim_reent+0x54>
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f884 	bl	8005540 <_free_r>
 8005438:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800543a:	b111      	cbz	r1, 8005442 <_reclaim_reent+0x5e>
 800543c:	4620      	mov	r0, r4
 800543e:	f000 f87f 	bl	8005540 <_free_r>
 8005442:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005444:	b111      	cbz	r1, 800544c <_reclaim_reent+0x68>
 8005446:	4620      	mov	r0, r4
 8005448:	f000 f87a 	bl	8005540 <_free_r>
 800544c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544e:	b111      	cbz	r1, 8005456 <_reclaim_reent+0x72>
 8005450:	4620      	mov	r0, r4
 8005452:	f000 f875 	bl	8005540 <_free_r>
 8005456:	69a3      	ldr	r3, [r4, #24]
 8005458:	b1e3      	cbz	r3, 8005494 <_reclaim_reent+0xb0>
 800545a:	4620      	mov	r0, r4
 800545c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800545e:	4798      	blx	r3
 8005460:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005462:	b1b9      	cbz	r1, 8005494 <_reclaim_reent+0xb0>
 8005464:	4620      	mov	r0, r4
 8005466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800546a:	f7ff bfad 	b.w	80053c8 <cleanup_glue>
 800546e:	5949      	ldr	r1, [r1, r5]
 8005470:	b941      	cbnz	r1, 8005484 <_reclaim_reent+0xa0>
 8005472:	3504      	adds	r5, #4
 8005474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005476:	2d80      	cmp	r5, #128	; 0x80
 8005478:	68d9      	ldr	r1, [r3, #12]
 800547a:	d1f8      	bne.n	800546e <_reclaim_reent+0x8a>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f85f 	bl	8005540 <_free_r>
 8005482:	e7ba      	b.n	80053fa <_reclaim_reent+0x16>
 8005484:	680e      	ldr	r6, [r1, #0]
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f85a 	bl	8005540 <_free_r>
 800548c:	4631      	mov	r1, r6
 800548e:	e7ef      	b.n	8005470 <_reclaim_reent+0x8c>
 8005490:	2500      	movs	r5, #0
 8005492:	e7ef      	b.n	8005474 <_reclaim_reent+0x90>
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	bf00      	nop
 8005498:	20000038 	.word	0x20000038

0800549c <_sbrk_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4d05      	ldr	r5, [pc, #20]	; (80054b8 <_sbrk_r+0x1c>)
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fb f9e4 	bl	8000874 <_sbrk>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_sbrk_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_sbrk_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20002eec 	.word	0x20002eec

080054bc <siprintf>:
 80054bc:	b40e      	push	{r1, r2, r3}
 80054be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054c2:	b500      	push	{lr}
 80054c4:	b09c      	sub	sp, #112	; 0x70
 80054c6:	ab1d      	add	r3, sp, #116	; 0x74
 80054c8:	9002      	str	r0, [sp, #8]
 80054ca:	9006      	str	r0, [sp, #24]
 80054cc:	9107      	str	r1, [sp, #28]
 80054ce:	9104      	str	r1, [sp, #16]
 80054d0:	4808      	ldr	r0, [pc, #32]	; (80054f4 <siprintf+0x38>)
 80054d2:	4909      	ldr	r1, [pc, #36]	; (80054f8 <siprintf+0x3c>)
 80054d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	a902      	add	r1, sp, #8
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	f000 f8d2 	bl	8005688 <_svfiprintf_r>
 80054e4:	2200      	movs	r2, #0
 80054e6:	9b02      	ldr	r3, [sp, #8]
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	b01c      	add	sp, #112	; 0x70
 80054ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f0:	b003      	add	sp, #12
 80054f2:	4770      	bx	lr
 80054f4:	20000038 	.word	0x20000038
 80054f8:	ffff0208 	.word	0xffff0208

080054fc <strstr>:
 80054fc:	780a      	ldrb	r2, [r1, #0]
 80054fe:	b570      	push	{r4, r5, r6, lr}
 8005500:	b96a      	cbnz	r2, 800551e <strstr+0x22>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	429a      	cmp	r2, r3
 8005506:	d109      	bne.n	800551c <strstr+0x20>
 8005508:	460c      	mov	r4, r1
 800550a:	4605      	mov	r5, r0
 800550c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f6      	beq.n	8005502 <strstr+0x6>
 8005514:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005518:	429e      	cmp	r6, r3
 800551a:	d0f7      	beq.n	800550c <strstr+0x10>
 800551c:	3001      	adds	r0, #1
 800551e:	7803      	ldrb	r3, [r0, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ef      	bne.n	8005504 <strstr+0x8>
 8005524:	4618      	mov	r0, r3
 8005526:	e7ec      	b.n	8005502 <strstr+0x6>

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__malloc_lock+0x8>)
 800552a:	f7ff bea1 	b.w	8005270 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	20002ee0 	.word	0x20002ee0

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__malloc_unlock+0x8>)
 8005536:	f7ff be9c 	b.w	8005272 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	20002ee0 	.word	0x20002ee0

08005540 <_free_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4605      	mov	r5, r0
 8005544:	2900      	cmp	r1, #0
 8005546:	d040      	beq.n	80055ca <_free_r+0x8a>
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f0c      	subs	r4, r1, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfb8      	it	lt
 8005552:	18e4      	addlt	r4, r4, r3
 8005554:	f7ff ffe8 	bl	8005528 <__malloc_lock>
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <_free_r+0x8c>)
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	b933      	cbnz	r3, 800556c <_free_r+0x2c>
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	4628      	mov	r0, r5
 8005564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005568:	f7ff bfe4 	b.w	8005534 <__malloc_unlock>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d908      	bls.n	8005582 <_free_r+0x42>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	1821      	adds	r1, r4, r0
 8005574:	428b      	cmp	r3, r1
 8005576:	bf01      	itttt	eq
 8005578:	6819      	ldreq	r1, [r3, #0]
 800557a:	685b      	ldreq	r3, [r3, #4]
 800557c:	1809      	addeq	r1, r1, r0
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	e7ed      	b.n	800555e <_free_r+0x1e>
 8005582:	461a      	mov	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b10b      	cbz	r3, 800558c <_free_r+0x4c>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d9fa      	bls.n	8005582 <_free_r+0x42>
 800558c:	6811      	ldr	r1, [r2, #0]
 800558e:	1850      	adds	r0, r2, r1
 8005590:	42a0      	cmp	r0, r4
 8005592:	d10b      	bne.n	80055ac <_free_r+0x6c>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	4401      	add	r1, r0
 8005598:	1850      	adds	r0, r2, r1
 800559a:	4283      	cmp	r3, r0
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	d1e0      	bne.n	8005562 <_free_r+0x22>
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4401      	add	r1, r0
 80055a6:	6011      	str	r1, [r2, #0]
 80055a8:	6053      	str	r3, [r2, #4]
 80055aa:	e7da      	b.n	8005562 <_free_r+0x22>
 80055ac:	d902      	bls.n	80055b4 <_free_r+0x74>
 80055ae:	230c      	movs	r3, #12
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	e7d6      	b.n	8005562 <_free_r+0x22>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	1821      	adds	r1, r4, r0
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf01      	itttt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	1809      	addeq	r1, r1, r0
 80055c2:	6021      	streq	r1, [r4, #0]
 80055c4:	6063      	str	r3, [r4, #4]
 80055c6:	6054      	str	r4, [r2, #4]
 80055c8:	e7cb      	b.n	8005562 <_free_r+0x22>
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	20002ee4 	.word	0x20002ee4

080055d0 <__ssputs_r>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	688e      	ldr	r6, [r1, #8]
 80055d6:	4682      	mov	sl, r0
 80055d8:	429e      	cmp	r6, r3
 80055da:	460c      	mov	r4, r1
 80055dc:	4690      	mov	r8, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	d838      	bhi.n	8005654 <__ssputs_r+0x84>
 80055e2:	898a      	ldrh	r2, [r1, #12]
 80055e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e8:	d032      	beq.n	8005650 <__ssputs_r+0x80>
 80055ea:	6825      	ldr	r5, [r4, #0]
 80055ec:	6909      	ldr	r1, [r1, #16]
 80055ee:	3301      	adds	r3, #1
 80055f0:	eba5 0901 	sub.w	r9, r5, r1
 80055f4:	6965      	ldr	r5, [r4, #20]
 80055f6:	444b      	add	r3, r9
 80055f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005600:	106d      	asrs	r5, r5, #1
 8005602:	429d      	cmp	r5, r3
 8005604:	bf38      	it	cc
 8005606:	461d      	movcc	r5, r3
 8005608:	0553      	lsls	r3, r2, #21
 800560a:	d531      	bpl.n	8005670 <__ssputs_r+0xa0>
 800560c:	4629      	mov	r1, r5
 800560e:	f7ff fe67 	bl	80052e0 <_malloc_r>
 8005612:	4606      	mov	r6, r0
 8005614:	b950      	cbnz	r0, 800562c <__ssputs_r+0x5c>
 8005616:	230c      	movs	r3, #12
 8005618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561c:	f8ca 3000 	str.w	r3, [sl]
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562c:	464a      	mov	r2, r9
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	f7ff fe20 	bl	8005274 <memcpy>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	6126      	str	r6, [r4, #16]
 8005642:	444e      	add	r6, r9
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	463e      	mov	r6, r7
 8005648:	6165      	str	r5, [r4, #20]
 800564a:	eba5 0509 	sub.w	r5, r5, r9
 800564e:	60a5      	str	r5, [r4, #8]
 8005650:	42be      	cmp	r6, r7
 8005652:	d900      	bls.n	8005656 <__ssputs_r+0x86>
 8005654:	463e      	mov	r6, r7
 8005656:	4632      	mov	r2, r6
 8005658:	4641      	mov	r1, r8
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	f000 fab8 	bl	8005bd0 <memmove>
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	2000      	movs	r0, #0
 8005664:	1b9b      	subs	r3, r3, r6
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	4433      	add	r3, r6
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	e7db      	b.n	8005628 <__ssputs_r+0x58>
 8005670:	462a      	mov	r2, r5
 8005672:	f000 fac7 	bl	8005c04 <_realloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	2800      	cmp	r0, #0
 800567a:	d1e1      	bne.n	8005640 <__ssputs_r+0x70>
 800567c:	4650      	mov	r0, sl
 800567e:	6921      	ldr	r1, [r4, #16]
 8005680:	f7ff ff5e 	bl	8005540 <_free_r>
 8005684:	e7c7      	b.n	8005616 <__ssputs_r+0x46>
	...

08005688 <_svfiprintf_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	4698      	mov	r8, r3
 800568e:	898b      	ldrh	r3, [r1, #12]
 8005690:	4607      	mov	r7, r0
 8005692:	061b      	lsls	r3, r3, #24
 8005694:	460d      	mov	r5, r1
 8005696:	4614      	mov	r4, r2
 8005698:	b09d      	sub	sp, #116	; 0x74
 800569a:	d50e      	bpl.n	80056ba <_svfiprintf_r+0x32>
 800569c:	690b      	ldr	r3, [r1, #16]
 800569e:	b963      	cbnz	r3, 80056ba <_svfiprintf_r+0x32>
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	f7ff fe1d 	bl	80052e0 <_malloc_r>
 80056a6:	6028      	str	r0, [r5, #0]
 80056a8:	6128      	str	r0, [r5, #16]
 80056aa:	b920      	cbnz	r0, 80056b6 <_svfiprintf_r+0x2e>
 80056ac:	230c      	movs	r3, #12
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b4:	e0d1      	b.n	800585a <_svfiprintf_r+0x1d2>
 80056b6:	2340      	movs	r3, #64	; 0x40
 80056b8:	616b      	str	r3, [r5, #20]
 80056ba:	2300      	movs	r3, #0
 80056bc:	9309      	str	r3, [sp, #36]	; 0x24
 80056be:	2320      	movs	r3, #32
 80056c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056c4:	2330      	movs	r3, #48	; 0x30
 80056c6:	f04f 0901 	mov.w	r9, #1
 80056ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005874 <_svfiprintf_r+0x1ec>
 80056d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d6:	4623      	mov	r3, r4
 80056d8:	469a      	mov	sl, r3
 80056da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056de:	b10a      	cbz	r2, 80056e4 <_svfiprintf_r+0x5c>
 80056e0:	2a25      	cmp	r2, #37	; 0x25
 80056e2:	d1f9      	bne.n	80056d8 <_svfiprintf_r+0x50>
 80056e4:	ebba 0b04 	subs.w	fp, sl, r4
 80056e8:	d00b      	beq.n	8005702 <_svfiprintf_r+0x7a>
 80056ea:	465b      	mov	r3, fp
 80056ec:	4622      	mov	r2, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ff6d 	bl	80055d0 <__ssputs_r>
 80056f6:	3001      	adds	r0, #1
 80056f8:	f000 80aa 	beq.w	8005850 <_svfiprintf_r+0x1c8>
 80056fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056fe:	445a      	add	r2, fp
 8005700:	9209      	str	r2, [sp, #36]	; 0x24
 8005702:	f89a 3000 	ldrb.w	r3, [sl]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80a2 	beq.w	8005850 <_svfiprintf_r+0x1c8>
 800570c:	2300      	movs	r3, #0
 800570e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005716:	f10a 0a01 	add.w	sl, sl, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	9307      	str	r3, [sp, #28]
 800571e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005722:	931a      	str	r3, [sp, #104]	; 0x68
 8005724:	4654      	mov	r4, sl
 8005726:	2205      	movs	r2, #5
 8005728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572c:	4851      	ldr	r0, [pc, #324]	; (8005874 <_svfiprintf_r+0x1ec>)
 800572e:	f000 fa41 	bl	8005bb4 <memchr>
 8005732:	9a04      	ldr	r2, [sp, #16]
 8005734:	b9d8      	cbnz	r0, 800576e <_svfiprintf_r+0xe6>
 8005736:	06d0      	lsls	r0, r2, #27
 8005738:	bf44      	itt	mi
 800573a:	2320      	movmi	r3, #32
 800573c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005740:	0711      	lsls	r1, r2, #28
 8005742:	bf44      	itt	mi
 8005744:	232b      	movmi	r3, #43	; 0x2b
 8005746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574a:	f89a 3000 	ldrb.w	r3, [sl]
 800574e:	2b2a      	cmp	r3, #42	; 0x2a
 8005750:	d015      	beq.n	800577e <_svfiprintf_r+0xf6>
 8005752:	4654      	mov	r4, sl
 8005754:	2000      	movs	r0, #0
 8005756:	f04f 0c0a 	mov.w	ip, #10
 800575a:	9a07      	ldr	r2, [sp, #28]
 800575c:	4621      	mov	r1, r4
 800575e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005762:	3b30      	subs	r3, #48	; 0x30
 8005764:	2b09      	cmp	r3, #9
 8005766:	d94e      	bls.n	8005806 <_svfiprintf_r+0x17e>
 8005768:	b1b0      	cbz	r0, 8005798 <_svfiprintf_r+0x110>
 800576a:	9207      	str	r2, [sp, #28]
 800576c:	e014      	b.n	8005798 <_svfiprintf_r+0x110>
 800576e:	eba0 0308 	sub.w	r3, r0, r8
 8005772:	fa09 f303 	lsl.w	r3, r9, r3
 8005776:	4313      	orrs	r3, r2
 8005778:	46a2      	mov	sl, r4
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	e7d2      	b.n	8005724 <_svfiprintf_r+0x9c>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	9103      	str	r1, [sp, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfbb      	ittet	lt
 800578a:	425b      	neglt	r3, r3
 800578c:	f042 0202 	orrlt.w	r2, r2, #2
 8005790:	9307      	strge	r3, [sp, #28]
 8005792:	9307      	strlt	r3, [sp, #28]
 8005794:	bfb8      	it	lt
 8005796:	9204      	strlt	r2, [sp, #16]
 8005798:	7823      	ldrb	r3, [r4, #0]
 800579a:	2b2e      	cmp	r3, #46	; 0x2e
 800579c:	d10c      	bne.n	80057b8 <_svfiprintf_r+0x130>
 800579e:	7863      	ldrb	r3, [r4, #1]
 80057a0:	2b2a      	cmp	r3, #42	; 0x2a
 80057a2:	d135      	bne.n	8005810 <_svfiprintf_r+0x188>
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	3402      	adds	r4, #2
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfb8      	it	lt
 80057b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005878 <_svfiprintf_r+0x1f0>
 80057bc:	2203      	movs	r2, #3
 80057be:	4650      	mov	r0, sl
 80057c0:	7821      	ldrb	r1, [r4, #0]
 80057c2:	f000 f9f7 	bl	8005bb4 <memchr>
 80057c6:	b140      	cbz	r0, 80057da <_svfiprintf_r+0x152>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	eba0 000a 	sub.w	r0, r0, sl
 80057ce:	fa03 f000 	lsl.w	r0, r3, r0
 80057d2:	9b04      	ldr	r3, [sp, #16]
 80057d4:	3401      	adds	r4, #1
 80057d6:	4303      	orrs	r3, r0
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057de:	2206      	movs	r2, #6
 80057e0:	4826      	ldr	r0, [pc, #152]	; (800587c <_svfiprintf_r+0x1f4>)
 80057e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057e6:	f000 f9e5 	bl	8005bb4 <memchr>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d038      	beq.n	8005860 <_svfiprintf_r+0x1d8>
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <_svfiprintf_r+0x1f8>)
 80057f0:	bb1b      	cbnz	r3, 800583a <_svfiprintf_r+0x1b2>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	3307      	adds	r3, #7
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	3308      	adds	r3, #8
 80057fc:	9303      	str	r3, [sp, #12]
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	4433      	add	r3, r6
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
 8005804:	e767      	b.n	80056d6 <_svfiprintf_r+0x4e>
 8005806:	460c      	mov	r4, r1
 8005808:	2001      	movs	r0, #1
 800580a:	fb0c 3202 	mla	r2, ip, r2, r3
 800580e:	e7a5      	b.n	800575c <_svfiprintf_r+0xd4>
 8005810:	2300      	movs	r3, #0
 8005812:	f04f 0c0a 	mov.w	ip, #10
 8005816:	4619      	mov	r1, r3
 8005818:	3401      	adds	r4, #1
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4620      	mov	r0, r4
 800581e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005822:	3a30      	subs	r2, #48	; 0x30
 8005824:	2a09      	cmp	r2, #9
 8005826:	d903      	bls.n	8005830 <_svfiprintf_r+0x1a8>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0c5      	beq.n	80057b8 <_svfiprintf_r+0x130>
 800582c:	9105      	str	r1, [sp, #20]
 800582e:	e7c3      	b.n	80057b8 <_svfiprintf_r+0x130>
 8005830:	4604      	mov	r4, r0
 8005832:	2301      	movs	r3, #1
 8005834:	fb0c 2101 	mla	r1, ip, r1, r2
 8005838:	e7f0      	b.n	800581c <_svfiprintf_r+0x194>
 800583a:	ab03      	add	r3, sp, #12
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	462a      	mov	r2, r5
 8005840:	4638      	mov	r0, r7
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <_svfiprintf_r+0x1fc>)
 8005844:	a904      	add	r1, sp, #16
 8005846:	f3af 8000 	nop.w
 800584a:	1c42      	adds	r2, r0, #1
 800584c:	4606      	mov	r6, r0
 800584e:	d1d6      	bne.n	80057fe <_svfiprintf_r+0x176>
 8005850:	89ab      	ldrh	r3, [r5, #12]
 8005852:	065b      	lsls	r3, r3, #25
 8005854:	f53f af2c 	bmi.w	80056b0 <_svfiprintf_r+0x28>
 8005858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800585a:	b01d      	add	sp, #116	; 0x74
 800585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005860:	ab03      	add	r3, sp, #12
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	462a      	mov	r2, r5
 8005866:	4638      	mov	r0, r7
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <_svfiprintf_r+0x1fc>)
 800586a:	a904      	add	r1, sp, #16
 800586c:	f000 f87c 	bl	8005968 <_printf_i>
 8005870:	e7eb      	b.n	800584a <_svfiprintf_r+0x1c2>
 8005872:	bf00      	nop
 8005874:	08005e50 	.word	0x08005e50
 8005878:	08005e56 	.word	0x08005e56
 800587c:	08005e5a 	.word	0x08005e5a
 8005880:	00000000 	.word	0x00000000
 8005884:	080055d1 	.word	0x080055d1

08005888 <_printf_common>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	4699      	mov	r9, r3
 8005890:	688a      	ldr	r2, [r1, #8]
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	4607      	mov	r7, r0
 8005896:	4293      	cmp	r3, r2
 8005898:	bfb8      	it	lt
 800589a:	4613      	movlt	r3, r2
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058a2:	460c      	mov	r4, r1
 80058a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a8:	b10a      	cbz	r2, 80058ae <_printf_common+0x26>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	0699      	lsls	r1, r3, #26
 80058b2:	bf42      	ittt	mi
 80058b4:	6833      	ldrmi	r3, [r6, #0]
 80058b6:	3302      	addmi	r3, #2
 80058b8:	6033      	strmi	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	f015 0506 	ands.w	r5, r5, #6
 80058c0:	d106      	bne.n	80058d0 <_printf_common+0x48>
 80058c2:	f104 0a19 	add.w	sl, r4, #25
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	6832      	ldr	r2, [r6, #0]
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dc28      	bgt.n	8005922 <_printf_common+0x9a>
 80058d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058d4:	1e13      	subs	r3, r2, #0
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	0692      	lsls	r2, r2, #26
 80058de:	d42d      	bmi.n	800593c <_printf_common+0xb4>
 80058e0:	4649      	mov	r1, r9
 80058e2:	4638      	mov	r0, r7
 80058e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d020      	beq.n	8005930 <_printf_common+0xa8>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	68e5      	ldr	r5, [r4, #12]
 80058f2:	f003 0306 	and.w	r3, r3, #6
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	bf18      	it	ne
 80058fa:	2500      	movne	r5, #0
 80058fc:	6832      	ldr	r2, [r6, #0]
 80058fe:	f04f 0600 	mov.w	r6, #0
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	bf08      	it	eq
 8005906:	1aad      	subeq	r5, r5, r2
 8005908:	6922      	ldr	r2, [r4, #16]
 800590a:	bf08      	it	eq
 800590c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005910:	4293      	cmp	r3, r2
 8005912:	bfc4      	itt	gt
 8005914:	1a9b      	subgt	r3, r3, r2
 8005916:	18ed      	addgt	r5, r5, r3
 8005918:	341a      	adds	r4, #26
 800591a:	42b5      	cmp	r5, r6
 800591c:	d11a      	bne.n	8005954 <_printf_common+0xcc>
 800591e:	2000      	movs	r0, #0
 8005920:	e008      	b.n	8005934 <_printf_common+0xac>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4649      	mov	r1, r9
 8005928:	4638      	mov	r0, r7
 800592a:	47c0      	blx	r8
 800592c:	3001      	adds	r0, #1
 800592e:	d103      	bne.n	8005938 <_printf_common+0xb0>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	3501      	adds	r5, #1
 800593a:	e7c4      	b.n	80058c6 <_printf_common+0x3e>
 800593c:	2030      	movs	r0, #48	; 0x30
 800593e:	18e1      	adds	r1, r4, r3
 8005940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800594a:	4422      	add	r2, r4
 800594c:	3302      	adds	r3, #2
 800594e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005952:	e7c5      	b.n	80058e0 <_printf_common+0x58>
 8005954:	2301      	movs	r3, #1
 8005956:	4622      	mov	r2, r4
 8005958:	4649      	mov	r1, r9
 800595a:	4638      	mov	r0, r7
 800595c:	47c0      	blx	r8
 800595e:	3001      	adds	r0, #1
 8005960:	d0e6      	beq.n	8005930 <_printf_common+0xa8>
 8005962:	3601      	adds	r6, #1
 8005964:	e7d9      	b.n	800591a <_printf_common+0x92>
	...

08005968 <_printf_i>:
 8005968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	7e0f      	ldrb	r7, [r1, #24]
 800596e:	4691      	mov	r9, r2
 8005970:	2f78      	cmp	r7, #120	; 0x78
 8005972:	4680      	mov	r8, r0
 8005974:	460c      	mov	r4, r1
 8005976:	469a      	mov	sl, r3
 8005978:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800597a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800597e:	d807      	bhi.n	8005990 <_printf_i+0x28>
 8005980:	2f62      	cmp	r7, #98	; 0x62
 8005982:	d80a      	bhi.n	800599a <_printf_i+0x32>
 8005984:	2f00      	cmp	r7, #0
 8005986:	f000 80d9 	beq.w	8005b3c <_printf_i+0x1d4>
 800598a:	2f58      	cmp	r7, #88	; 0x58
 800598c:	f000 80a4 	beq.w	8005ad8 <_printf_i+0x170>
 8005990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005998:	e03a      	b.n	8005a10 <_printf_i+0xa8>
 800599a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800599e:	2b15      	cmp	r3, #21
 80059a0:	d8f6      	bhi.n	8005990 <_printf_i+0x28>
 80059a2:	a101      	add	r1, pc, #4	; (adr r1, 80059a8 <_printf_i+0x40>)
 80059a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005991 	.word	0x08005991
 80059b4:	08005991 	.word	0x08005991
 80059b8:	08005991 	.word	0x08005991
 80059bc:	08005991 	.word	0x08005991
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005991 	.word	0x08005991
 80059c8:	08005991 	.word	0x08005991
 80059cc:	08005991 	.word	0x08005991
 80059d0:	08005991 	.word	0x08005991
 80059d4:	08005b23 	.word	0x08005b23
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005b05 	.word	0x08005b05
 80059e0:	08005991 	.word	0x08005991
 80059e4:	08005991 	.word	0x08005991
 80059e8:	08005b45 	.word	0x08005b45
 80059ec:	08005991 	.word	0x08005991
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	08005991 	.word	0x08005991
 80059f8:	08005991 	.word	0x08005991
 80059fc:	08005b0d 	.word	0x08005b0d
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	602a      	str	r2, [r5, #0]
 8005a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0a4      	b.n	8005b5e <_printf_i+0x1f6>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	6829      	ldr	r1, [r5, #0]
 8005a18:	0606      	lsls	r6, r0, #24
 8005a1a:	f101 0304 	add.w	r3, r1, #4
 8005a1e:	d50a      	bpl.n	8005a36 <_printf_i+0xce>
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	2e00      	cmp	r6, #0
 8005a26:	da03      	bge.n	8005a30 <_printf_i+0xc8>
 8005a28:	232d      	movs	r3, #45	; 0x2d
 8005a2a:	4276      	negs	r6, r6
 8005a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a30:	230a      	movs	r3, #10
 8005a32:	485e      	ldr	r0, [pc, #376]	; (8005bac <_printf_i+0x244>)
 8005a34:	e019      	b.n	8005a6a <_printf_i+0x102>
 8005a36:	680e      	ldr	r6, [r1, #0]
 8005a38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	bf18      	it	ne
 8005a40:	b236      	sxthne	r6, r6
 8005a42:	e7ef      	b.n	8005a24 <_printf_i+0xbc>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1d19      	adds	r1, r3, #4
 8005a4a:	6029      	str	r1, [r5, #0]
 8005a4c:	0601      	lsls	r1, r0, #24
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0xec>
 8005a50:	681e      	ldr	r6, [r3, #0]
 8005a52:	e002      	b.n	8005a5a <_printf_i+0xf2>
 8005a54:	0646      	lsls	r6, r0, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0xe8>
 8005a58:	881e      	ldrh	r6, [r3, #0]
 8005a5a:	2f6f      	cmp	r7, #111	; 0x6f
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2308      	moveq	r3, #8
 8005a60:	230a      	movne	r3, #10
 8005a62:	4852      	ldr	r0, [pc, #328]	; (8005bac <_printf_i+0x244>)
 8005a64:	2100      	movs	r1, #0
 8005a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6a:	6865      	ldr	r5, [r4, #4]
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	bfa8      	it	ge
 8005a70:	6821      	ldrge	r1, [r4, #0]
 8005a72:	60a5      	str	r5, [r4, #8]
 8005a74:	bfa4      	itt	ge
 8005a76:	f021 0104 	bicge.w	r1, r1, #4
 8005a7a:	6021      	strge	r1, [r4, #0]
 8005a7c:	b90e      	cbnz	r6, 8005a82 <_printf_i+0x11a>
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	d04d      	beq.n	8005b1e <_printf_i+0x1b6>
 8005a82:	4615      	mov	r5, r2
 8005a84:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a88:	fb03 6711 	mls	r7, r3, r1, r6
 8005a8c:	5dc7      	ldrb	r7, [r0, r7]
 8005a8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a92:	4637      	mov	r7, r6
 8005a94:	42bb      	cmp	r3, r7
 8005a96:	460e      	mov	r6, r1
 8005a98:	d9f4      	bls.n	8005a84 <_printf_i+0x11c>
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d10b      	bne.n	8005ab6 <_printf_i+0x14e>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	07de      	lsls	r6, r3, #31
 8005aa2:	d508      	bpl.n	8005ab6 <_printf_i+0x14e>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	6861      	ldr	r1, [r4, #4]
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	bfde      	ittt	le
 8005aac:	2330      	movle	r3, #48	; 0x30
 8005aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ab2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ab6:	1b52      	subs	r2, r2, r5
 8005ab8:	6122      	str	r2, [r4, #16]
 8005aba:	464b      	mov	r3, r9
 8005abc:	4621      	mov	r1, r4
 8005abe:	4640      	mov	r0, r8
 8005ac0:	f8cd a000 	str.w	sl, [sp]
 8005ac4:	aa03      	add	r2, sp, #12
 8005ac6:	f7ff fedf 	bl	8005888 <_printf_common>
 8005aca:	3001      	adds	r0, #1
 8005acc:	d14c      	bne.n	8005b68 <_printf_i+0x200>
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad2:	b004      	add	sp, #16
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad8:	4834      	ldr	r0, [pc, #208]	; (8005bac <_printf_i+0x244>)
 8005ada:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ade:	6829      	ldr	r1, [r5, #0]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ae6:	6029      	str	r1, [r5, #0]
 8005ae8:	061d      	lsls	r5, r3, #24
 8005aea:	d514      	bpl.n	8005b16 <_printf_i+0x1ae>
 8005aec:	07df      	lsls	r7, r3, #31
 8005aee:	bf44      	itt	mi
 8005af0:	f043 0320 	orrmi.w	r3, r3, #32
 8005af4:	6023      	strmi	r3, [r4, #0]
 8005af6:	b91e      	cbnz	r6, 8005b00 <_printf_i+0x198>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	2310      	movs	r3, #16
 8005b02:	e7af      	b.n	8005a64 <_printf_i+0xfc>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	f043 0320 	orr.w	r3, r3, #32
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	2378      	movs	r3, #120	; 0x78
 8005b0e:	4828      	ldr	r0, [pc, #160]	; (8005bb0 <_printf_i+0x248>)
 8005b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b14:	e7e3      	b.n	8005ade <_printf_i+0x176>
 8005b16:	0659      	lsls	r1, r3, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2b6      	uxthmi	r6, r6
 8005b1c:	e7e6      	b.n	8005aec <_printf_i+0x184>
 8005b1e:	4615      	mov	r5, r2
 8005b20:	e7bb      	b.n	8005a9a <_printf_i+0x132>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	6826      	ldr	r6, [r4, #0]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6961      	ldr	r1, [r4, #20]
 8005b2a:	6028      	str	r0, [r5, #0]
 8005b2c:	0635      	lsls	r5, r6, #24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	d501      	bpl.n	8005b36 <_printf_i+0x1ce>
 8005b32:	6019      	str	r1, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <_printf_i+0x1d4>
 8005b36:	0670      	lsls	r0, r6, #25
 8005b38:	d5fb      	bpl.n	8005b32 <_printf_i+0x1ca>
 8005b3a:	8019      	strh	r1, [r3, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4615      	mov	r5, r2
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	e7ba      	b.n	8005aba <_printf_i+0x152>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f82f 	bl	8005bb4 <memchr>
 8005b56:	b108      	cbz	r0, 8005b5c <_printf_i+0x1f4>
 8005b58:	1b40      	subs	r0, r0, r5
 8005b5a:	6060      	str	r0, [r4, #4]
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	2300      	movs	r3, #0
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b66:	e7a8      	b.n	8005aba <_printf_i+0x152>
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d0ab      	beq.n	8005ace <_printf_i+0x166>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	079b      	lsls	r3, r3, #30
 8005b7a:	d413      	bmi.n	8005ba4 <_printf_i+0x23c>
 8005b7c:	68e0      	ldr	r0, [r4, #12]
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bfb8      	it	lt
 8005b84:	4618      	movlt	r0, r3
 8005b86:	e7a4      	b.n	8005ad2 <_printf_i+0x16a>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47d0      	blx	sl
 8005b92:	3001      	adds	r0, #1
 8005b94:	d09b      	beq.n	8005ace <_printf_i+0x166>
 8005b96:	3501      	adds	r5, #1
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	1a5b      	subs	r3, r3, r1
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	dcf2      	bgt.n	8005b88 <_printf_i+0x220>
 8005ba2:	e7eb      	b.n	8005b7c <_printf_i+0x214>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	f104 0619 	add.w	r6, r4, #25
 8005baa:	e7f5      	b.n	8005b98 <_printf_i+0x230>
 8005bac:	08005e61 	.word	0x08005e61
 8005bb0:	08005e72 	.word	0x08005e72

08005bb4 <memchr>:
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	b2c9      	uxtb	r1, r1
 8005bba:	4402      	add	r2, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	d101      	bne.n	8005bc6 <memchr+0x12>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e003      	b.n	8005bce <memchr+0x1a>
 8005bc6:	7804      	ldrb	r4, [r0, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	428c      	cmp	r4, r1
 8005bcc:	d1f6      	bne.n	8005bbc <memchr+0x8>
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <memmove>:
 8005bd0:	4288      	cmp	r0, r1
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	eb01 0402 	add.w	r4, r1, r2
 8005bd8:	d902      	bls.n	8005be0 <memmove+0x10>
 8005bda:	4284      	cmp	r4, r0
 8005bdc:	4623      	mov	r3, r4
 8005bde:	d807      	bhi.n	8005bf0 <memmove+0x20>
 8005be0:	1e43      	subs	r3, r0, #1
 8005be2:	42a1      	cmp	r1, r4
 8005be4:	d008      	beq.n	8005bf8 <memmove+0x28>
 8005be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bee:	e7f8      	b.n	8005be2 <memmove+0x12>
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	4402      	add	r2, r0
 8005bf4:	428a      	cmp	r2, r1
 8005bf6:	d100      	bne.n	8005bfa <memmove+0x2a>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c02:	e7f7      	b.n	8005bf4 <memmove+0x24>

08005c04 <_realloc_r>:
 8005c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	460e      	mov	r6, r1
 8005c0e:	b921      	cbnz	r1, 8005c1a <_realloc_r+0x16>
 8005c10:	4611      	mov	r1, r2
 8005c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	f7ff bb63 	b.w	80052e0 <_malloc_r>
 8005c1a:	b92a      	cbnz	r2, 8005c28 <_realloc_r+0x24>
 8005c1c:	f7ff fc90 	bl	8005540 <_free_r>
 8005c20:	4625      	mov	r5, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	f000 f81b 	bl	8005c62 <_malloc_usable_size_r>
 8005c2c:	4284      	cmp	r4, r0
 8005c2e:	4607      	mov	r7, r0
 8005c30:	d802      	bhi.n	8005c38 <_realloc_r+0x34>
 8005c32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c36:	d812      	bhi.n	8005c5e <_realloc_r+0x5a>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff fb50 	bl	80052e0 <_malloc_r>
 8005c40:	4605      	mov	r5, r0
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d0ed      	beq.n	8005c22 <_realloc_r+0x1e>
 8005c46:	42bc      	cmp	r4, r7
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	bf28      	it	cs
 8005c4e:	463a      	movcs	r2, r7
 8005c50:	f7ff fb10 	bl	8005274 <memcpy>
 8005c54:	4631      	mov	r1, r6
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fc72 	bl	8005540 <_free_r>
 8005c5c:	e7e1      	b.n	8005c22 <_realloc_r+0x1e>
 8005c5e:	4635      	mov	r5, r6
 8005c60:	e7df      	b.n	8005c22 <_realloc_r+0x1e>

08005c62 <_malloc_usable_size_r>:
 8005c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c66:	1f18      	subs	r0, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfbc      	itt	lt
 8005c6c:	580b      	ldrlt	r3, [r1, r0]
 8005c6e:	18c0      	addlt	r0, r0, r3
 8005c70:	4770      	bx	lr
	...

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
