
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054fc  080054fc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080054fc  080054fc  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054fc  080054fc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e48  200000a4  080055a8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002eec  080055a8  00022eec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016337  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c6  00000000  00000000  00036404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b7f  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fdb  00000000  00000000  0003e637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936c0  00000000  00000000  00052612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  000e5d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800533c 	.word	0x0800533c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	0800533c 	.word	0x0800533c

08000150 <HAL_UART_RxCpltCallback>:
char AT_COMAND_AT_CPAS[] = "AT+CPAS\n\r";			// Інформація про стан модуля 0 – готов к работе, 	2 – неизвестно, 3 – входящий звонок, 4 – голосовое соединение
char AT_COMAND_AT_CSQ[] = "AT+CSQ\n\r";				// Рівень сигналу

// --------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which UART generate Callback function
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4a23      	ldr	r2, [pc, #140]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d13e      	bne.n	80001de <HAL_UART_RxCpltCallback+0x8e>
	{
		// '\r' -
		// '\n' - 10
		if((str[0] == 0x0D) || (rx_data_counter >= sizeof(uart_rx_data)))
 8000160:	4b22      	ldr	r3, [pc, #136]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	2b0d      	cmp	r3, #13
 8000166:	d003      	beq.n	8000170 <HAL_UART_RxCpltCallback+0x20>
 8000168:	4b21      	ldr	r3, [pc, #132]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b31      	cmp	r3, #49	; 0x31
 800016e:	d921      	bls.n	80001b4 <HAL_UART_RxCpltCallback+0x64>
		{
			flag_command_received = true;                           // Data is ready
 8000170:	4b20      	ldr	r3, [pc, #128]	; (80001f4 <HAL_UART_RxCpltCallback+0xa4>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000176:	4b1e      	ldr	r3, [pc, #120]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 8000178:	2200      	movs	r2, #0
 800017a:	701a      	strb	r2, [r3, #0]

			// Transmeet receiver data into queue for parsing,
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 800017c:	2300      	movs	r3, #0
 800017e:	60bb      	str	r3, [r7, #8]
			if(xQueueSendToFrontFromISR(command_from_GCMHandle, &uart_rx_data, &xHigherPriorityTaskWoken ) != pdTRUE)
 8000180:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <HAL_UART_RxCpltCallback+0xa8>)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f107 0208 	add.w	r2, r7, #8
 8000188:	2301      	movs	r3, #1
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 800018c:	f002 fee2 	bl	8002f54 <xQueueGenericSendFromISR>
 8000190:	4603      	mov	r3, r0
 8000192:	2b01      	cmp	r3, #1
 8000194:	d002      	beq.n	800019c <HAL_UART_RxCpltCallback+0x4c>
			{
				int fff = 999; // ERROR for debug
 8000196:	f240 33e7 	movw	r3, #999	; 0x3e7
 800019a:	60fb      	str	r3, [r7, #12]
			}

			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800019c:	2232      	movs	r2, #50	; 0x32
 800019e:	2100      	movs	r1, #0
 80001a0:	4816      	ldr	r0, [pc, #88]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 80001a2:	f004 ffef 	bl	8005184 <memset>
			HAL_UART_Receive_IT(&huart1, str, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	4910      	ldr	r1, [pc, #64]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001aa:	480f      	ldr	r0, [pc, #60]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 80001ac:	f001 fddf 	bl	8001d6e <HAL_UART_Receive_IT>
		{
 80001b0:	bf00      	nop
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 80001b2:	e014      	b.n	80001de <HAL_UART_RxCpltCallback+0x8e>
			flag_command_received = false;							// Receive data
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <HAL_UART_RxCpltCallback+0xa4>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	461a      	mov	r2, r3
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001c2:	7819      	ldrb	r1, [r3, #0]
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0xac>)
 80001c6:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 80001c8:	2201      	movs	r2, #1
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <HAL_UART_RxCpltCallback+0x9c>)
 80001cc:	4806      	ldr	r0, [pc, #24]	; (80001e8 <HAL_UART_RxCpltCallback+0x98>)
 80001ce:	f001 fdce 	bl	8001d6e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <HAL_UART_RxCpltCallback+0xa0>)
 80001dc:	701a      	strb	r2, [r3, #0]
}
 80001de:	bf00      	nop
 80001e0:	3710      	adds	r7, #16
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	200000f4 	.word	0x200000f4
 80001f0:	200000f6 	.word	0x200000f6
 80001f4:	200000f5 	.word	0x200000f5
 80001f8:	2000014c 	.word	0x2000014c
 80001fc:	200000c0 	.word	0x200000c0

08000200 <gsm_send_at_command>:
//-------------------------------------------------------------------------------
bool gsm_send_at_command(char *cmd, uint8_t size)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(&huart1, cmd, size);
 800020c:	78fb      	ldrb	r3, [r7, #3]
 800020e:	b29b      	uxth	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <gsm_send_at_command+0x24>)
 8000216:	f001 fd66 	bl	8001ce6 <HAL_UART_Transmit_IT>


	return true;
 800021a:	2301      	movs	r3, #1
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	200000f8 	.word	0x200000f8

08000228 <init_gsm_module>:
//-------------------------------------------------------------------------------
bool init_gsm_module(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart1, AT_COMAND, 10, 1000);

	gsm_send_at_command(AT_COMAND, sizeof(AT_COMAND));     // TEST
 800022c:	2105      	movs	r1, #5
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <init_gsm_module+0x34>)
 8000230:	f7ff ffe6 	bl	8000200 <gsm_send_at_command>
	gsm_send_at_command(AT_COMAND_ATE0, sizeof(AT_COMAND_ATE0));
 8000234:	2107      	movs	r1, #7
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <init_gsm_module+0x38>)
 8000238:	f7ff ffe2 	bl	8000200 <gsm_send_at_command>
	gsm_send_at_command(AT_COMAND_AT_CLIP, sizeof(AT_COMAND_AT_CLIP));
 800023c:	210c      	movs	r1, #12
 800023e:	4809      	ldr	r0, [pc, #36]	; (8000264 <init_gsm_module+0x3c>)
 8000240:	f7ff ffde 	bl	8000200 <gsm_send_at_command>
	gsm_send_at_command(AT_COMAND_АОН, sizeof(AT_COMAND_АОН));
 8000244:	210c      	movs	r1, #12
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <init_gsm_module+0x40>)
 8000248:	f7ff ffda 	bl	8000200 <gsm_send_at_command>
	gsm_send_at_command(AT_COMAND_TURN_OFF_ECHO, sizeof(AT_COMAND_TURN_OFF_ECHO));
 800024c:	2107      	movs	r1, #7
 800024e:	4807      	ldr	r0, [pc, #28]	; (800026c <init_gsm_module+0x44>)
 8000250:	f7ff ffd6 	bl	8000200 <gsm_send_at_command>


	// чикати тут поки модуль не ініціалізіється і не буде готовий до роботи


	return true;
 8000254:	2301      	movs	r3, #1
}
 8000256:	4618      	mov	r0, r3
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000000 	.word	0x20000000
 8000260:	20000008 	.word	0x20000008
 8000264:	20000024 	.word	0x20000024
 8000268:	20000018 	.word	0x20000018
 800026c:	20000010 	.word	0x20000010

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fade 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f856 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8c4 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000280:	f000 f898 	bl	80003b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000284:	f002 f982 	bl	800258c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of command_from_GCM */
  command_from_GCMHandle = osMessageQueueNew (1, sizeof(TX_GCM_COMAND), &command_from_GCM_attributes);
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <main+0x78>)
 800028a:	212d      	movs	r1, #45	; 0x2d
 800028c:	2001      	movs	r0, #1
 800028e:	f002 fabb 	bl	8002808 <osMessageQueueNew>
 8000292:	4603      	mov	r3, r0
 8000294:	4a15      	ldr	r2, [pc, #84]	; (80002ec <main+0x7c>)
 8000296:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <main+0x80>)
 800029a:	2100      	movs	r1, #0
 800029c:	4815      	ldr	r0, [pc, #84]	; (80002f4 <main+0x84>)
 800029e:	f002 f9db 	bl	8002658 <osThreadNew>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <main+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]

  /* creation of gsm_task */
  gsm_taskHandle = osThreadNew(Start_gsm_task, NULL, &gsm_task_attributes);
 80002a8:	4a14      	ldr	r2, [pc, #80]	; (80002fc <main+0x8c>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	4814      	ldr	r0, [pc, #80]	; (8000300 <main+0x90>)
 80002ae:	f002 f9d3 	bl	8002658 <osThreadNew>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <main+0x94>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* creation of parsingGSMcom */
  parsingGSMcomHandle = osThreadNew(StartParsingGSMCom, NULL, &parsingGSMcom_attributes);
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <main+0x98>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4813      	ldr	r0, [pc, #76]	; (800030c <main+0x9c>)
 80002be:	f002 f9cb 	bl	8002658 <osThreadNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <main+0xa0>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* creation of resoursesMonito */
  resoursesMonitoHandle = osThreadNew(StartResoursesMonitor, NULL, &resoursesMonito_attributes);
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <main+0xa4>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <main+0xa8>)
 80002ce:	f002 f9c3 	bl	8002658 <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <main+0xac>)
 80002d6:	6013      	str	r3, [r2, #0]

//  HAL_UART_Receive_IT(&huart1, &rx_uart, 1);
  //HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 // HAL_NVIC_EnableIRQ(USART1_IRQn);

  HAL_UART_Receive_IT(&huart1, str, 1);
 80002d8:	2201      	movs	r2, #1
 80002da:	4911      	ldr	r1, [pc, #68]	; (8000320 <main+0xb0>)
 80002dc:	4811      	ldr	r0, [pc, #68]	; (8000324 <main+0xb4>)
 80002de:	f001 fd46 	bl	8001d6e <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002e2:	f002 f985 	bl	80025f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <main+0x76>
 80002e8:	0800546c 	.word	0x0800546c
 80002ec:	2000014c 	.word	0x2000014c
 80002f0:	080053dc 	.word	0x080053dc
 80002f4:	080004a1 	.word	0x080004a1
 80002f8:	2000013c 	.word	0x2000013c
 80002fc:	08005400 	.word	0x08005400
 8000300:	080004c1 	.word	0x080004c1
 8000304:	20000140 	.word	0x20000140
 8000308:	08005424 	.word	0x08005424
 800030c:	080004f5 	.word	0x080004f5
 8000310:	20000144 	.word	0x20000144
 8000314:	08005448 	.word	0x08005448
 8000318:	08000581 	.word	0x08000581
 800031c:	20000148 	.word	0x20000148
 8000320:	200000f4 	.word	0x200000f4
 8000324:	200000f8 	.word	0x200000f8

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 ff24 	bl	8005184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fdd7 	bl	8000f24 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800037c:	f000 f91a 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f844 	bl	8001428 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003a6:	f000 f905 	bl	80005b4 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <MX_USART1_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ec:	f001 fc2e 	bl	8001c4c <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 f8dd 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000f8 	.word	0x200000f8
 8000404:	40013800 	.word	0x40013800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MX_GPIO_Init+0x90>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MX_GPIO_Init+0x90>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MX_GPIO_Init+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x94>)
 800046c:	f000 fd28 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x94>)
 800048a:	f000 fb95 	bl	8000bb8 <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40011000 	.word	0x40011000

080004a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80004a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <StartDefaultTask+0x1c>)
 80004ae:	f000 fd1f 	bl	8000ef0 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80004b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b6:	f002 f979 	bl	80027ac <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80004ba:	e7f5      	b.n	80004a8 <StartDefaultTask+0x8>
 80004bc:	40011000 	.word	0x40011000

080004c0 <Start_gsm_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_gsm_task */
void Start_gsm_task(void *argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_gsm_task */
  /* Infinite loop */

	osDelay(5000);
 80004c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80004cc:	f002 f96e 	bl	80027ac <osDelay>
	init_gsm_module();
 80004d0:	f7ff feaa 	bl	8000228 <init_gsm_module>
	osDelay(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f002 f968 	bl	80027ac <osDelay>

  for(;;)
  {

	  gsm_send_at_command(AT_COMAND, sizeof(AT_COMAND));     // TEST
 80004dc:	2105      	movs	r1, #5
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <Start_gsm_task+0x30>)
 80004e0:	f7ff fe8e 	bl	8000200 <gsm_send_at_command>
	  osDelay(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f002 f960 	bl	80027ac <osDelay>
	  gsm_send_at_command(AT_COMAND, sizeof(AT_COMAND));     // TEST
 80004ec:	e7f6      	b.n	80004dc <Start_gsm_task+0x1c>
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000

080004f4 <StartParsingGSMCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParsingGSMCom */
void StartParsingGSMCom(void *argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b092      	sub	sp, #72	; 0x48
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParsingGSMCom */
  /* Infinite loop */
  for(;;)
  {
	  char tx_gsm_data[50] = {0};
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	222e      	movs	r2, #46	; 0x2e
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f004 fe3b 	bl	8005184 <memset>
	  if (xQueueReceive(command_from_GCMHandle, tx_gsm_data, 0) == pdTRUE)		// Read witch button was pressed
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <StartParsingGSMCom+0x80>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f107 0108 	add.w	r1, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fdb3 	bl	8003084 <xQueueReceive>
 800051e:	4603      	mov	r3, r0
 8000520:	2b01      	cmp	r3, #1
 8000522:	d122      	bne.n	800056a <StartParsingGSMCom+0x76>
	  {
		  // Command was received

		  char OK_str[] = "OK";
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <StartParsingGSMCom+0x84>)
 8000526:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	4611      	mov	r1, r2
 800052e:	8019      	strh	r1, [r3, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	0c12      	lsrs	r2, r2, #16
 8000534:	701a      	strb	r2, [r3, #0]
		  if((strstr(tx_gsm_data, OK_str)) != NULL)					// Works
 8000536:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f004 fe91 	bl	8005268 <strstr>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <StartParsingGSMCom+0x5e>
		  {
			  int hhdd = 888;
 800054c:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
		  }

		  if((strstr(tx_gsm_data, "+380931482354")) != NULL)  		// Works
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	4909      	ldr	r1, [pc, #36]	; (800057c <StartParsingGSMCom+0x88>)
 8000558:	4618      	mov	r0, r3
 800055a:	f004 fe85 	bl	8005268 <strstr>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <StartParsingGSMCom+0x76>
		  {
			  int hhdddd = 888;
 8000564:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
		  }


	  }

    osDelay(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f002 f91e 	bl	80027ac <osDelay>
  {
 8000570:	e7c4      	b.n	80004fc <StartParsingGSMCom+0x8>
 8000572:	bf00      	nop
 8000574:	2000014c 	.word	0x2000014c
 8000578:	080053b0 	.word	0x080053b0
 800057c:	080053a0 	.word	0x080053a0

08000580 <StartResoursesMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResoursesMonitor */
void StartResoursesMonitor(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
//	  char rx_buffer_at_comand[40] = "HELLO !";
//	 //rx_buffer_at_comand memscpy();
//	  xQueueOverwrite( command_from_GCMHandle, rx_buffer_at_comand );


    osDelay(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f002 f90f 	bl	80027ac <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartResoursesMonitor+0x8>

08000590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d101      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a2:	f000 f95d 	bl	8000860 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40000800 	.word	0x40000800

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_MspInit+0x68>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_MspInit+0x68>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x68>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_MspInit+0x68>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_MspInit+0x68>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x68>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	210f      	movs	r1, #15
 80005fa:	f06f 0001 	mvn.w	r0, #1
 80005fe:	f000 fa00 	bl	8000a02 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_MspInit+0x6c>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_MspInit+0x6c>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <HAL_UART_MspInit+0x9c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d139      	bne.n	80006c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_UART_MspInit+0xa0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <HAL_UART_MspInit+0xa4>)
 8000696:	f000 fa8f 	bl	8000bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <HAL_UART_MspInit+0xa4>)
 80006b0:	f000 fa82 	bl	8000bb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2105      	movs	r1, #5
 80006b8:	2025      	movs	r0, #37	; 0x25
 80006ba:	f000 f9a2 	bl	8000a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006be:	2025      	movs	r0, #37	; 0x25
 80006c0:	f000 f9bb 	bl	8000a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	201e      	movs	r0, #30
 80006ee:	f000 f988 	bl	8000a02 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006f2:	201e      	movs	r0, #30
 80006f4:	f000 f9a1 	bl	8000a3a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_InitTick+0xa0>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_InitTick+0xa0>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	61d3      	str	r3, [r2, #28]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_InitTick+0xa0>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fffe 	bl	800171c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000720:	f000 ffd4 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 8000724:	4603      	mov	r3, r0
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <HAL_InitTick+0xa4>)
 800072e:	fba2 2303 	umull	r2, r3, r2, r3
 8000732:	0c9b      	lsrs	r3, r3, #18
 8000734:	3b01      	subs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_InitTick+0xa8>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <HAL_InitTick+0xac>)
 800073c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_InitTick+0xa8>)
 8000740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000744:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_InitTick+0xa8>)
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_InitTick+0xa8>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_InitTick+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <HAL_InitTick+0xa8>)
 800075a:	f001 f82d 	bl	80017b8 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d104      	bne.n	800076e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <HAL_InitTick+0xa8>)
 8000766:	f001 f87f 	bl	8001868 <HAL_TIM_Base_Start_IT>
 800076a:	4603      	mov	r3, r0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	431bde83 	.word	0x431bde83
 8000780:	20000150 	.word	0x20000150
 8000784:	40000800 	.word	0x40000800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <TIM4_IRQHandler+0x10>)
 80007ba:	f001 f8a7 	bl	800190c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000150 	.word	0x20000150

080007c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART1_IRQHandler+0x10>)
 80007ce:	f001 faff 	bl	8001dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000f8 	.word	0x200000f8

080007dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080e:	f7ff ffe5 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f004 fc83 	bl	800511c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fd2b 	bl	8000270 <main>
  bx lr
 800081a:	4770      	bx	lr
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000824:	08005504 	.word	0x08005504
  ldr r2, =_sbss
 8000828:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800082c:	20002eec 	.word	0x20002eec

08000830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_2_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_Init+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_Init+0x28>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f8d1 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff44 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff feb6 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <HAL_IncTick+0x20>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000038 	.word	0x20000038
 8000880:	20000198 	.word	0x20000198

08000884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000198 	.word	0x20000198

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff4f 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff64 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ffb2 	bl	8000988 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff81 	bl	8000934 <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff57 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d008      	beq.n	8000a7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2204      	movs	r2, #4
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e020      	b.n	8000ac0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 020e 	bic.w	r2, r2, #14
 8000a8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0201 	bic.w	r2, r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d005      	beq.n	8000aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e051      	b.n	8000b92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 020e 	bic.w	r2, r2, #14
 8000afc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0201 	bic.w	r2, r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_DMA_Abort_IT+0xd0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d029      	beq.n	8000b6c <HAL_DMA_Abort_IT+0xa0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_DMA_Abort_IT+0xd4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d022      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x9c>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <HAL_DMA_Abort_IT+0xd8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d01a      	beq.n	8000b62 <HAL_DMA_Abort_IT+0x96>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_DMA_Abort_IT+0xdc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d012      	beq.n	8000b5c <HAL_DMA_Abort_IT+0x90>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_DMA_Abort_IT+0xe0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00a      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x8a>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <HAL_DMA_Abort_IT+0xe4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d102      	bne.n	8000b50 <HAL_DMA_Abort_IT+0x84>
 8000b4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b4e:	e00e      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b54:	e00b      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5a:	e008      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	e005      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b66:	e002      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b68:	2310      	movs	r3, #16
 8000b6a:	e000      	b.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_DMA_Abort_IT+0xe8>)
 8000b70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	4798      	blx	r3
    } 
  }
  return status;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020008 	.word	0x40020008
 8000ba0:	4002001c 	.word	0x4002001c
 8000ba4:	40020030 	.word	0x40020030
 8000ba8:	40020044 	.word	0x40020044
 8000bac:	40020058 	.word	0x40020058
 8000bb0:	4002006c 	.word	0x4002006c
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e169      	b.n	8000ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8158 	bne.w	8000e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4a9a      	ldr	r2, [pc, #616]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d05e      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a98      	ldr	r2, [pc, #608]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d875      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000bfa:	4a98      	ldr	r2, [pc, #608]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d058      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c00:	4a96      	ldr	r2, [pc, #600]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d86f      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c06:	4a96      	ldr	r2, [pc, #600]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d052      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c0c:	4a94      	ldr	r2, [pc, #592]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d869      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c12:	4a94      	ldr	r2, [pc, #592]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d04c      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c18:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d863      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c1e:	4a92      	ldr	r2, [pc, #584]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d046      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c24:	4a90      	ldr	r2, [pc, #576]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d85d      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d82a      	bhi.n	8000c84 <HAL_GPIO_Init+0xcc>
 8000c2e:	2b12      	cmp	r3, #18
 8000c30:	d859      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <HAL_GPIO_Init+0x80>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000c8d 	.word	0x08000c8d
 8000c40:	08000c9f 	.word	0x08000c9f
 8000c44:	08000ce1 	.word	0x08000ce1
 8000c48:	08000ce7 	.word	0x08000ce7
 8000c4c:	08000ce7 	.word	0x08000ce7
 8000c50:	08000ce7 	.word	0x08000ce7
 8000c54:	08000ce7 	.word	0x08000ce7
 8000c58:	08000ce7 	.word	0x08000ce7
 8000c5c:	08000ce7 	.word	0x08000ce7
 8000c60:	08000ce7 	.word	0x08000ce7
 8000c64:	08000ce7 	.word	0x08000ce7
 8000c68:	08000ce7 	.word	0x08000ce7
 8000c6c:	08000ce7 	.word	0x08000ce7
 8000c70:	08000ce7 	.word	0x08000ce7
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000ce7 	.word	0x08000ce7
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	4a79      	ldr	r2, [pc, #484]	; (8000e6c <HAL_GPIO_Init+0x2b4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8a:	e02c      	b.n	8000ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e029      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e024      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e01f      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	330c      	adds	r3, #12
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e01a      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e013      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d105      	bne.n	8000cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	611a      	str	r2, [r3, #16]
          break;
 8000cd2:	e009      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	615a      	str	r2, [r3, #20]
          break;
 8000cde:	e003      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          break;
 8000ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d801      	bhi.n	8000cf2 <HAL_GPIO_Init+0x13a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	e001      	b.n	8000cf6 <HAL_GPIO_Init+0x13e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	; 0xff
 8000cfc:	d802      	bhi.n	8000d04 <HAL_GPIO_Init+0x14c>
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x152>
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	3b08      	subs	r3, #8
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	210f      	movs	r1, #15
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	6a39      	ldr	r1, [r7, #32]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d38:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d50:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <HAL_GPIO_Init+0x2c0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d013      	beq.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <HAL_GPIO_Init+0x2c4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <HAL_GPIO_Init+0x2c8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1e0>
 8000d94:	2303      	movs	r3, #3
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da4:	2300      	movs	r3, #0
 8000da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db6:	492f      	ldr	r1, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	492c      	ldr	r1, [pc, #176]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4928      	ldr	r1, [pc, #160]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4922      	ldr	r1, [pc, #136]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	491e      	ldr	r1, [pc, #120]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	4918      	ldr	r1, [pc, #96]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	608b      	str	r3, [r1, #8]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4914      	ldr	r1, [pc, #80]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d021      	beq.n	8000e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	490e      	ldr	r1, [pc, #56]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60cb      	str	r3, [r1, #12]
 8000e54:	e021      	b.n	8000e9a <HAL_GPIO_Init+0x2e2>
 8000e56:	bf00      	nop
 8000e58:	10320000 	.word	0x10320000
 8000e5c:	10310000 	.word	0x10310000
 8000e60:	10220000 	.word	0x10220000
 8000e64:	10210000 	.word	0x10210000
 8000e68:	10120000 	.word	0x10120000
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40010c00 	.word	0x40010c00
 8000e80:	40011000 	.word	0x40011000
 8000e84:	40011400 	.word	0x40011400
 8000e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4909      	ldr	r1, [pc, #36]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f ae8e 	bne.w	8000bcc <HAL_GPIO_Init+0x14>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	372c      	adds	r7, #44	; 0x2c
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e272      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8087 	beq.w	8001052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f44:	4b92      	ldr	r3, [pc, #584]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d00c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f50:	4b8f      	ldr	r3, [pc, #572]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d112      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f68:	d10b      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	4b89      	ldr	r3, [pc, #548]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d06c      	beq.n	8001050 <HAL_RCC_OscConfig+0x12c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d168      	bne.n	8001050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e24c      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8a:	d106      	bne.n	8000f9a <HAL_RCC_OscConfig+0x76>
 8000f8c:	4b80      	ldr	r3, [pc, #512]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a7f      	ldr	r2, [pc, #508]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e02e      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x98>
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7a      	ldr	r2, [pc, #488]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a77      	ldr	r2, [pc, #476]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e01d      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 8000fc6:	4b72      	ldr	r3, [pc, #456]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a71      	ldr	r2, [pc, #452]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e00b      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a67      	ldr	r2, [pc, #412]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc40 	bl	8000884 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fc3c 	bl	8000884 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e200      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0xe4>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fc2c 	bl	8000884 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fc28 	bl	8000884 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e1ec      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	4b53      	ldr	r3, [pc, #332]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x10c>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d063      	beq.n	8001126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d11c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d116      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e1c0      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4939      	ldr	r1, [pc, #228]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	e03a      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCC_OscConfig+0x270>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fbe1 	bl	8000884 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fbdd 	bl	8000884 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e1a1      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4927      	ldr	r1, [pc, #156]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCC_OscConfig+0x270>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fbc0 	bl	8000884 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fbbc 	bl	8000884 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e180      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d03a      	beq.n	80011a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001140:	f7ff fba0 	bl	8000884 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fb9c 	bl	8000884 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e160      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fb08 	bl	800177c <RCC_Delay>
 800116c:	e01c      	b.n	80011a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fb86 	bl	8000884 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117a:	e00f      	b.n	800119c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fb82 	bl	8000884 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d908      	bls.n	800119c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e146      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	42420000 	.word	0x42420000
 8001198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	4b92      	ldr	r3, [pc, #584]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e9      	bne.n	800117c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a6 	beq.w	8001302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b8b      	ldr	r3, [pc, #556]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a87      	ldr	r2, [pc, #540]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb43 	bl	8000884 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fb3f 	bl	8000884 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e103      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	4b75      	ldr	r3, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x4c8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x312>
 8001228:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a6e      	ldr	r2, [pc, #440]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	e02d      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x334>
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	e01c      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d10c      	bne.n	800127a <HAL_RCC_OscConfig+0x356>
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a5d      	ldr	r2, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	e00b      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a5a      	ldr	r2, [pc, #360]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d015      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff faf3 	bl	8000884 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff faef 	bl	8000884 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0b1      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ee      	beq.n	80012a2 <HAL_RCC_OscConfig+0x37e>
 80012c4:	e014      	b.n	80012f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fadd 	bl	8000884 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fad9 	bl	8000884 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e09b      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ee      	bne.n	80012ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a3b      	ldr	r2, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d061      	beq.n	80013dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d146      	bne.n	80013ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff faad 	bl	8000884 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff faa9 	bl	8000884 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e06d      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d108      	bne.n	8001368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4921      	ldr	r1, [pc, #132]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a19      	ldr	r1, [r3, #32]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	430b      	orrs	r3, r1
 800137a:	491b      	ldr	r1, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fa7d 	bl	8000884 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fa79 	bl	8000884 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e03d      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x46a>
 80013ac:	e035      	b.n	800141a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa66 	bl	8000884 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff fa62 	bl	8000884 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e026      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x498>
 80013da:	e01e      	b.n	800141a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e019      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_OscConfig+0x500>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	429a      	cmp	r2, r3
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0d0      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d910      	bls.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4965      	ldr	r1, [pc, #404]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d040      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d115      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e073      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06b      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4936      	ldr	r1, [pc, #216]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff f9b4 	bl	8000884 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff f9b0 	bl	8000884 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e053      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d210      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0207 	bic.w	r2, r3, #7
 800155e:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1cc>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f87e 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08005484 	.word	0x08005484
 80015f4:	20000030 	.word	0x20000030
 80015f8:	20000034 	.word	0x20000034

080015fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	b490      	push	{r4, r7}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001604:	1d3c      	adds	r4, r7, #4
 8001606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800160c:	f240 2301 	movw	r3, #513	; 0x201
 8001610:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d002      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001636:	2b08      	cmp	r3, #8
 8001638:	d003      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0x46>
 800163a:	e02b      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800163e:	623b      	str	r3, [r7, #32]
      break;
 8001640:	e02b      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3328      	adds	r3, #40	; 0x28
 800164c:	443b      	add	r3, r7
 800164e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001652:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	0c5b      	lsrs	r3, r3, #17
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	3328      	adds	r3, #40	; 0x28
 800166a:	443b      	add	r3, r7
 800166c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001670:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001676:	fb03 f202 	mul.w	r2, r3, r2
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e004      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	623b      	str	r3, [r7, #32]
      break;
 8001692:	e002      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001696:	623b      	str	r3, [r7, #32]
      break;
 8001698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169a:	6a3b      	ldr	r3, [r7, #32]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc90      	pop	{r4, r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	080053b4 	.word	0x080053b4
 80016ac:	40021000 	.word	0x40021000
 80016b0:	007a1200 	.word	0x007a1200
 80016b4:	003d0900 	.word	0x003d0900

080016b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000030 	.word	0x20000030

080016cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d0:	f7ff fff2 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	4903      	ldr	r1, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08005494 	.word	0x08005494

080016f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0adb      	lsrs	r3, r3, #11
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4903      	ldr	r1, [pc, #12]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	08005494 	.word	0x08005494

0800171c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	220f      	movs	r2, #15
 800172a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_GetClockConfig+0x58>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_RCC_GetClockConfig+0x58>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_GetClockConfig+0x58>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_RCC_GetClockConfig+0x58>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_GetClockConfig+0x5c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40022000 	.word	0x40022000

0800177c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <RCC_Delay+0x34>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <RCC_Delay+0x38>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a5b      	lsrs	r3, r3, #9
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001798:	bf00      	nop
  }
  while (Delay --);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	60fa      	str	r2, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <RCC_Delay+0x1c>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000030 	.word	0x20000030
 80017b4:	10624dd3 	.word	0x10624dd3

080017b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e041      	b.n	800184e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f839 	bl	8001856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f000 f9b4 	bl	8001b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d001      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e03a      	b.n	80018f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_TIM_Base_Start_IT+0x98>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00e      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x58>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018aa:	d009      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x58>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_TIM_Base_Start_IT+0x9c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d004      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x58>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_TIM_Base_Start_IT+0xa0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d111      	bne.n	80018e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d010      	beq.n	80018f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e2:	e007      	b.n	80018f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40000400 	.word	0x40000400
 8001908:	40000800 	.word	0x40000800

0800190c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d122      	bne.n	8001968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b02      	cmp	r3, #2
 800192e:	d11b      	bne.n	8001968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0202 	mvn.w	r2, #2
 8001938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8ed 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8e0 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8ef 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d122      	bne.n	80019bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b04      	cmp	r3, #4
 8001982:	d11b      	bne.n	80019bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0204 	mvn.w	r2, #4
 800198c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8c3 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019a8:	e005      	b.n	80019b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8b6 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8c5 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d122      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d11b      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0208 	mvn.w	r2, #8
 80019e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2204      	movs	r2, #4
 80019e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f899 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019fc:	e005      	b.n	8001a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f88c 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f89b 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d122      	bne.n	8001a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d11b      	bne.n	8001a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0210 	mvn.w	r2, #16
 8001a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f86f 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a50:	e005      	b.n	8001a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f862 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f871 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10e      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0201 	mvn.w	r2, #1
 8001a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fd80 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	2b80      	cmp	r3, #128	; 0x80
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d107      	bne.n	8001abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8bf 	bl	8001c3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f835 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0220 	mvn.w	r2, #32
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f88a 	bl	8001c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <TIM_Base_SetConfig+0xb8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00b      	beq.n	8001b94 <TIM_Base_SetConfig+0x30>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d007      	beq.n	8001b94 <TIM_Base_SetConfig+0x30>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <TIM_Base_SetConfig+0xbc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d003      	beq.n	8001b94 <TIM_Base_SetConfig+0x30>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <TIM_Base_SetConfig+0xc0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d108      	bne.n	8001ba6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <TIM_Base_SetConfig+0xb8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00b      	beq.n	8001bc6 <TIM_Base_SetConfig+0x62>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d007      	beq.n	8001bc6 <TIM_Base_SetConfig+0x62>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <TIM_Base_SetConfig+0xbc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d003      	beq.n	8001bc6 <TIM_Base_SetConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <TIM_Base_SetConfig+0xc0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d108      	bne.n	8001bd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <TIM_Base_SetConfig+0xb8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d103      	bne.n	8001c0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	615a      	str	r2, [r3, #20]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800

08001c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e03f      	b.n	8001cde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fcdc 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fbed 	bl	8002470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d130      	bne.n	8001d62 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_UART_Transmit_IT+0x26>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e029      	b.n	8001d64 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_UART_Transmit_IT+0x38>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e022      	b.n	8001d64 <HAL_UART_Transmit_IT+0x7e>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d11d      	bne.n	8001dc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_UART_Receive_IT+0x26>
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e016      	b.n	8001dc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_UART_Receive_IT+0x38>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e00f      	b.n	8001dc6 <HAL_UART_Receive_IT+0x58>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f9cf 	bl	800215e <UART_Start_Receive_IT>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	e000      	b.n	8001dc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_UART_IRQHandler+0x52>
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa7f 	bl	800231e <UART_Receive_IT>
      return;
 8001e20:	e17b      	b.n	800211a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80b1 	beq.w	8001f8c <HAL_UART_IRQHandler+0x1bc>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_UART_IRQHandler+0x70>
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80a6 	beq.w	8001f8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_UART_IRQHandler+0x90>
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_UART_IRQHandler+0xb0>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_UART_IRQHandler+0xd0>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <HAL_UART_IRQHandler+0xfa>
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <HAL_UART_IRQHandler+0xee>
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0208 	orr.w	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 811e 	beq.w	8002110 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_UART_IRQHandler+0x11e>
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa18 	bl	800231e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <HAL_UART_IRQHandler+0x146>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d031      	beq.n	8001f7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f95a 	bl	80021d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d023      	beq.n	8001f72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d013      	beq.n	8001f6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	4a76      	ldr	r2, [pc, #472]	; (8002120 <HAL_UART_IRQHandler+0x350>)
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fdbc 	bl	8000acc <HAL_DMA_Abort_IT>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f64:	4610      	mov	r0, r2
 8001f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	e00e      	b.n	8001f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e3 	bl	8002136 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	e00a      	b.n	8001f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8df 	bl	8002136 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	e006      	b.n	8001f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8db 	bl	8002136 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f86:	e0c3      	b.n	8002110 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f88:	bf00      	nop
    return;
 8001f8a:	e0c1      	b.n	8002110 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f040 80a1 	bne.w	80020d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 809b 	beq.w	80020d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8095 	beq.w	80020d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d04e      	beq.n	8002070 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001fdc:	8a3b      	ldrh	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8098 	beq.w	8002114 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fe8:	8a3a      	ldrh	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f080 8092 	bcs.w	8002114 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8a3a      	ldrh	r2, [r7, #16]
 8001ff4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d02b      	beq.n	8002058 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0210 	bic.w	r2, r2, #16
 800204c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fcff 	bl	8000a56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f86d 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800206e:	e051      	b.n	8002114 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002078:	b29b      	uxth	r3, r3
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d047      	beq.n	8002118 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002088:	8a7b      	ldrh	r3, [r7, #18]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d044      	beq.n	8002118 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800209c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0210 	bic.w	r2, r2, #16
 80020ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020cc:	8a7b      	ldrh	r3, [r7, #18]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f839 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020d6:	e01f      	b.n	8002118 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_UART_IRQHandler+0x324>
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8af 	bl	8002250 <UART_Transmit_IT>
    return;
 80020f2:	e012      	b.n	800211a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_UART_IRQHandler+0x34a>
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8f0 	bl	80022ee <UART_EndTransmit_IT>
    return;
 800210e:	e004      	b.n	800211a <HAL_UART_IRQHandler+0x34a>
    return;
 8002110:	bf00      	nop
 8002112:	e002      	b.n	800211a <HAL_UART_IRQHandler+0x34a>
      return;
 8002114:	bf00      	nop
 8002116:	e000      	b.n	800211a <HAL_UART_IRQHandler+0x34a>
      return;
 8002118:	bf00      	nop
  }
}
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	08002229 	.word	0x08002229

08002124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	4613      	mov	r3, r2
 800216a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2222      	movs	r2, #34	; 0x22
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff ff77 	bl	8002136 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b21      	cmp	r3, #33	; 0x21
 8002262:	d13e      	bne.n	80022e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226c:	d114      	bne.n	8002298 <UART_Transmit_IT+0x48>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d110      	bne.n	8002298 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	1c9a      	adds	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	621a      	str	r2, [r3, #32]
 8002296:	e008      	b.n	80022aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	1c59      	adds	r1, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6211      	str	r1, [r2, #32]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4619      	mov	r1, r3
 80022b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff08 	bl	8002124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b22      	cmp	r3, #34	; 0x22
 8002330:	f040 8099 	bne.w	8002466 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233c:	d117      	bne.n	800236e <UART_Receive_IT+0x50>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d113      	bne.n	800236e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235c:	b29a      	uxth	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	1c9a      	adds	r2, r3, #2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
 800236c:	e026      	b.n	80023bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002380:	d007      	beq.n	8002392 <UART_Receive_IT+0x74>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <UART_Receive_IT+0x82>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e008      	b.n	80023b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4619      	mov	r1, r3
 80023ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d148      	bne.n	8002462 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0220 	bic.w	r2, r2, #32
 80023de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	2b01      	cmp	r3, #1
 800240e:	d123      	bne.n	8002458 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0210 	bic.w	r2, r2, #16
 8002424:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b10      	cmp	r3, #16
 8002432:	d10a      	bne.n	800244a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fe79 	bl	8002148 <HAL_UARTEx_RxEventCallback>
 8002456:	e002      	b.n	800245e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fd fe79 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e002      	b.n	8002468 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024aa:	f023 030c 	bic.w	r3, r3, #12
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <UART_SetConfig+0x114>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d103      	bne.n	80024e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024d8:	f7ff f90c 	bl	80016f4 <HAL_RCC_GetPCLK2Freq>
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	e002      	b.n	80024e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024e0:	f7ff f8f4 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80024e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <UART_SetConfig+0x118>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	0119      	lsls	r1, r3, #4
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fbb2 f2f3 	udiv	r2, r2, r3
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <UART_SetConfig+0x118>)
 800251e:	fba3 0302 	umull	r0, r3, r3, r2
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2064      	movs	r0, #100	; 0x64
 8002526:	fb00 f303 	mul.w	r3, r0, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	3332      	adds	r3, #50	; 0x32
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <UART_SetConfig+0x118>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253c:	4419      	add	r1, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fbb2 f2f3 	udiv	r2, r2, r3
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <UART_SetConfig+0x118>)
 8002556:	fba3 0302 	umull	r0, r3, r3, r2
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	fb00 f303 	mul.w	r3, r0, r3
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	3332      	adds	r3, #50	; 0x32
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <UART_SetConfig+0x118>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	440a      	add	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40013800 	.word	0x40013800
 8002588:	51eb851f 	.word	0x51eb851f

0800258c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002592:	f3ef 8305 	mrs	r3, IPSR
 8002596:	60bb      	str	r3, [r7, #8]
  return(result);
 8002598:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259e:	f3ef 8310 	mrs	r3, PRIMASK
 80025a2:	607b      	str	r3, [r7, #4]
  return(result);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <osKernelInitialize+0x32>
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <osKernelInitialize+0x60>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d109      	bne.n	80025c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025b2:	f3ef 8311 	mrs	r3, BASEPRI
 80025b6:	603b      	str	r3, [r7, #0]
  return(result);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025be:	f06f 0305 	mvn.w	r3, #5
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e00c      	b.n	80025e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <osKernelInitialize+0x60>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <osKernelInitialize+0x60>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e002      	b.n	80025e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	2000019c 	.word	0x2000019c

080025f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f6:	f3ef 8305 	mrs	r3, IPSR
 80025fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80025fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002602:	f3ef 8310 	mrs	r3, PRIMASK
 8002606:	607b      	str	r3, [r7, #4]
  return(result);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <osKernelStart+0x32>
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <osKernelStart+0x64>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d109      	bne.n	800262a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002616:	f3ef 8311 	mrs	r3, BASEPRI
 800261a:	603b      	str	r3, [r7, #0]
  return(result);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002622:	f06f 0305 	mvn.w	r3, #5
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e00e      	b.n	8002648 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <osKernelStart+0x64>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <osKernelStart+0x64>)
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002638:	f001 f954 	bl	80038e4 <vTaskStartScheduler>
      stat = osOK;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e002      	b.n	8002648 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000019c 	.word	0x2000019c

08002658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b092      	sub	sp, #72	; 0x48
 800265c:	af04      	add	r7, sp, #16
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002668:	f3ef 8305 	mrs	r3, IPSR
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 8094 	bne.w	800279e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002676:	f3ef 8310 	mrs	r3, PRIMASK
 800267a:	623b      	str	r3, [r7, #32]
  return(result);
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 808d 	bne.w	800279e <osThreadNew+0x146>
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <osThreadNew+0x150>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d106      	bne.n	800269a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800268c:	f3ef 8311 	mrs	r3, BASEPRI
 8002690:	61fb      	str	r3, [r7, #28]
  return(result);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 8082 	bne.w	800279e <osThreadNew+0x146>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d07e      	beq.n	800279e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80026a4:	2318      	movs	r3, #24
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80026a8:	2300      	movs	r3, #0
 80026aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80026ac:	f107 031b 	add.w	r3, r7, #27
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d045      	beq.n	800274a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <osThreadNew+0x74>
        name = attr->name;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <osThreadNew+0x9a>
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	2b38      	cmp	r3, #56	; 0x38
 80026e4:	d805      	bhi.n	80026f2 <osThreadNew+0x9a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <osThreadNew+0x9e>
        return (NULL);
 80026f2:	2300      	movs	r3, #0
 80026f4:	e054      	b.n	80027a0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <osThreadNew+0xd4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2bbb      	cmp	r3, #187	; 0xbb
 8002714:	d90a      	bls.n	800272c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <osThreadNew+0xd4>
        mem = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
 800272a:	e010      	b.n	800274e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10c      	bne.n	800274e <osThreadNew+0xf6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <osThreadNew+0xf6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <osThreadNew+0xf6>
          mem = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
 8002748:	e001      	b.n	800274e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	2b01      	cmp	r3, #1
 8002752:	d110      	bne.n	8002776 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800275c:	9202      	str	r2, [sp, #8]
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fed6 	bl	800351c <xTaskCreateStatic>
 8002770:	4603      	mov	r3, r0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e013      	b.n	800279e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d110      	bne.n	800279e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	b29a      	uxth	r2, r3
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 ff20 	bl	80035d4 <xTaskCreate>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <osThreadNew+0x146>
          hTask = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800279e:	697b      	ldr	r3, [r7, #20]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3738      	adds	r7, #56	; 0x38
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000019c 	.word	0x2000019c

080027ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b4:	f3ef 8305 	mrs	r3, IPSR
 80027b8:	613b      	str	r3, [r7, #16]
  return(result);
 80027ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c0:	f3ef 8310 	mrs	r3, PRIMASK
 80027c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <osDelay+0x34>
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <osDelay+0x58>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d109      	bne.n	80027e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027d4:	f3ef 8311 	mrs	r3, BASEPRI
 80027d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <osDelay+0x3c>
    stat = osErrorISR;
 80027e0:	f06f 0305 	mvn.w	r3, #5
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e007      	b.n	80027f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f001 f842 	bl	800387c <vTaskDelay>
    }
  }

  return (stat);
 80027f8:	697b      	ldr	r3, [r7, #20]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000019c 	.word	0x2000019c

08002808 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002818:	f3ef 8305 	mrs	r3, IPSR
 800281c:	61bb      	str	r3, [r7, #24]
  return(result);
 800281e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002820:	2b00      	cmp	r3, #0
 8002822:	d16f      	bne.n	8002904 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002824:	f3ef 8310 	mrs	r3, PRIMASK
 8002828:	617b      	str	r3, [r7, #20]
  return(result);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d169      	bne.n	8002904 <osMessageQueueNew+0xfc>
 8002830:	4b37      	ldr	r3, [pc, #220]	; (8002910 <osMessageQueueNew+0x108>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d105      	bne.n	8002844 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002838:	f3ef 8311 	mrs	r3, BASEPRI
 800283c:	613b      	str	r3, [r7, #16]
  return(result);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d15f      	bne.n	8002904 <osMessageQueueNew+0xfc>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d05c      	beq.n	8002904 <osMessageQueueNew+0xfc>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d059      	beq.n	8002904 <osMessageQueueNew+0xfc>
    mem = -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002854:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d029      	beq.n	80028b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <osMessageQueueNew+0x82>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b4f      	cmp	r3, #79	; 0x4f
 800286a:	d90e      	bls.n	800288a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <osMessageQueueNew+0x82>
        mem = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	e014      	b.n	80028b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d110      	bne.n	80028b4 <osMessageQueueNew+0xac>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <osMessageQueueNew+0xac>
          mem = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	e001      	b.n	80028b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10b      	bne.n	80028d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2100      	movs	r1, #0
 80028c4:	9100      	str	r1, [sp, #0]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f96d 	bl	8002ba8 <xQueueGenericCreateStatic>
 80028ce:	6278      	str	r0, [r7, #36]	; 0x24
 80028d0:	e008      	b.n	80028e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80028d8:	2200      	movs	r2, #0
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f9da 	bl	8002c96 <xQueueGenericCreate>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e001      	b.n	80028fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80028fc:	69f9      	ldr	r1, [r7, #28]
 80028fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002900:	f000 fdb0 	bl	8003464 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002906:	4618      	mov	r0, r3
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000019c 	.word	0x2000019c

08002914 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a06      	ldr	r2, [pc, #24]	; (800293c <vApplicationGetIdleTaskMemory+0x28>)
 8002924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <vApplicationGetIdleTaskMemory+0x2c>)
 800292a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	200001a0 	.word	0x200001a0
 8002940:	2000025c 	.word	0x2000025c

08002944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <vApplicationGetTimerTaskMemory+0x2c>)
 8002954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <vApplicationGetTimerTaskMemory+0x30>)
 800295a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	2000045c 	.word	0x2000045c
 8002974:	20000518 	.word	0x20000518

08002978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0208 	add.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f103 0208 	add.w	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2a:	d103      	bne.n	8002a34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e00c      	b.n	8002a4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3308      	adds	r3, #8
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e002      	b.n	8002a42 <vListInsert+0x2e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d2f6      	bcs.n	8002a3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6892      	ldr	r2, [r2, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6852      	ldr	r2, [r2, #4]
 8002aa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d103      	bne.n	8002ab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b02:	f002 f833 	bl	8004b6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	441a      	add	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	3b01      	subs	r3, #1
 8002b34:	68f9      	ldr	r1, [r7, #12]
 8002b36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	441a      	add	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d114      	bne.n	8002b82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01a      	beq.n	8002b96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3310      	adds	r3, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f959 	bl	8003e1c <xTaskRemoveFromEventList>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <xQueueGenericReset+0xcc>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	e009      	b.n	8002b96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3310      	adds	r3, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fef6 	bl	8002978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3324      	adds	r3, #36	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fef1 	bl	8002978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b96:	f002 f819 	bl	8004bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <xQueueGenericCreateStatic+0x52>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <xQueueGenericCreateStatic+0x56>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <xQueueGenericCreateStatic+0x58>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	623b      	str	r3, [r7, #32]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <xQueueGenericCreateStatic+0x7e>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <xQueueGenericCreateStatic+0x82>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <xQueueGenericCreateStatic+0x84>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61fb      	str	r3, [r7, #28]
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c46:	2350      	movs	r3, #80	; 0x50
 8002c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b50      	cmp	r3, #80	; 0x50
 8002c4e:	d00a      	beq.n	8002c66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	61bb      	str	r3, [r7, #24]
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f843 	bl	8002d12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3730      	adds	r7, #48	; 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af02      	add	r7, sp, #8
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	613b      	str	r3, [r7, #16]
}
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	e004      	b.n	8002cd6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3350      	adds	r3, #80	; 0x50
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 f846 	bl	8004d6c <pvPortMalloc>
 8002ce0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00f      	beq.n	8002d08 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	3350      	adds	r3, #80	; 0x50
 8002cec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f805 	bl	8002d12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d08:	69bb      	ldr	r3, [r7, #24]
	}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e002      	b.n	8002d34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d40:	2101      	movs	r1, #1
 8002d42:	69b8      	ldr	r0, [r7, #24]
 8002d44:	f7ff fec8 	bl	8002ad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d66:	2300      	movs	r3, #0
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueGenericSend+0x32>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d103      	bne.n	8002d98 <xQueueGenericSend+0x40>
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <xQueueGenericSend+0x44>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <xQueueGenericSend+0x46>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <xQueueGenericSend+0x60>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002db4:	bf00      	nop
 8002db6:	e7fe      	b.n	8002db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d103      	bne.n	8002dc6 <xQueueGenericSend+0x6e>
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <xQueueGenericSend+0x72>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <xQueueGenericSend+0x74>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	623b      	str	r3, [r7, #32]
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002de6:	f001 f9df 	bl	80041a8 <xTaskGetSchedulerState>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <xQueueGenericSend+0x9e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <xQueueGenericSend+0xa2>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <xQueueGenericSend+0xa4>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	61fb      	str	r3, [r7, #28]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e16:	f001 fea9 	bl	8004b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <xQueueGenericSend+0xd4>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d129      	bne.n	8002e80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e32:	f000 fa07 	bl	8003244 <prvCopyDataToQueue>
 8002e36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	3324      	adds	r3, #36	; 0x24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 ffe9 	bl	8003e1c <xTaskRemoveFromEventList>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <xQueueGenericSend+0x1f8>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	e00a      	b.n	8002e78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <xQueueGenericSend+0x1f8>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e78:	f001 fea8 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e063      	b.n	8002f48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e86:	f001 fea1 	bl	8004bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e05c      	b.n	8002f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 f823 	bl	8003ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ea2:	f001 fe93 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ea6:	f000 fd8d 	bl	80039c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eaa:	f001 fe5f 	bl	8004b6c <vPortEnterCritical>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eba:	d103      	bne.n	8002ec4 <xQueueGenericSend+0x16c>
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed0:	d103      	bne.n	8002eda <xQueueGenericSend+0x182>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eda:	f001 fe77 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ede:	1d3a      	adds	r2, r7, #4
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f812 	bl	8003f10 <xTaskCheckForTimeOut>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d124      	bne.n	8002f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef4:	f000 fa9e 	bl	8003434 <prvIsQueueFull>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d018      	beq.n	8002f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	3310      	adds	r3, #16
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ff38 	bl	8003d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0e:	f000 fa29 	bl	8003364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f12:	f000 fd65 	bl	80039e0 <xTaskResumeAll>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af7c 	bne.w	8002e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <xQueueGenericSend+0x1f8>)
 8002f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	e772      	b.n	8002e16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 fa17 	bl	8003364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f36:	f000 fd53 	bl	80039e0 <xTaskResumeAll>
 8002f3a:	e76c      	b.n	8002e16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3e:	f000 fa11 	bl	8003364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f42:	f000 fd4d 	bl	80039e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f46:	2300      	movs	r3, #0
		}
	}
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3738      	adds	r7, #56	; 0x38
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <xQueueGenericSendFromISR+0x3c>
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <xQueueGenericSendFromISR+0x40>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <xQueueGenericSendFromISR+0x42>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	623b      	str	r3, [r7, #32]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d103      	bne.n	8002fbe <xQueueGenericSendFromISR+0x6a>
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x6e>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueGenericSendFromISR+0x70>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fb      	str	r3, [r7, #28]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fde:	f001 fe87 	bl	8004cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	61ba      	str	r2, [r7, #24]
 8002ff8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <xQueueGenericSendFromISR+0xbc>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d12c      	bne.n	800306a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003020:	f000 f910 	bl	8003244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003024:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302c:	d112      	bne.n	8003054 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	3324      	adds	r3, #36	; 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f000 feee 	bl	8003e1c <xTaskRemoveFromEventList>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e007      	b.n	8003064 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003058:	3301      	adds	r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	b25a      	sxtb	r2, r3
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003064:	2301      	movs	r3, #1
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003068:	e001      	b.n	800306e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800307c:	4618      	mov	r0, r3
 800307e:	3738      	adds	r7, #56	; 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueReceive+0x30>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	623b      	str	r3, [r7, #32]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueReceive+0x3e>
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueReceive+0x42>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueReceive+0x44>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueReceive+0x5e>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61fb      	str	r3, [r7, #28]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e2:	f001 f861 	bl	80041a8 <xTaskGetSchedulerState>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <xQueueReceive+0x6e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <xQueueReceive+0x72>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueReceive+0x74>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueReceive+0x8e>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	61bb      	str	r3, [r7, #24]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003112:	f001 fd2b 	bl	8004b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 f8f7 	bl	8003318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00f      	beq.n	800315a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	3310      	adds	r3, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe6c 	bl	8003e1c <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <xQueueReceive+0x1bc>)
 800314c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800315a:	f001 fd37 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 800315e:	2301      	movs	r3, #1
 8003160:	e069      	b.n	8003236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003168:	f001 fd30 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800316c:	2300      	movs	r3, #0
 800316e:	e062      	b.n	8003236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4618      	mov	r0, r3
 800317c:	f000 feb2 	bl	8003ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003184:	f001 fd22 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003188:	f000 fc1c 	bl	80039c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800318c:	f001 fcee 	bl	8004b6c <vPortEnterCritical>
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319c:	d103      	bne.n	80031a6 <xQueueReceive+0x122>
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b2:	d103      	bne.n	80031bc <xQueueReceive+0x138>
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	f001 fd06 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c0:	1d3a      	adds	r2, r7, #4
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fea1 	bl	8003f10 <xTaskCheckForTimeOut>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d123      	bne.n	800321c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	f000 f917 	bl	8003408 <prvIsQueueEmpty>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fdc7 	bl	8003d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 f8b8 	bl	8003364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031f4:	f000 fbf4 	bl	80039e0 <xTaskResumeAll>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d189      	bne.n	8003112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <xQueueReceive+0x1bc>)
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	e780      	b.n	8003112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003212:	f000 f8a7 	bl	8003364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003216:	f000 fbe3 	bl	80039e0 <xTaskResumeAll>
 800321a:	e77a      	b.n	8003112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800321c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321e:	f000 f8a1 	bl	8003364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003222:	f000 fbdd 	bl	80039e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003228:	f000 f8ee 	bl	8003408 <prvIsQueueEmpty>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f43f af6f 	beq.w	8003112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003236:	4618      	mov	r0, r3
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d14d      	bne.n	8003306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ffb8 	bl	80041e4 <xTaskPriorityDisinherit>
 8003274:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	e043      	b.n	8003306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d119      	bne.n	80032b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6898      	ldr	r0, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	461a      	mov	r2, r3
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	f001 ff6a 	bl	8005168 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d32b      	bcc.n	8003306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	e026      	b.n	8003306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68d8      	ldr	r0, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	461a      	mov	r2, r3
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	f001 ff50 	bl	8005168 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	425b      	negs	r3, r3
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d207      	bcs.n	80032f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	425b      	negs	r3, r3
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d105      	bne.n	8003306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3b01      	subs	r3, #1
 8003304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800330e:	697b      	ldr	r3, [r7, #20]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d303      	bcc.n	800334c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68d9      	ldr	r1, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	461a      	mov	r2, r3
 8003356:	6838      	ldr	r0, [r7, #0]
 8003358:	f001 ff06 	bl	8005168 <memcpy>
	}
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800336c:	f001 fbfe 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003378:	e011      	b.n	800339e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3324      	adds	r3, #36	; 0x24
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fd48 	bl	8003e1c <xTaskRemoveFromEventList>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003392:	f000 fe1f 	bl	8003fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	3b01      	subs	r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	dce9      	bgt.n	800337a <prvUnlockQueue+0x16>
 80033a6:	e000      	b.n	80033aa <prvUnlockQueue+0x46>
					break;
 80033a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	22ff      	movs	r2, #255	; 0xff
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033b2:	f001 fc0b 	bl	8004bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033b6:	f001 fbd9 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c2:	e011      	b.n	80033e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3310      	adds	r3, #16
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fd23 	bl	8003e1c <xTaskRemoveFromEventList>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033dc:	f000 fdfa 	bl	8003fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dce9      	bgt.n	80033c4 <prvUnlockQueue+0x60>
 80033f0:	e000      	b.n	80033f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	22ff      	movs	r2, #255	; 0xff
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033fc:	f001 fbe6 	bl	8004bcc <vPortExitCritical>
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003410:	f001 fbac 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e001      	b.n	8003426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003426:	f001 fbd1 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800343c:	f001 fb96 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	429a      	cmp	r2, r3
 800344a:	d102      	bne.n	8003452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e001      	b.n	8003456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003456:	f001 fbb9 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e014      	b.n	800349e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <vQueueAddToRegistry+0x4c>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003480:	490b      	ldr	r1, [pc, #44]	; (80034b0 <vQueueAddToRegistry+0x4c>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <vQueueAddToRegistry+0x4c>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003496:	e006      	b.n	80034a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	d9e7      	bls.n	8003474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	20000918 	.word	0x20000918

080034b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034c4:	f001 fb52 	bl	8004b6c <vPortEnterCritical>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d4:	d103      	bne.n	80034de <vQueueWaitForMessageRestricted+0x2a>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ea:	d103      	bne.n	80034f4 <vQueueWaitForMessageRestricted+0x40>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f4:	f001 fb6a 	bl	8004bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3324      	adds	r3, #36	; 0x24
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fc5b 	bl	8003dc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff28 	bl	8003364 <prvUnlockQueue>
	}
 8003514:	bf00      	nop
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	; 0x38
 8003520:	af04      	add	r7, sp, #16
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	623b      	str	r3, [r7, #32]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xTaskCreateStatic+0x46>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61fb      	str	r3, [r7, #28]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003562:	23bc      	movs	r3, #188	; 0xbc
 8003564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2bbc      	cmp	r3, #188	; 0xbc
 800356a:	d00a      	beq.n	8003582 <xTaskCreateStatic+0x66>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	61bb      	str	r3, [r7, #24]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01e      	beq.n	80035c6 <xTaskCreateStatic+0xaa>
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01b      	beq.n	80035c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003596:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2202      	movs	r2, #2
 800359c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035a0:	2300      	movs	r3, #0
 80035a2:	9303      	str	r3, [sp, #12]
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f851 	bl	8003660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035c0:	f000 f8ec 	bl	800379c <prvAddNewTaskToReadyList>
 80035c4:	e001      	b.n	80035ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ca:	697b      	ldr	r3, [r7, #20]
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3728      	adds	r7, #40	; 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af04      	add	r7, sp, #16
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fbbf 	bl	8004d6c <pvPortMalloc>
 80035ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00e      	beq.n	8003614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035f6:	20bc      	movs	r0, #188	; 0xbc
 80035f8:	f001 fbb8 	bl	8004d6c <pvPortMalloc>
 80035fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
 800360a:	e005      	b.n	8003618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f001 fc71 	bl	8004ef4 <vPortFree>
 8003612:	e001      	b.n	8003618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	2300      	movs	r3, #0
 800362a:	9303      	str	r3, [sp, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f80f 	bl	8003660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003642:	69f8      	ldr	r0, [r7, #28]
 8003644:	f000 f8aa 	bl	800379c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	e002      	b.n	8003654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003654:	69bb      	ldr	r3, [r7, #24]
	}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	461a      	mov	r2, r3
 8003678:	21a5      	movs	r1, #165	; 0xa5
 800367a:	f001 fd83 	bl	8005184 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003688:	3b01      	subs	r3, #1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	617b      	str	r3, [r7, #20]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e012      	b.n	80036e4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	7819      	ldrb	r1, [r3, #0]
 80036c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	3334      	adds	r3, #52	; 0x34
 80036ce:	460a      	mov	r2, r1
 80036d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3301      	adds	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	d9e9      	bls.n	80036be <prvInitialiseNewTask+0x5e>
 80036ea:	e000      	b.n	80036ee <prvInitialiseNewTask+0x8e>
		{
			break;
 80036ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	2b37      	cmp	r3, #55	; 0x37
 80036fa:	d901      	bls.n	8003700 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036fc:	2337      	movs	r3, #55	; 0x37
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f94d 	bl	80029b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	3318      	adds	r3, #24
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f948 	bl	80029b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	3354      	adds	r3, #84	; 0x54
 8003750:	2260      	movs	r2, #96	; 0x60
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fd15 	bl	8005184 <memset>
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <prvInitialiseNewTask+0x130>)
 800375e:	659a      	str	r2, [r3, #88]	; 0x58
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <prvInitialiseNewTask+0x134>)
 8003764:	65da      	str	r2, [r3, #92]	; 0x5c
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <prvInitialiseNewTask+0x138>)
 800376a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	69b8      	ldr	r0, [r7, #24]
 8003772:	f001 f90b 	bl	800498c <pxPortInitialiseStack>
 8003776:	4602      	mov	r2, r0
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	080054bc 	.word	0x080054bc
 8003794:	080054dc 	.word	0x080054dc
 8003798:	0800549c 	.word	0x0800549c

0800379c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037a4:	f001 f9e2 	bl	8004b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d110      	bne.n	80037ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037c8:	f000 fc28 	bl	800401c <prvInitialiseTaskLists>
 80037cc:	e00d      	b.n	80037ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <prvAddNewTaskToReadyList+0xcc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d802      	bhi.n	80037ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <prvAddNewTaskToReadyList+0xd4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d903      	bls.n	8003810 <prvAddNewTaskToReadyList+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <prvAddNewTaskToReadyList+0xd4>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <prvAddNewTaskToReadyList+0xd8>)
 800381e:	441a      	add	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f7ff f8d1 	bl	80029ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800382c:	f001 f9ce 	bl	8004bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <prvAddNewTaskToReadyList+0xcc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	429a      	cmp	r2, r3
 8003844:	d207      	bcs.n	8003856 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <prvAddNewTaskToReadyList+0xdc>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000e2c 	.word	0x20000e2c
 8003864:	20000958 	.word	0x20000958
 8003868:	20000e38 	.word	0x20000e38
 800386c:	20000e48 	.word	0x20000e48
 8003870:	20000e34 	.word	0x20000e34
 8003874:	2000095c 	.word	0x2000095c
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <vTaskDelay+0x60>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <vTaskDelay+0x30>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60bb      	str	r3, [r7, #8]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038ac:	f000 f88a 	bl	80039c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038b0:	2100      	movs	r1, #0
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fd04 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038b8:	f000 f892 	bl	80039e0 <xTaskResumeAll>
 80038bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <vTaskDelay+0x64>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000e54 	.word	0x20000e54
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038f2:	463a      	mov	r2, r7
 80038f4:	1d39      	adds	r1, r7, #4
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f80a 	bl	8002914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	9202      	str	r2, [sp, #8]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	460a      	mov	r2, r1
 8003912:	4924      	ldr	r1, [pc, #144]	; (80039a4 <vTaskStartScheduler+0xc0>)
 8003914:	4824      	ldr	r0, [pc, #144]	; (80039a8 <vTaskStartScheduler+0xc4>)
 8003916:	f7ff fe01 	bl	800351c <xTaskCreateStatic>
 800391a:	4603      	mov	r3, r0
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <vTaskStartScheduler+0xc8>)
 800391e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <vTaskStartScheduler+0xc8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e001      	b.n	8003932 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003938:	f000 fd16 	bl	8004368 <xTimerCreateTimerTask>
 800393c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d11b      	bne.n	800397c <vTaskStartScheduler+0x98>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	613b      	str	r3, [r7, #16]
}
 8003956:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <vTaskStartScheduler+0xcc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3354      	adds	r3, #84	; 0x54
 800395e:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <vTaskStartScheduler+0xd0>)
 8003960:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <vTaskStartScheduler+0xd4>)
 8003964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <vTaskStartScheduler+0xd8>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <vTaskStartScheduler+0xdc>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003976:	f001 f887 	bl	8004a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800397a:	e00e      	b.n	800399a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003982:	d10a      	bne.n	800399a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	60fb      	str	r3, [r7, #12]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <vTaskStartScheduler+0xb4>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	080053c4 	.word	0x080053c4
 80039a8:	08003fed 	.word	0x08003fed
 80039ac:	20000e50 	.word	0x20000e50
 80039b0:	20000958 	.word	0x20000958
 80039b4:	20000040 	.word	0x20000040
 80039b8:	20000e4c 	.word	0x20000e4c
 80039bc:	20000e38 	.word	0x20000e38
 80039c0:	20000e30 	.word	0x20000e30

080039c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <vTaskSuspendAll+0x18>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	4a03      	ldr	r2, [pc, #12]	; (80039dc <vTaskSuspendAll+0x18>)
 80039d0:	6013      	str	r3, [r2, #0]
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000e54 	.word	0x20000e54

080039e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039ee:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <xTaskResumeAll+0x118>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskResumeAll+0x2c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	603b      	str	r3, [r7, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a0c:	f001 f8ae 	bl	8004b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	4a38      	ldr	r2, [pc, #224]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d162      	bne.n	8003ae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <xTaskResumeAll+0x11c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d05e      	beq.n	8003ae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a2a:	e02f      	b.n	8003a8c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <xTaskResumeAll+0x120>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3318      	adds	r3, #24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f823 	bl	8002a84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f81e 	bl	8002a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <xTaskResumeAll+0x124>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d903      	bls.n	8003a5c <xTaskResumeAll+0x7c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <xTaskResumeAll+0x124>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <xTaskResumeAll+0x128>)
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe ffab 	bl	80029ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <xTaskResumeAll+0x12c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <xTaskResumeAll+0x130>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <xTaskResumeAll+0x120>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1cb      	bne.n	8003a2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a9a:	f000 fb61 	bl	8004160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <xTaskResumeAll+0x134>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d010      	beq.n	8003acc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aaa:	f000 f845 	bl	8003b38 <xTaskIncrementTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <xTaskResumeAll+0x130>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f1      	bne.n	8003aaa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <xTaskResumeAll+0x134>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <xTaskResumeAll+0x130>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <xTaskResumeAll+0x138>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ae8:	f001 f870 	bl	8004bcc <vPortExitCritical>

	return xAlreadyYielded;
 8003aec:	68bb      	ldr	r3, [r7, #8]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000e54 	.word	0x20000e54
 8003afc:	20000e2c 	.word	0x20000e2c
 8003b00:	20000dec 	.word	0x20000dec
 8003b04:	20000e34 	.word	0x20000e34
 8003b08:	2000095c 	.word	0x2000095c
 8003b0c:	20000958 	.word	0x20000958
 8003b10:	20000e40 	.word	0x20000e40
 8003b14:	20000e3c 	.word	0x20000e3c
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b22:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <xTaskGetTickCount+0x18>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	20000e30 	.word	0x20000e30

08003b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <xTaskIncrementTick+0x150>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 808e 	bne.w	8003c68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <xTaskIncrementTick+0x154>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b54:	4a4d      	ldr	r2, [pc, #308]	; (8003c8c <xTaskIncrementTick+0x154>)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d120      	bne.n	8003ba2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <xTaskIncrementTick+0x158>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	603b      	str	r3, [r7, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <xTaskIncrementTick+0x46>
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <xTaskIncrementTick+0x158>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <xTaskIncrementTick+0x15c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a41      	ldr	r2, [pc, #260]	; (8003c90 <xTaskIncrementTick+0x158>)
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4a41      	ldr	r2, [pc, #260]	; (8003c94 <xTaskIncrementTick+0x15c>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <xTaskIncrementTick+0x160>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a3f      	ldr	r2, [pc, #252]	; (8003c98 <xTaskIncrementTick+0x160>)
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	f000 fadf 	bl	8004160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <xTaskIncrementTick+0x164>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d34e      	bcc.n	8003c4a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <xTaskIncrementTick+0x158>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xTaskIncrementTick+0x82>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xTaskIncrementTick+0x84>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc0:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <xTaskIncrementTick+0x164>)
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc6:	601a      	str	r2, [r3, #0]
					break;
 8003bc8:	e03f      	b.n	8003c4a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <xTaskIncrementTick+0x158>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d203      	bcs.n	8003bea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003be2:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <xTaskIncrementTick+0x164>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6013      	str	r3, [r2, #0]
						break;
 8003be8:	e02f      	b.n	8003c4a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe ff48 	bl	8002a84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3318      	adds	r3, #24
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe ff3f 	bl	8002a84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <xTaskIncrementTick+0x168>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d903      	bls.n	8003c1a <xTaskIncrementTick+0xe2>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <xTaskIncrementTick+0x168>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <xTaskIncrementTick+0x16c>)
 8003c28:	441a      	add	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fe fecc 	bl	80029ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <xTaskIncrementTick+0x170>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3b3      	bcc.n	8003bac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c48:	e7b0      	b.n	8003bac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <xTaskIncrementTick+0x170>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <xTaskIncrementTick+0x16c>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d907      	bls.n	8003c72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e004      	b.n	8003c72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <xTaskIncrementTick+0x174>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a0f      	ldr	r2, [pc, #60]	; (8003cac <xTaskIncrementTick+0x174>)
 8003c70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <xTaskIncrementTick+0x178>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000e54 	.word	0x20000e54
 8003c8c:	20000e30 	.word	0x20000e30
 8003c90:	20000de4 	.word	0x20000de4
 8003c94:	20000de8 	.word	0x20000de8
 8003c98:	20000e44 	.word	0x20000e44
 8003c9c:	20000e4c 	.word	0x20000e4c
 8003ca0:	20000e34 	.word	0x20000e34
 8003ca4:	2000095c 	.word	0x2000095c
 8003ca8:	20000958 	.word	0x20000958
 8003cac:	20000e3c 	.word	0x20000e3c
 8003cb0:	20000e40 	.word	0x20000e40

08003cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <vTaskSwitchContext+0xb0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <vTaskSwitchContext+0xb4>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cc8:	e046      	b.n	8003d58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <vTaskSwitchContext+0xb4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <vTaskSwitchContext+0xb8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e010      	b.n	8003cfa <vTaskSwitchContext+0x46>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	607b      	str	r3, [r7, #4]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <vTaskSwitchContext+0x3e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	491d      	ldr	r1, [pc, #116]	; (8003d70 <vTaskSwitchContext+0xbc>)
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0e4      	beq.n	8003cd8 <vTaskSwitchContext+0x24>
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <vTaskSwitchContext+0xbc>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d104      	bne.n	8003d3e <vTaskSwitchContext+0x8a>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <vTaskSwitchContext+0xc0>)
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <vTaskSwitchContext+0xb8>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <vTaskSwitchContext+0xc0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3354      	adds	r3, #84	; 0x54
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <vTaskSwitchContext+0xc4>)
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000e54 	.word	0x20000e54
 8003d68:	20000e40 	.word	0x20000e40
 8003d6c:	20000e34 	.word	0x20000e34
 8003d70:	2000095c 	.word	0x2000095c
 8003d74:	20000958 	.word	0x20000958
 8003d78:	20000040 	.word	0x20000040

08003d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <vTaskPlaceOnEventList+0x44>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3318      	adds	r3, #24
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe fe32 	bl	8002a14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db0:	2101      	movs	r1, #1
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f000 fa84 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000958 	.word	0x20000958

08003dc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	617b      	str	r3, [r7, #20]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <vTaskPlaceOnEventListRestricted+0x54>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3318      	adds	r3, #24
 8003df2:	4619      	mov	r1, r3
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7fe fdea 	bl	80029ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	68b8      	ldr	r0, [r7, #8]
 8003e0a:	f000 fa59 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
	}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000958 	.word	0x20000958

08003e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	60fb      	str	r3, [r7, #12]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fe19 	bl	8002a84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <xTaskRemoveFromEventList+0xb0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fe10 	bl	8002a84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <xTaskRemoveFromEventList+0xb4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d903      	bls.n	8003e78 <xTaskRemoveFromEventList+0x5c>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <xTaskRemoveFromEventList+0xb4>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <xTaskRemoveFromEventList+0xb8>)
 8003e86:	441a      	add	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fd9d 	bl	80029ce <vListInsertEnd>
 8003e94:	e005      	b.n	8003ea2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <xTaskRemoveFromEventList+0xbc>)
 8003e9e:	f7fe fd96 	bl	80029ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <xTaskRemoveFromEventList+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d905      	bls.n	8003ebc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <xTaskRemoveFromEventList+0xc4>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e001      	b.n	8003ec0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ec0:	697b      	ldr	r3, [r7, #20]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000e54 	.word	0x20000e54
 8003ed0:	20000e34 	.word	0x20000e34
 8003ed4:	2000095c 	.word	0x2000095c
 8003ed8:	20000dec 	.word	0x20000dec
 8003edc:	20000958 	.word	0x20000958
 8003ee0:	20000e40 	.word	0x20000e40

08003ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <vTaskInternalSetTimeOutState+0x24>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <vTaskInternalSetTimeOutState+0x28>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000e44 	.word	0x20000e44
 8003f0c:	20000e30 	.word	0x20000e30

08003f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	60fb      	str	r3, [r7, #12]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f52:	f000 fe0b 	bl	8004b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <xTaskCheckForTimeOut+0xbc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f6e:	d102      	bne.n	8003f76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e023      	b.n	8003fbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <xTaskCheckForTimeOut+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d007      	beq.n	8003f92 <xTaskCheckForTimeOut+0x82>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e015      	b.n	8003fbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d20b      	bcs.n	8003fb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff9b 	bl	8003ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e004      	b.n	8003fbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 fe05 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000e30 	.word	0x20000e30
 8003fd0:	20000e44 	.word	0x20000e44

08003fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <vTaskMissedYield+0x14>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000e40 	.word	0x20000e40

08003fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ff4:	f000 f852 	bl	800409c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <prvIdleTask+0x28>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d9f9      	bls.n	8003ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <prvIdleTask+0x2c>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004010:	e7f0      	b.n	8003ff4 <prvIdleTask+0x8>
 8004012:	bf00      	nop
 8004014:	2000095c 	.word	0x2000095c
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	e00c      	b.n	8004042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <prvInitialiseTaskLists+0x60>)
 8004034:	4413      	add	r3, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fc9e 	bl	8002978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3301      	adds	r3, #1
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b37      	cmp	r3, #55	; 0x37
 8004046:	d9ef      	bls.n	8004028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004048:	480d      	ldr	r0, [pc, #52]	; (8004080 <prvInitialiseTaskLists+0x64>)
 800404a:	f7fe fc95 	bl	8002978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800404e:	480d      	ldr	r0, [pc, #52]	; (8004084 <prvInitialiseTaskLists+0x68>)
 8004050:	f7fe fc92 	bl	8002978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <prvInitialiseTaskLists+0x6c>)
 8004056:	f7fe fc8f 	bl	8002978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800405a:	480c      	ldr	r0, [pc, #48]	; (800408c <prvInitialiseTaskLists+0x70>)
 800405c:	f7fe fc8c 	bl	8002978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004060:	480b      	ldr	r0, [pc, #44]	; (8004090 <prvInitialiseTaskLists+0x74>)
 8004062:	f7fe fc89 	bl	8002978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <prvInitialiseTaskLists+0x78>)
 8004068:	4a05      	ldr	r2, [pc, #20]	; (8004080 <prvInitialiseTaskLists+0x64>)
 800406a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <prvInitialiseTaskLists+0x7c>)
 800406e:	4a05      	ldr	r2, [pc, #20]	; (8004084 <prvInitialiseTaskLists+0x68>)
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2000095c 	.word	0x2000095c
 8004080:	20000dbc 	.word	0x20000dbc
 8004084:	20000dd0 	.word	0x20000dd0
 8004088:	20000dec 	.word	0x20000dec
 800408c:	20000e00 	.word	0x20000e00
 8004090:	20000e18 	.word	0x20000e18
 8004094:	20000de4 	.word	0x20000de4
 8004098:	20000de8 	.word	0x20000de8

0800409c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a2:	e019      	b.n	80040d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040a4:	f000 fd62 	bl	8004b6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <prvCheckTasksWaitingTermination+0x50>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fce5 	bl	8002a84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <prvCheckTasksWaitingTermination+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <prvCheckTasksWaitingTermination+0x54>)
 80040c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ce:	f000 fd7d 	bl	8004bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f810 	bl	80040f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e1      	bne.n	80040a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000e00 	.word	0x20000e00
 80040f0:	20000e2c 	.word	0x20000e2c
 80040f4:	20000e14 	.word	0x20000e14

080040f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3354      	adds	r3, #84	; 0x54
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f853 	bl	80051b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	4618      	mov	r0, r3
 800411a:	f000 feeb 	bl	8004ef4 <vPortFree>
				vPortFree( pxTCB );
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fee8 	bl	8004ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004124:	e018      	b.n	8004158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800412c:	2b01      	cmp	r3, #1
 800412e:	d103      	bne.n	8004138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fedf 	bl	8004ef4 <vPortFree>
	}
 8004136:	e00f      	b.n	8004158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800413e:	2b02      	cmp	r3, #2
 8004140:	d00a      	beq.n	8004158 <prvDeleteTCB+0x60>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <prvDeleteTCB+0x5e>
	}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <prvResetNextTaskUnblockTime+0x40>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <prvResetNextTaskUnblockTime+0x14>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <prvResetNextTaskUnblockTime+0x16>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <prvResetNextTaskUnblockTime+0x44>)
 800417c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004180:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004182:	e008      	b.n	8004196 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <prvResetNextTaskUnblockTime+0x40>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <prvResetNextTaskUnblockTime+0x44>)
 8004194:	6013      	str	r3, [r2, #0]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	20000de4 	.word	0x20000de4
 80041a4:	20000e4c 	.word	0x20000e4c

080041a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <xTaskGetSchedulerState+0x34>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041b6:	2301      	movs	r3, #1
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	e008      	b.n	80041ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <xTaskGetSchedulerState+0x38>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041c4:	2302      	movs	r3, #2
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	e001      	b.n	80041ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041ce:	687b      	ldr	r3, [r7, #4]
	}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000e38 	.word	0x20000e38
 80041e0:	20000e54 	.word	0x20000e54

080041e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d056      	beq.n	80042a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041fa:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <xTaskPriorityDisinherit+0xd0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	429a      	cmp	r2, r3
 8004202:	d00a      	beq.n	800421a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	429a      	cmp	r2, r3
 800424c:	d02c      	beq.n	80042a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d128      	bne.n	80042a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fc12 	bl	8002a84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <xTaskPriorityDisinherit+0xd4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <xTaskPriorityDisinherit+0xa4>
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <xTaskPriorityDisinherit+0xd4>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <xTaskPriorityDisinherit+0xd8>)
 8004296:	441a      	add	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fe fb95 	bl	80029ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042a4:	2301      	movs	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042a8:	697b      	ldr	r3, [r7, #20]
	}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000958 	.word	0x20000958
 80042b8:	20000e34 	.word	0x20000e34
 80042bc:	2000095c 	.word	0x2000095c

080042c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <prvAddCurrentTaskToDelayedList+0x90>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d0:	4b20      	ldr	r3, [pc, #128]	; (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fbd4 	bl	8002a84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e2:	d10a      	bne.n	80042fa <prvAddCurrentTaskToDelayedList+0x3a>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4819      	ldr	r0, [pc, #100]	; (8004358 <prvAddCurrentTaskToDelayedList+0x98>)
 80042f4:	f7fe fb6b 	bl	80029ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042f8:	e026      	b.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	d209      	bcs.n	8004326 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fb78 	bl	8002a14 <vListInsert>
}
 8004324:	e010      	b.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7fe fb6e 	bl	8002a14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <prvAddCurrentTaskToDelayedList+0xa4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d202      	bcs.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000e30 	.word	0x20000e30
 8004354:	20000958 	.word	0x20000958
 8004358:	20000e18 	.word	0x20000e18
 800435c:	20000de8 	.word	0x20000de8
 8004360:	20000de4 	.word	0x20000de4
 8004364:	20000e4c 	.word	0x20000e4c

08004368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004372:	f000 facb 	bl	800490c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <xTimerCreateTimerTask+0x80>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d021      	beq.n	80043c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004386:	1d3a      	adds	r2, r7, #4
 8004388:	f107 0108 	add.w	r1, r7, #8
 800438c:	f107 030c 	add.w	r3, r7, #12
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fad7 	bl	8002944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	9202      	str	r2, [sp, #8]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	2302      	movs	r3, #2
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	460a      	mov	r2, r1
 80043a8:	4910      	ldr	r1, [pc, #64]	; (80043ec <xTimerCreateTimerTask+0x84>)
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <xTimerCreateTimerTask+0x88>)
 80043ac:	f7ff f8b6 	bl	800351c <xTaskCreateStatic>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <xTimerCreateTimerTask+0x8c>)
 80043b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <xTimerCreateTimerTask+0x8c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	613b      	str	r3, [r7, #16]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043de:	697b      	ldr	r3, [r7, #20]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000e88 	.word	0x20000e88
 80043ec:	080053cc 	.word	0x080053cc
 80043f0:	08004515 	.word	0x08004515
 80043f4:	20000e8c 	.word	0x20000e8c

080043f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	623b      	str	r3, [r7, #32]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <xTimerGenericCommand+0x98>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02a      	beq.n	8004484 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	dc18      	bgt.n	8004472 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004440:	f7ff feb2 	bl	80041a8 <xTaskGetSchedulerState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b02      	cmp	r3, #2
 8004448:	d109      	bne.n	800445e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <xTimerGenericCommand+0x98>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f107 0110 	add.w	r1, r7, #16
 8004452:	2300      	movs	r3, #0
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	f7fe fc7f 	bl	8002d58 <xQueueGenericSend>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24
 800445c:	e012      	b.n	8004484 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <xTimerGenericCommand+0x98>)
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f107 0110 	add.w	r1, r7, #16
 8004466:	2300      	movs	r3, #0
 8004468:	2200      	movs	r2, #0
 800446a:	f7fe fc75 	bl	8002d58 <xQueueGenericSend>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24
 8004470:	e008      	b.n	8004484 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <xTimerGenericCommand+0x98>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f107 0110 	add.w	r1, r7, #16
 800447a:	2300      	movs	r3, #0
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	f7fe fd69 	bl	8002f54 <xQueueGenericSendFromISR>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000e88 	.word	0x20000e88

08004494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <prvProcessExpiredTimer+0x7c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fae9 	bl	8002a84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d122      	bne.n	8004500 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	18d1      	adds	r1, r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f000 f8c8 	bl	800465c <prvInsertTimerInActiveList>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	2100      	movs	r1, #0
 80044dc:	6978      	ldr	r0, [r7, #20]
 80044de:	f7ff ff8b 	bl	80043f8 <xTimerGenericCommand>
 80044e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	4798      	blx	r3
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000e80 	.word	0x20000e80

08004514 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f857 	bl	80045d4 <prvGetNextExpireTime>
 8004526:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4619      	mov	r1, r3
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f803 	bl	8004538 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004532:	f000 f8d5 	bl	80046e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004536:	e7f1      	b.n	800451c <prvTimerTask+0x8>

08004538 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004542:	f7ff fa3f 	bl	80039c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f866 	bl	800461c <prvSampleTimeNow>
 8004550:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d130      	bne.n	80045ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <prvProcessTimerOrBlockTask+0x3c>
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	429a      	cmp	r2, r3
 8004564:	d806      	bhi.n	8004574 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004566:	f7ff fa3b 	bl	80039e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff91 	bl	8004494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004572:	e024      	b.n	80045be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <prvProcessTimerOrBlockTask+0x90>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <prvProcessTimerOrBlockTask+0x94>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4619      	mov	r1, r3
 800459a:	f7fe ff8b 	bl	80034b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800459e:	f7ff fa1f 	bl	80039e0 <xTaskResumeAll>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <prvProcessTimerOrBlockTask+0x98>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
}
 80045b8:	e001      	b.n	80045be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045ba:	f7ff fa11 	bl	80039e0 <xTaskResumeAll>
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000e84 	.word	0x20000e84
 80045cc:	20000e88 	.word	0x20000e88
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <prvGetNextExpireTime+0x44>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <prvGetNextExpireTime+0x44>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e001      	b.n	800460a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000e80 	.word	0x20000e80

0800461c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004624:	f7ff fa7a 	bl	8003b1c <xTaskGetTickCount>
 8004628:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <prvSampleTimeNow+0x3c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d205      	bcs.n	8004640 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004634:	f000 f908 	bl	8004848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e002      	b.n	8004646 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <prvSampleTimeNow+0x3c>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000e90 	.word	0x20000e90

0800465c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d812      	bhi.n	80046a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e01b      	b.n	80046ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <prvInsertTimerInActiveList+0x7c>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fe f9b7 	bl	8002a14 <vListInsert>
 80046a6:	e012      	b.n	80046ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d206      	bcs.n	80046be <prvInsertTimerInActiveList+0x62>
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d302      	bcc.n	80046be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e007      	b.n	80046ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046be:	4b07      	ldr	r3, [pc, #28]	; (80046dc <prvInsertTimerInActiveList+0x80>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe f9a3 	bl	8002a14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000e84 	.word	0x20000e84
 80046dc:	20000e80 	.word	0x20000e80

080046e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046e6:	e09d      	b.n	8004824 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da18      	bge.n	8004720 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	3304      	adds	r3, #4
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	61fb      	str	r3, [r7, #28]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004716:	6850      	ldr	r0, [r2, #4]
 8004718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471a:	6892      	ldr	r2, [r2, #8]
 800471c:	4611      	mov	r1, r2
 800471e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db7d      	blt.n	8004822 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	3304      	adds	r3, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe f9a4 	bl	8002a84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800473c:	463b      	mov	r3, r7
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff6c 	bl	800461c <prvSampleTimeNow>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b09      	cmp	r3, #9
 800474a:	d86b      	bhi.n	8004824 <prvProcessReceivedCommands+0x144>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <prvProcessReceivedCommands+0x74>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	0800477d 	.word	0x0800477d
 8004758:	0800477d 	.word	0x0800477d
 800475c:	0800477d 	.word	0x0800477d
 8004760:	08004825 	.word	0x08004825
 8004764:	080047d9 	.word	0x080047d9
 8004768:	08004811 	.word	0x08004811
 800476c:	0800477d 	.word	0x0800477d
 8004770:	0800477d 	.word	0x0800477d
 8004774:	08004825 	.word	0x08004825
 8004778:	080047d9 	.word	0x080047d9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	18d1      	adds	r1, r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478a:	f7ff ff67 	bl	800465c <prvInsertTimerInActiveList>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d047      	beq.n	8004824 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d13f      	bne.n	8004824 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	441a      	add	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b6:	f7ff fe1f 	bl	80043f8 <xTimerGenericCommand>
 80047ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d130      	bne.n	8004824 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	61bb      	str	r3, [r7, #24]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	617b      	str	r3, [r7, #20]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	18d1      	adds	r1, r2, r3
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480a:	f7ff ff27 	bl	800465c <prvInsertTimerInActiveList>
					break;
 800480e:	e009      	b.n	8004824 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800481a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481c:	f000 fb6a 	bl	8004ef4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004820:	e000      	b.n	8004824 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004822:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <prvProcessReceivedCommands+0x164>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1d39      	adds	r1, r7, #4
 800482a:	2200      	movs	r2, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fc29 	bl	8003084 <xQueueReceive>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f af57 	bne.w	80046e8 <prvProcessReceivedCommands+0x8>
	}
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3730      	adds	r7, #48	; 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000e88 	.word	0x20000e88

08004848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800484e:	e045      	b.n	80048dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004850:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <prvSwitchTimerLists+0xbc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <prvSwitchTimerLists+0xbc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3304      	adds	r3, #4
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe f90b 	bl	8002a84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d12e      	bne.n	80048dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d90e      	bls.n	80048ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <prvSwitchTimerLists+0xbc>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7fe f8b4 	bl	8002a14 <vListInsert>
 80048ac:	e016      	b.n	80048dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	2100      	movs	r1, #0
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fd9d 	bl	80043f8 <xTimerGenericCommand>
 80048be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	603b      	str	r3, [r7, #0]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <prvSwitchTimerLists+0xbc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1b4      	bne.n	8004850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <prvSwitchTimerLists+0xbc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <prvSwitchTimerLists+0xbc>)
 80048f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000e80 	.word	0x20000e80
 8004908:	20000e84 	.word	0x20000e84

0800490c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004912:	f000 f92b 	bl	8004b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d120      	bne.n	8004960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800491e:	4814      	ldr	r0, [pc, #80]	; (8004970 <prvCheckForValidListAndQueue+0x64>)
 8004920:	f7fe f82a 	bl	8002978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004924:	4813      	ldr	r0, [pc, #76]	; (8004974 <prvCheckForValidListAndQueue+0x68>)
 8004926:	f7fe f827 	bl	8002978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <prvCheckForValidListAndQueue+0x6c>)
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <prvCheckForValidListAndQueue+0x64>)
 800492e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <prvCheckForValidListAndQueue+0x70>)
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <prvCheckForValidListAndQueue+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <prvCheckForValidListAndQueue+0x74>)
 800493c:	4a11      	ldr	r2, [pc, #68]	; (8004984 <prvCheckForValidListAndQueue+0x78>)
 800493e:	2110      	movs	r1, #16
 8004940:	200a      	movs	r0, #10
 8004942:	f7fe f931 	bl	8002ba8 <xQueueGenericCreateStatic>
 8004946:	4603      	mov	r3, r0
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 800494a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	490b      	ldr	r1, [pc, #44]	; (8004988 <prvCheckForValidListAndQueue+0x7c>)
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fd82 	bl	8003464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004960:	f000 f934 	bl	8004bcc <vPortExitCritical>
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000e88 	.word	0x20000e88
 8004970:	20000e58 	.word	0x20000e58
 8004974:	20000e6c 	.word	0x20000e6c
 8004978:	20000e80 	.word	0x20000e80
 800497c:	20000e84 	.word	0x20000e84
 8004980:	20000f34 	.word	0x20000f34
 8004984:	20000e94 	.word	0x20000e94
 8004988:	080053d4 	.word	0x080053d4

0800498c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b04      	subs	r3, #4
 800499c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3b04      	subs	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b04      	subs	r3, #4
 80049ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <pxPortInitialiseStack+0x54>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b14      	subs	r3, #20
 80049c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b20      	subs	r3, #32
 80049d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	080049e5 	.word	0x080049e5

080049e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <prvTaskExitError+0x54>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f6:	d00a      	beq.n	8004a0e <prvTaskExitError+0x2a>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60fb      	str	r3, [r7, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <prvTaskExitError+0x28>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60bb      	str	r3, [r7, #8]
}
 8004a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a22:	bf00      	nop
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0fc      	beq.n	8004a24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	2000003c 	.word	0x2000003c
 8004a3c:	00000000 	.word	0x00000000

08004a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <pxCurrentTCBConst2>)
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	6808      	ldr	r0, [r1, #0]
 8004a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a4a:	f380 8809 	msr	PSP, r0
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a5e:	4770      	bx	lr

08004a60 <pxCurrentTCBConst2>:
 8004a60:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a68:	4806      	ldr	r0, [pc, #24]	; (8004a84 <prvPortStartFirstTask+0x1c>)
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f380 8808 	msr	MSP, r0
 8004a72:	b662      	cpsie	i
 8004a74:	b661      	cpsie	f
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	df00      	svc	0
 8004a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed08 	.word	0xe000ed08

08004a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8e:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <xPortStartScheduler+0xd0>)
 8004a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <xPortStartScheduler+0xd4>)
 8004ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abc:	e009      	b.n	8004ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d0ef      	beq.n	8004abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00a      	beq.n	8004b00 <xPortStartScheduler+0x78>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004b08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <xPortStartScheduler+0xd8>)
 8004b14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <xPortStartScheduler+0xdc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <xPortStartScheduler+0xdc>)
 8004b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <xPortStartScheduler+0xdc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <xPortStartScheduler+0xdc>)
 8004b30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b36:	f000 f8b9 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <xPortStartScheduler+0xe0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b40:	f7ff ff92 	bl	8004a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b44:	f7ff f8b6 	bl	8003cb4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b48:	f7ff ff4c 	bl	80049e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000e400 	.word	0xe000e400
 8004b5c:	20000f84 	.word	0x20000f84
 8004b60:	20000f88 	.word	0x20000f88
 8004b64:	e000ed20 	.word	0xe000ed20
 8004b68:	2000003c 	.word	0x2000003c

08004b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	607b      	str	r3, [r7, #4]
}
 8004b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <vPortEnterCritical+0x58>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <vPortEnterCritical+0x58>)
 8004b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <vPortEnterCritical+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10f      	bne.n	8004bb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <vPortEnterCritical+0x5c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	603b      	str	r3, [r7, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <vPortEnterCritical+0x4a>
	}
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000003c 	.word	0x2000003c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bd2:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <vPortExitCritical+0x4c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <vPortExitCritical+0x24>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <vPortExitCritical+0x4c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <vPortExitCritical+0x4c>)
 8004bf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <vPortExitCritical+0x4c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <vPortExitCritical+0x42>
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f383 8811 	msr	BASEPRI, r3
}
 8004c0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	2000003c 	.word	0x2000003c
 8004c1c:	00000000 	.word	0x00000000

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c3a:	f380 8811 	msr	BASEPRI, r0
 8004c3e:	f7ff f839 	bl	8003cb4 <vTaskSwitchContext>
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c56:	f380 8809 	msr	PSP, r0
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst>:
 8004c60:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7fe ff59 	bl	8003b38 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <SysTick_Handler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	e000e010 	.word	0xe000e010
 8004ce0:	e000e018 	.word	0xe000e018
 8004ce4:	20000030 	.word	0x20000030
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	e000e014 	.word	0xe000e014

08004cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d914      	bls.n	8004d2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <vPortValidateInterruptPriority+0x6c>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <vPortValidateInterruptPriority+0x70>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	7afa      	ldrb	r2, [r7, #11]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20a      	bcs.n	8004d2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	607b      	str	r3, [r7, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <vPortValidateInterruptPriority+0x74>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <vPortValidateInterruptPriority+0x78>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d90a      	bls.n	8004d52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	603b      	str	r3, [r7, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <vPortValidateInterruptPriority+0x60>
	}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e3f0 	.word	0xe000e3f0
 8004d60:	20000f84 	.word	0x20000f84
 8004d64:	e000ed0c 	.word	0xe000ed0c
 8004d68:	20000f88 	.word	0x20000f88

08004d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d78:	f7fe fe24 	bl	80039c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d7c:	4b58      	ldr	r3, [pc, #352]	; (8004ee0 <pvPortMalloc+0x174>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d84:	f000 f910 	bl	8004fa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d88:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <pvPortMalloc+0x178>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 808e 	bne.w	8004eb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01d      	beq.n	8004dd8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f023 0307 	bic.w	r3, r3, #7
 8004db4:	3308      	adds	r3, #8
 8004db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <pvPortMalloc+0x6c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	617b      	str	r3, [r7, #20]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d069      	beq.n	8004eb2 <pvPortMalloc+0x146>
 8004dde:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <pvPortMalloc+0x17c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d864      	bhi.n	8004eb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <pvPortMalloc+0x180>)
 8004dea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <pvPortMalloc+0x180>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df2:	e004      	b.n	8004dfe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d903      	bls.n	8004e10 <pvPortMalloc+0xa4>
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f1      	bne.n	8004df4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <pvPortMalloc+0x174>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d04b      	beq.n	8004eb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	2308      	movs	r3, #8
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d91f      	bls.n	8004e7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <pvPortMalloc+0xf8>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	613b      	str	r3, [r7, #16]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e76:	69b8      	ldr	r0, [r7, #24]
 8004e78:	f000 f8f8 	bl	800506c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <pvPortMalloc+0x17c>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <pvPortMalloc+0x17c>)
 8004e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <pvPortMalloc+0x17c>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <pvPortMalloc+0x184>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d203      	bcs.n	8004e9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <pvPortMalloc+0x17c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <pvPortMalloc+0x184>)
 8004e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <pvPortMalloc+0x178>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eb2:	f7fe fd95 	bl	80039e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <pvPortMalloc+0x16a>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <pvPortMalloc+0x168>
	return pvReturn;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3728      	adds	r7, #40	; 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20002ed4 	.word	0x20002ed4
 8004ee4:	20002ee0 	.word	0x20002ee0
 8004ee8:	20002ed8 	.word	0x20002ed8
 8004eec:	20002ecc 	.word	0x20002ecc
 8004ef0:	20002edc 	.word	0x20002edc

08004ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d048      	beq.n	8004f98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f06:	2308      	movs	r3, #8
 8004f08:	425b      	negs	r3, r3
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <vPortFree+0xac>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <vPortFree+0x44>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <vPortFree+0x62>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60bb      	str	r3, [r7, #8]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <vPortFree+0xac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d019      	beq.n	8004f98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d115      	bne.n	8004f98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortFree+0xac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	401a      	ands	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f7c:	f7fe fd22 	bl	80039c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <vPortFree+0xb0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <vPortFree+0xb0>)
 8004f8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f8e:	6938      	ldr	r0, [r7, #16]
 8004f90:	f000 f86c 	bl	800506c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f94:	f7fe fd24 	bl	80039e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20002ee0 	.word	0x20002ee0
 8004fa4:	20002ed8 	.word	0x20002ed8

08004fa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fae:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004fb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <prvHeapInit+0xac>)
 8004fb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <prvHeapInit+0xac>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <prvHeapInit+0xb0>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <prvHeapInit+0xb0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <prvHeapInit+0xb4>)
 8005008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <prvHeapInit+0xb4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <prvHeapInit+0xb4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <prvHeapInit+0xb4>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <prvHeapInit+0xb8>)
 8005036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a09      	ldr	r2, [pc, #36]	; (8005064 <prvHeapInit+0xbc>)
 800503e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <prvHeapInit+0xc0>)
 8005042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000f8c 	.word	0x20000f8c
 8005058:	20002ecc 	.word	0x20002ecc
 800505c:	20002ed4 	.word	0x20002ed4
 8005060:	20002edc 	.word	0x20002edc
 8005064:	20002ed8 	.word	0x20002ed8
 8005068:	20002ee0 	.word	0x20002ee0

0800506c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005074:	4b27      	ldr	r3, [pc, #156]	; (8005114 <prvInsertBlockIntoFreeList+0xa8>)
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e002      	b.n	8005080 <prvInsertBlockIntoFreeList+0x14>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d8f7      	bhi.n	800507a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4413      	add	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d108      	bne.n	80050ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d118      	bne.n	80050f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <prvInsertBlockIntoFreeList+0xac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d00d      	beq.n	80050ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	441a      	add	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e008      	b.n	80050fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <prvInsertBlockIntoFreeList+0xac>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e003      	b.n	80050fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d002      	beq.n	800510a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	20002ecc 	.word	0x20002ecc
 8005118:	20002ed4 	.word	0x20002ed4

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	2600      	movs	r6, #0
 8005120:	4d0c      	ldr	r5, [pc, #48]	; (8005154 <__libc_init_array+0x38>)
 8005122:	4c0d      	ldr	r4, [pc, #52]	; (8005158 <__libc_init_array+0x3c>)
 8005124:	1b64      	subs	r4, r4, r5
 8005126:	10a4      	asrs	r4, r4, #2
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	f000 f906 	bl	800533c <_init>
 8005130:	2600      	movs	r6, #0
 8005132:	4d0a      	ldr	r5, [pc, #40]	; (800515c <__libc_init_array+0x40>)
 8005134:	4c0a      	ldr	r4, [pc, #40]	; (8005160 <__libc_init_array+0x44>)
 8005136:	1b64      	subs	r4, r4, r5
 8005138:	10a4      	asrs	r4, r4, #2
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	080054fc 	.word	0x080054fc
 8005158:	080054fc 	.word	0x080054fc
 800515c:	080054fc 	.word	0x080054fc
 8005160:	08005500 	.word	0x08005500

08005164 <__retarget_lock_acquire_recursive>:
 8005164:	4770      	bx	lr

08005166 <__retarget_lock_release_recursive>:
 8005166:	4770      	bx	lr

08005168 <memcpy>:
 8005168:	440a      	add	r2, r1
 800516a:	4291      	cmp	r1, r2
 800516c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005170:	d100      	bne.n	8005174 <memcpy+0xc>
 8005172:	4770      	bx	lr
 8005174:	b510      	push	{r4, lr}
 8005176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517a:	4291      	cmp	r1, r2
 800517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005180:	d1f9      	bne.n	8005176 <memcpy+0xe>
 8005182:	bd10      	pop	{r4, pc}

08005184 <memset>:
 8005184:	4603      	mov	r3, r0
 8005186:	4402      	add	r2, r0
 8005188:	4293      	cmp	r3, r2
 800518a:	d100      	bne.n	800518e <memset+0xa>
 800518c:	4770      	bx	lr
 800518e:	f803 1b01 	strb.w	r1, [r3], #1
 8005192:	e7f9      	b.n	8005188 <memset+0x4>

08005194 <cleanup_glue>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	460c      	mov	r4, r1
 8005198:	6809      	ldr	r1, [r1, #0]
 800519a:	4605      	mov	r5, r0
 800519c:	b109      	cbz	r1, 80051a2 <cleanup_glue+0xe>
 800519e:	f7ff fff9 	bl	8005194 <cleanup_glue>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051aa:	f000 b87f 	b.w	80052ac <_free_r>
	...

080051b0 <_reclaim_reent>:
 80051b0:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <_reclaim_reent+0xb4>)
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4604      	mov	r4, r0
 80051b8:	4283      	cmp	r3, r0
 80051ba:	d051      	beq.n	8005260 <_reclaim_reent+0xb0>
 80051bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051be:	b143      	cbz	r3, 80051d2 <_reclaim_reent+0x22>
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d14a      	bne.n	800525c <_reclaim_reent+0xac>
 80051c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	b111      	cbz	r1, 80051d2 <_reclaim_reent+0x22>
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 f86d 	bl	80052ac <_free_r>
 80051d2:	6961      	ldr	r1, [r4, #20]
 80051d4:	b111      	cbz	r1, 80051dc <_reclaim_reent+0x2c>
 80051d6:	4620      	mov	r0, r4
 80051d8:	f000 f868 	bl	80052ac <_free_r>
 80051dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051de:	b111      	cbz	r1, 80051e6 <_reclaim_reent+0x36>
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 f863 	bl	80052ac <_free_r>
 80051e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051e8:	b111      	cbz	r1, 80051f0 <_reclaim_reent+0x40>
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f85e 	bl	80052ac <_free_r>
 80051f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051f2:	b111      	cbz	r1, 80051fa <_reclaim_reent+0x4a>
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 f859 	bl	80052ac <_free_r>
 80051fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80051fc:	b111      	cbz	r1, 8005204 <_reclaim_reent+0x54>
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f854 	bl	80052ac <_free_r>
 8005204:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005206:	b111      	cbz	r1, 800520e <_reclaim_reent+0x5e>
 8005208:	4620      	mov	r0, r4
 800520a:	f000 f84f 	bl	80052ac <_free_r>
 800520e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005210:	b111      	cbz	r1, 8005218 <_reclaim_reent+0x68>
 8005212:	4620      	mov	r0, r4
 8005214:	f000 f84a 	bl	80052ac <_free_r>
 8005218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521a:	b111      	cbz	r1, 8005222 <_reclaim_reent+0x72>
 800521c:	4620      	mov	r0, r4
 800521e:	f000 f845 	bl	80052ac <_free_r>
 8005222:	69a3      	ldr	r3, [r4, #24]
 8005224:	b1e3      	cbz	r3, 8005260 <_reclaim_reent+0xb0>
 8005226:	4620      	mov	r0, r4
 8005228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522a:	4798      	blx	r3
 800522c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800522e:	b1b9      	cbz	r1, 8005260 <_reclaim_reent+0xb0>
 8005230:	4620      	mov	r0, r4
 8005232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005236:	f7ff bfad 	b.w	8005194 <cleanup_glue>
 800523a:	5949      	ldr	r1, [r1, r5]
 800523c:	b941      	cbnz	r1, 8005250 <_reclaim_reent+0xa0>
 800523e:	3504      	adds	r5, #4
 8005240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005242:	2d80      	cmp	r5, #128	; 0x80
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	d1f8      	bne.n	800523a <_reclaim_reent+0x8a>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f82f 	bl	80052ac <_free_r>
 800524e:	e7ba      	b.n	80051c6 <_reclaim_reent+0x16>
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f82a 	bl	80052ac <_free_r>
 8005258:	4631      	mov	r1, r6
 800525a:	e7ef      	b.n	800523c <_reclaim_reent+0x8c>
 800525c:	2500      	movs	r5, #0
 800525e:	e7ef      	b.n	8005240 <_reclaim_reent+0x90>
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	bf00      	nop
 8005264:	20000040 	.word	0x20000040

08005268 <strstr>:
 8005268:	780a      	ldrb	r2, [r1, #0]
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	b96a      	cbnz	r2, 800528a <strstr+0x22>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	429a      	cmp	r2, r3
 8005272:	d109      	bne.n	8005288 <strstr+0x20>
 8005274:	460c      	mov	r4, r1
 8005276:	4605      	mov	r5, r0
 8005278:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f6      	beq.n	800526e <strstr+0x6>
 8005280:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005284:	429e      	cmp	r6, r3
 8005286:	d0f7      	beq.n	8005278 <strstr+0x10>
 8005288:	3001      	adds	r0, #1
 800528a:	7803      	ldrb	r3, [r0, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ef      	bne.n	8005270 <strstr+0x8>
 8005290:	4618      	mov	r0, r3
 8005292:	e7ec      	b.n	800526e <strstr+0x6>

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bf65 	b.w	8005164 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	20002ee4 	.word	0x20002ee4

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bf60 	b.w	8005166 <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	20002ee4 	.word	0x20002ee4

080052ac <_free_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4605      	mov	r5, r0
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d040      	beq.n	8005336 <_free_r+0x8a>
 80052b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b8:	1f0c      	subs	r4, r1, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bfb8      	it	lt
 80052be:	18e4      	addlt	r4, r4, r3
 80052c0:	f7ff ffe8 	bl	8005294 <__malloc_lock>
 80052c4:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <_free_r+0x8c>)
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	b933      	cbnz	r3, 80052d8 <_free_r+0x2c>
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	6014      	str	r4, [r2, #0]
 80052ce:	4628      	mov	r0, r5
 80052d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d4:	f7ff bfe4 	b.w	80052a0 <__malloc_unlock>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d908      	bls.n	80052ee <_free_r+0x42>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	1821      	adds	r1, r4, r0
 80052e0:	428b      	cmp	r3, r1
 80052e2:	bf01      	itttt	eq
 80052e4:	6819      	ldreq	r1, [r3, #0]
 80052e6:	685b      	ldreq	r3, [r3, #4]
 80052e8:	1809      	addeq	r1, r1, r0
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	e7ed      	b.n	80052ca <_free_r+0x1e>
 80052ee:	461a      	mov	r2, r3
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b10b      	cbz	r3, 80052f8 <_free_r+0x4c>
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d9fa      	bls.n	80052ee <_free_r+0x42>
 80052f8:	6811      	ldr	r1, [r2, #0]
 80052fa:	1850      	adds	r0, r2, r1
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d10b      	bne.n	8005318 <_free_r+0x6c>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	4401      	add	r1, r0
 8005304:	1850      	adds	r0, r2, r1
 8005306:	4283      	cmp	r3, r0
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	d1e0      	bne.n	80052ce <_free_r+0x22>
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4401      	add	r1, r0
 8005312:	6011      	str	r1, [r2, #0]
 8005314:	6053      	str	r3, [r2, #4]
 8005316:	e7da      	b.n	80052ce <_free_r+0x22>
 8005318:	d902      	bls.n	8005320 <_free_r+0x74>
 800531a:	230c      	movs	r3, #12
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	e7d6      	b.n	80052ce <_free_r+0x22>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6063      	str	r3, [r4, #4]
 8005332:	6054      	str	r4, [r2, #4]
 8005334:	e7cb      	b.n	80052ce <_free_r+0x22>
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20002ee8 	.word	0x20002ee8

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
